# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class GetServiceBooks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'created_at': 'str',
        'created_by_id': 'str',
        'created_by': 'str',
        'created_by_name': 'str',
        'owner_group_guid': 'str',
        'owner_group': 'str',
        'owner_group_name': 'str',
        'description': 'str'
    }

    attribute_map = {
        'guid': 'guid',
        'created_at': 'created_at',
        'created_by_id': 'created_by_id',
        'created_by': 'created_by',
        'created_by_name': 'created_by_name',
        'owner_group_guid': 'owner_group_guid',
        'owner_group': 'owner_group',
        'owner_group_name': 'owner_group_name',
        'description': 'description'
    }

    def __init__(self, guid=None, created_at=None, created_by_id=None, created_by=None, created_by_name=None, owner_group_guid=None, owner_group=None, owner_group_name=None, description=None, _configuration=None):  # noqa: E501
        """GetServiceBooks - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._guid = None
        self._created_at = None
        self._created_by_id = None
        self._created_by = None
        self._created_by_name = None
        self._owner_group_guid = None
        self._owner_group = None
        self._owner_group_name = None
        self._description = None
        self.discriminator = None

        if guid is not None:
            self.guid = guid
        if created_at is not None:
            self.created_at = created_at
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_by is not None:
            self.created_by = created_by
        if created_by_name is not None:
            self.created_by_name = created_by_name
        if owner_group_guid is not None:
            self.owner_group_guid = owner_group_guid
        if owner_group is not None:
            self.owner_group = owner_group
        if owner_group_name is not None:
            self.owner_group_name = owner_group_name
        if description is not None:
            self.description = description

    @property
    def guid(self):
        """Gets the guid of this GetServiceBooks.  # noqa: E501

        The global unique id across robots that identifies this service note  # noqa: E501

        :return: The guid of this GetServiceBooks.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this GetServiceBooks.

        The global unique id across robots that identifies this service note  # noqa: E501

        :param guid: The guid of this GetServiceBooks.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def created_at(self):
        """Gets the created_at of this GetServiceBooks.  # noqa: E501

        Creation time of the service note  # noqa: E501

        :return: The created_at of this GetServiceBooks.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetServiceBooks.

        Creation time of the service note  # noqa: E501

        :param created_at: The created_at of this GetServiceBooks.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def created_by_id(self):
        """Gets the created_by_id of this GetServiceBooks.  # noqa: E501

        The user which created the log  # noqa: E501

        :return: The created_by_id of this GetServiceBooks.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this GetServiceBooks.

        The user which created the log  # noqa: E501

        :param created_by_id: The created_by_id of this GetServiceBooks.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_by(self):
        """Gets the created_by of this GetServiceBooks.  # noqa: E501

        The url to the user  # noqa: E501

        :return: The created_by of this GetServiceBooks.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this GetServiceBooks.

        The url to the user  # noqa: E501

        :param created_by: The created_by of this GetServiceBooks.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_by_name(self):
        """Gets the created_by_name of this GetServiceBooks.  # noqa: E501

        The user name which created the log  # noqa: E501

        :return: The created_by_name of this GetServiceBooks.  # noqa: E501
        :rtype: str
        """
        return self._created_by_name

    @created_by_name.setter
    def created_by_name(self, created_by_name):
        """Sets the created_by_name of this GetServiceBooks.

        The user name which created the log  # noqa: E501

        :param created_by_name: The created_by_name of this GetServiceBooks.  # noqa: E501
        :type: str
        """

        self._created_by_name = created_by_name

    @property
    def owner_group_guid(self):
        """Gets the owner_group_guid of this GetServiceBooks.  # noqa: E501

        The usergroup which owns the service book   # noqa: E501

        :return: The owner_group_guid of this GetServiceBooks.  # noqa: E501
        :rtype: str
        """
        return self._owner_group_guid

    @owner_group_guid.setter
    def owner_group_guid(self, owner_group_guid):
        """Sets the owner_group_guid of this GetServiceBooks.

        The usergroup which owns the service book   # noqa: E501

        :param owner_group_guid: The owner_group_guid of this GetServiceBooks.  # noqa: E501
        :type: str
        """

        self._owner_group_guid = owner_group_guid

    @property
    def owner_group(self):
        """Gets the owner_group of this GetServiceBooks.  # noqa: E501

        The url to the owner group  # noqa: E501

        :return: The owner_group of this GetServiceBooks.  # noqa: E501
        :rtype: str
        """
        return self._owner_group

    @owner_group.setter
    def owner_group(self, owner_group):
        """Sets the owner_group of this GetServiceBooks.

        The url to the owner group  # noqa: E501

        :param owner_group: The owner_group of this GetServiceBooks.  # noqa: E501
        :type: str
        """

        self._owner_group = owner_group

    @property
    def owner_group_name(self):
        """Gets the owner_group_name of this GetServiceBooks.  # noqa: E501

        The group name which owns the log  # noqa: E501

        :return: The owner_group_name of this GetServiceBooks.  # noqa: E501
        :rtype: str
        """
        return self._owner_group_name

    @owner_group_name.setter
    def owner_group_name(self, owner_group_name):
        """Sets the owner_group_name of this GetServiceBooks.

        The group name which owns the log  # noqa: E501

        :param owner_group_name: The owner_group_name of this GetServiceBooks.  # noqa: E501
        :type: str
        """

        self._owner_group_name = owner_group_name

    @property
    def description(self):
        """Gets the description of this GetServiceBooks.  # noqa: E501

        The sevice note  # noqa: E501

        :return: The description of this GetServiceBooks.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetServiceBooks.

        The sevice note  # noqa: E501

        :param description: The description of this GetServiceBooks.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetServiceBooks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetServiceBooks):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetServiceBooks):
            return True

        return self.to_dict() != other.to_dict()
