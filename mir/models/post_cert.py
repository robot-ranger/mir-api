# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class PostCert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cert_pem_file': 'str',
        'cert_key_file': 'str'
    }

    attribute_map = {
        'cert_pem_file': 'cert_pem_file',
        'cert_key_file': 'cert_key_file'
    }

    def __init__(self, cert_pem_file=None, cert_key_file=None, _configuration=None):  # noqa: E501
        """PostCert - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cert_pem_file = None
        self._cert_key_file = None
        self.discriminator = None

        self.cert_pem_file = cert_pem_file
        self.cert_key_file = cert_key_file

    @property
    def cert_pem_file(self):
        """Gets the cert_pem_file of this PostCert.  # noqa: E501


        :return: The cert_pem_file of this PostCert.  # noqa: E501
        :rtype: str
        """
        return self._cert_pem_file

    @cert_pem_file.setter
    def cert_pem_file(self, cert_pem_file):
        """Sets the cert_pem_file of this PostCert.


        :param cert_pem_file: The cert_pem_file of this PostCert.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and cert_pem_file is None:
            raise ValueError("Invalid value for `cert_pem_file`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cert_pem_file is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', cert_pem_file)):  # noqa: E501
            raise ValueError(r"Invalid value for `cert_pem_file`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._cert_pem_file = cert_pem_file

    @property
    def cert_key_file(self):
        """Gets the cert_key_file of this PostCert.  # noqa: E501


        :return: The cert_key_file of this PostCert.  # noqa: E501
        :rtype: str
        """
        return self._cert_key_file

    @cert_key_file.setter
    def cert_key_file(self, cert_key_file):
        """Sets the cert_key_file of this PostCert.


        :param cert_key_file: The cert_key_file of this PostCert.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and cert_key_file is None:
            raise ValueError("Invalid value for `cert_key_file`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cert_key_file is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', cert_key_file)):  # noqa: E501
            raise ValueError(r"Invalid value for `cert_key_file`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._cert_key_file = cert_key_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostCert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostCert):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostCert):
            return True

        return self.to_dict() != other.to_dict()
