# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class PutMissionAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scope_reference': 'str',
        'priority': 'int',
        'parameters': 'list[object]'
    }

    attribute_map = {
        'scope_reference': 'scope_reference',
        'priority': 'priority',
        'parameters': 'parameters'
    }

    def __init__(self, scope_reference=None, priority=None, parameters=None, _configuration=None):  # noqa: E501
        """PutMissionAction - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._scope_reference = None
        self._priority = None
        self._parameters = None
        self.discriminator = None

        if scope_reference is not None:
            self.scope_reference = scope_reference
        if priority is not None:
            self.priority = priority
        if parameters is not None:
            self.parameters = parameters

    @property
    def scope_reference(self):
        """Gets the scope_reference of this PutMissionAction.  # noqa: E501


        :return: The scope_reference of this PutMissionAction.  # noqa: E501
        :rtype: str
        """
        return self._scope_reference

    @scope_reference.setter
    def scope_reference(self, scope_reference):
        """Sets the scope_reference of this PutMissionAction.


        :param scope_reference: The scope_reference of this PutMissionAction.  # noqa: E501
        :type: str
        """

        self._scope_reference = scope_reference

    @property
    def priority(self):
        """Gets the priority of this PutMissionAction.  # noqa: E501


        :return: The priority of this PutMissionAction.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this PutMissionAction.


        :param priority: The priority of this PutMissionAction.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def parameters(self):
        """Gets the parameters of this PutMissionAction.  # noqa: E501


        :return: The parameters of this PutMissionAction.  # noqa: E501
        :rtype: list[object]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this PutMissionAction.


        :param parameters: The parameters of this PutMissionAction.  # noqa: E501
        :type: list[object]
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PutMissionAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutMissionAction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PutMissionAction):
            return True

        return self.to_dict() != other.to_dict()
