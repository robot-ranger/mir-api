# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class PutPosition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'pos_x': 'float',
        'pos_y': 'float',
        'orientation': 'float',
        'type_id': 'int',
        'map_id': 'str',
        'parent_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'pos_x': 'pos_x',
        'pos_y': 'pos_y',
        'orientation': 'orientation',
        'type_id': 'type_id',
        'map_id': 'map_id',
        'parent_id': 'parent_id'
    }

    def __init__(self, name=None, pos_x=None, pos_y=None, orientation=None, type_id=None, map_id=None, parent_id=None, _configuration=None):  # noqa: E501
        """PutPosition - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._pos_x = None
        self._pos_y = None
        self._orientation = None
        self._type_id = None
        self._map_id = None
        self._parent_id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if pos_x is not None:
            self.pos_x = pos_x
        if pos_y is not None:
            self.pos_y = pos_y
        if orientation is not None:
            self.orientation = orientation
        if type_id is not None:
            self.type_id = type_id
        if map_id is not None:
            self.map_id = map_id
        if parent_id is not None:
            self.parent_id = parent_id

    @property
    def name(self):
        """Gets the name of this PutPosition.  # noqa: E501

        Min length: 1, Max length: 40  # noqa: E501

        :return: The name of this PutPosition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PutPosition.

        Min length: 1, Max length: 40  # noqa: E501

        :param name: The name of this PutPosition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pos_x(self):
        """Gets the pos_x of this PutPosition.  # noqa: E501


        :return: The pos_x of this PutPosition.  # noqa: E501
        :rtype: float
        """
        return self._pos_x

    @pos_x.setter
    def pos_x(self, pos_x):
        """Sets the pos_x of this PutPosition.


        :param pos_x: The pos_x of this PutPosition.  # noqa: E501
        :type: float
        """

        self._pos_x = pos_x

    @property
    def pos_y(self):
        """Gets the pos_y of this PutPosition.  # noqa: E501


        :return: The pos_y of this PutPosition.  # noqa: E501
        :rtype: float
        """
        return self._pos_y

    @pos_y.setter
    def pos_y(self, pos_y):
        """Sets the pos_y of this PutPosition.


        :param pos_y: The pos_y of this PutPosition.  # noqa: E501
        :type: float
        """

        self._pos_y = pos_y

    @property
    def orientation(self):
        """Gets the orientation of this PutPosition.  # noqa: E501


        :return: The orientation of this PutPosition.  # noqa: E501
        :rtype: float
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this PutPosition.


        :param orientation: The orientation of this PutPosition.  # noqa: E501
        :type: float
        """

        self._orientation = orientation

    @property
    def type_id(self):
        """Gets the type_id of this PutPosition.  # noqa: E501


        :return: The type_id of this PutPosition.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this PutPosition.


        :param type_id: The type_id of this PutPosition.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    @property
    def map_id(self):
        """Gets the map_id of this PutPosition.  # noqa: E501


        :return: The map_id of this PutPosition.  # noqa: E501
        :rtype: str
        """
        return self._map_id

    @map_id.setter
    def map_id(self, map_id):
        """Sets the map_id of this PutPosition.


        :param map_id: The map_id of this PutPosition.  # noqa: E501
        :type: str
        """

        self._map_id = map_id

    @property
    def parent_id(self):
        """Gets the parent_id of this PutPosition.  # noqa: E501


        :return: The parent_id of this PutPosition.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this PutPosition.


        :param parent_id: The parent_id of this PutPosition.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PutPosition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutPosition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PutPosition):
            return True

        return self.to_dict() != other.to_dict()
