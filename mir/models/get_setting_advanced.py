# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class GetSettingAdvanced(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'full_name': 'str',
        'description': 'str',
        'value': 'str',
        'default': 'str',
        'type': 'str',
        'parent_name': 'str',
        'parent_id': 'str',
        'parent_value': 'str',
        'settings_group_id': 'int',
        'settings_group': 'str',
        'fieldtype': 'str',
        'constraints': 'object',
        'editable': 'str',
        'children_ids': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'full_name': 'full_name',
        'description': 'description',
        'value': 'value',
        'default': 'default',
        'type': 'type',
        'parent_name': 'parent_name',
        'parent_id': 'parent_id',
        'parent_value': 'parent_value',
        'settings_group_id': 'settings_group_id',
        'settings_group': 'settings_group',
        'fieldtype': 'fieldtype',
        'constraints': 'constraints',
        'editable': 'editable',
        'children_ids': 'children_ids'
    }

    def __init__(self, id=None, name=None, full_name=None, description=None, value=None, default=None, type=None, parent_name=None, parent_id=None, parent_value=None, settings_group_id=None, settings_group=None, fieldtype=None, constraints=None, editable=None, children_ids=None, _configuration=None):  # noqa: E501
        """GetSettingAdvanced - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._full_name = None
        self._description = None
        self._value = None
        self._default = None
        self._type = None
        self._parent_name = None
        self._parent_id = None
        self._parent_value = None
        self._settings_group_id = None
        self._settings_group = None
        self._fieldtype = None
        self._constraints = None
        self._editable = None
        self._children_ids = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if full_name is not None:
            self.full_name = full_name
        if description is not None:
            self.description = description
        if value is not None:
            self.value = value
        if default is not None:
            self.default = default
        if type is not None:
            self.type = type
        if parent_name is not None:
            self.parent_name = parent_name
        if parent_id is not None:
            self.parent_id = parent_id
        if parent_value is not None:
            self.parent_value = parent_value
        if settings_group_id is not None:
            self.settings_group_id = settings_group_id
        if settings_group is not None:
            self.settings_group = settings_group
        if fieldtype is not None:
            self.fieldtype = fieldtype
        if constraints is not None:
            self.constraints = constraints
        if editable is not None:
            self.editable = editable
        if children_ids is not None:
            self.children_ids = children_ids

    @property
    def id(self):
        """Gets the id of this GetSettingAdvanced.  # noqa: E501

          # noqa: E501

        :return: The id of this GetSettingAdvanced.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetSettingAdvanced.

          # noqa: E501

        :param id: The id of this GetSettingAdvanced.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this GetSettingAdvanced.  # noqa: E501

          # noqa: E501

        :return: The name of this GetSettingAdvanced.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetSettingAdvanced.

          # noqa: E501

        :param name: The name of this GetSettingAdvanced.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def full_name(self):
        """Gets the full_name of this GetSettingAdvanced.  # noqa: E501

          # noqa: E501

        :return: The full_name of this GetSettingAdvanced.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this GetSettingAdvanced.

          # noqa: E501

        :param full_name: The full_name of this GetSettingAdvanced.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def description(self):
        """Gets the description of this GetSettingAdvanced.  # noqa: E501

          # noqa: E501

        :return: The description of this GetSettingAdvanced.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetSettingAdvanced.

          # noqa: E501

        :param description: The description of this GetSettingAdvanced.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def value(self):
        """Gets the value of this GetSettingAdvanced.  # noqa: E501

          # noqa: E501

        :return: The value of this GetSettingAdvanced.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GetSettingAdvanced.

          # noqa: E501

        :param value: The value of this GetSettingAdvanced.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def default(self):
        """Gets the default of this GetSettingAdvanced.  # noqa: E501

          # noqa: E501

        :return: The default of this GetSettingAdvanced.  # noqa: E501
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this GetSettingAdvanced.

          # noqa: E501

        :param default: The default of this GetSettingAdvanced.  # noqa: E501
        :type: str
        """

        self._default = default

    @property
    def type(self):
        """Gets the type of this GetSettingAdvanced.  # noqa: E501

          # noqa: E501

        :return: The type of this GetSettingAdvanced.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetSettingAdvanced.

          # noqa: E501

        :param type: The type of this GetSettingAdvanced.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def parent_name(self):
        """Gets the parent_name of this GetSettingAdvanced.  # noqa: E501

          # noqa: E501

        :return: The parent_name of this GetSettingAdvanced.  # noqa: E501
        :rtype: str
        """
        return self._parent_name

    @parent_name.setter
    def parent_name(self, parent_name):
        """Sets the parent_name of this GetSettingAdvanced.

          # noqa: E501

        :param parent_name: The parent_name of this GetSettingAdvanced.  # noqa: E501
        :type: str
        """

        self._parent_name = parent_name

    @property
    def parent_id(self):
        """Gets the parent_id of this GetSettingAdvanced.  # noqa: E501


        :return: The parent_id of this GetSettingAdvanced.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this GetSettingAdvanced.


        :param parent_id: The parent_id of this GetSettingAdvanced.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def parent_value(self):
        """Gets the parent_value of this GetSettingAdvanced.  # noqa: E501


        :return: The parent_value of this GetSettingAdvanced.  # noqa: E501
        :rtype: str
        """
        return self._parent_value

    @parent_value.setter
    def parent_value(self, parent_value):
        """Sets the parent_value of this GetSettingAdvanced.


        :param parent_value: The parent_value of this GetSettingAdvanced.  # noqa: E501
        :type: str
        """

        self._parent_value = parent_value

    @property
    def settings_group_id(self):
        """Gets the settings_group_id of this GetSettingAdvanced.  # noqa: E501

          # noqa: E501

        :return: The settings_group_id of this GetSettingAdvanced.  # noqa: E501
        :rtype: int
        """
        return self._settings_group_id

    @settings_group_id.setter
    def settings_group_id(self, settings_group_id):
        """Sets the settings_group_id of this GetSettingAdvanced.

          # noqa: E501

        :param settings_group_id: The settings_group_id of this GetSettingAdvanced.  # noqa: E501
        :type: int
        """

        self._settings_group_id = settings_group_id

    @property
    def settings_group(self):
        """Gets the settings_group of this GetSettingAdvanced.  # noqa: E501

          # noqa: E501

        :return: The settings_group of this GetSettingAdvanced.  # noqa: E501
        :rtype: str
        """
        return self._settings_group

    @settings_group.setter
    def settings_group(self, settings_group):
        """Sets the settings_group of this GetSettingAdvanced.

          # noqa: E501

        :param settings_group: The settings_group of this GetSettingAdvanced.  # noqa: E501
        :type: str
        """

        self._settings_group = settings_group

    @property
    def fieldtype(self):
        """Gets the fieldtype of this GetSettingAdvanced.  # noqa: E501

          # noqa: E501

        :return: The fieldtype of this GetSettingAdvanced.  # noqa: E501
        :rtype: str
        """
        return self._fieldtype

    @fieldtype.setter
    def fieldtype(self, fieldtype):
        """Sets the fieldtype of this GetSettingAdvanced.

          # noqa: E501

        :param fieldtype: The fieldtype of this GetSettingAdvanced.  # noqa: E501
        :type: str
        """

        self._fieldtype = fieldtype

    @property
    def constraints(self):
        """Gets the constraints of this GetSettingAdvanced.  # noqa: E501

          # noqa: E501

        :return: The constraints of this GetSettingAdvanced.  # noqa: E501
        :rtype: object
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this GetSettingAdvanced.

          # noqa: E501

        :param constraints: The constraints of this GetSettingAdvanced.  # noqa: E501
        :type: object
        """

        self._constraints = constraints

    @property
    def editable(self):
        """Gets the editable of this GetSettingAdvanced.  # noqa: E501


        :return: The editable of this GetSettingAdvanced.  # noqa: E501
        :rtype: str
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this GetSettingAdvanced.


        :param editable: The editable of this GetSettingAdvanced.  # noqa: E501
        :type: str
        """

        self._editable = editable

    @property
    def children_ids(self):
        """Gets the children_ids of this GetSettingAdvanced.  # noqa: E501


        :return: The children_ids of this GetSettingAdvanced.  # noqa: E501
        :rtype: str
        """
        return self._children_ids

    @children_ids.setter
    def children_ids(self, children_ids):
        """Sets the children_ids of this GetSettingAdvanced.


        :param children_ids: The children_ids of this GetSettingAdvanced.  # noqa: E501
        :type: str
        """

        self._children_ids = children_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSettingAdvanced, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSettingAdvanced):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetSettingAdvanced):
            return True

        return self.to_dict() != other.to_dict()
