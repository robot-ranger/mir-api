# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class GetModbusMission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'guid': 'str',
        'created_by_id': 'str',
        'created_by': 'str',
        'coil_id': 'int',
        'mission_id': 'str',
        'mission': 'str',
        'name': 'str',
        'parameters': 'str'
    }

    attribute_map = {
        'id': 'id',
        'guid': 'guid',
        'created_by_id': 'created_by_id',
        'created_by': 'created_by',
        'coil_id': 'coil_id',
        'mission_id': 'mission_id',
        'mission': 'mission',
        'name': 'name',
        'parameters': 'parameters'
    }

    def __init__(self, id=None, guid=None, created_by_id=None, created_by=None, coil_id=None, mission_id=None, mission=None, name=None, parameters=None, _configuration=None):  # noqa: E501
        """GetModbusMission - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._guid = None
        self._created_by_id = None
        self._created_by = None
        self._coil_id = None
        self._mission_id = None
        self._mission = None
        self._name = None
        self._parameters = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if guid is not None:
            self.guid = guid
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_by is not None:
            self.created_by = created_by
        if coil_id is not None:
            self.coil_id = coil_id
        if mission_id is not None:
            self.mission_id = mission_id
        if mission is not None:
            self.mission = mission
        if name is not None:
            self.name = name
        if parameters is not None:
            self.parameters = parameters

    @property
    def id(self):
        """Gets the id of this GetModbusMission.  # noqa: E501

        The id of the modbus mission entry  # noqa: E501

        :return: The id of this GetModbusMission.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetModbusMission.

        The id of the modbus mission entry  # noqa: E501

        :param id: The id of this GetModbusMission.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def guid(self):
        """Gets the guid of this GetModbusMission.  # noqa: E501

        The global id unique across robots that identifies this modbus mission  # noqa: E501

        :return: The guid of this GetModbusMission.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this GetModbusMission.

        The global id unique across robots that identifies this modbus mission  # noqa: E501

        :param guid: The guid of this GetModbusMission.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def created_by_id(self):
        """Gets the created_by_id of this GetModbusMission.  # noqa: E501

        The global id of the user who created this entry  # noqa: E501

        :return: The created_by_id of this GetModbusMission.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this GetModbusMission.

        The global id of the user who created this entry  # noqa: E501

        :param created_by_id: The created_by_id of this GetModbusMission.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_by(self):
        """Gets the created_by of this GetModbusMission.  # noqa: E501

        The url to the description of the type of this modbus mission  # noqa: E501

        :return: The created_by of this GetModbusMission.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this GetModbusMission.

        The url to the description of the type of this modbus mission  # noqa: E501

        :param created_by: The created_by of this GetModbusMission.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def coil_id(self):
        """Gets the coil_id of this GetModbusMission.  # noqa: E501

        The id of the coil to trigger the mission  # noqa: E501

        :return: The coil_id of this GetModbusMission.  # noqa: E501
        :rtype: int
        """
        return self._coil_id

    @coil_id.setter
    def coil_id(self, coil_id):
        """Sets the coil_id of this GetModbusMission.

        The id of the coil to trigger the mission  # noqa: E501

        :param coil_id: The coil_id of this GetModbusMission.  # noqa: E501
        :type: int
        """

        self._coil_id = coil_id

    @property
    def mission_id(self):
        """Gets the mission_id of this GetModbusMission.  # noqa: E501

        The global id of the mission that was executed  # noqa: E501

        :return: The mission_id of this GetModbusMission.  # noqa: E501
        :rtype: str
        """
        return self._mission_id

    @mission_id.setter
    def mission_id(self, mission_id):
        """Sets the mission_id of this GetModbusMission.

        The global id of the mission that was executed  # noqa: E501

        :param mission_id: The mission_id of this GetModbusMission.  # noqa: E501
        :type: str
        """

        self._mission_id = mission_id

    @property
    def mission(self):
        """Gets the mission of this GetModbusMission.  # noqa: E501

        The url to the mission details  # noqa: E501

        :return: The mission of this GetModbusMission.  # noqa: E501
        :rtype: str
        """
        return self._mission

    @mission.setter
    def mission(self, mission):
        """Sets the mission of this GetModbusMission.

        The url to the mission details  # noqa: E501

        :param mission: The mission of this GetModbusMission.  # noqa: E501
        :type: str
        """

        self._mission = mission

    @property
    def name(self):
        """Gets the name of this GetModbusMission.  # noqa: E501

        A more detailed explanation of the attribute  # noqa: E501

        :return: The name of this GetModbusMission.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetModbusMission.

        A more detailed explanation of the attribute  # noqa: E501

        :param name: The name of this GetModbusMission.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this GetModbusMission.  # noqa: E501


        :return: The parameters of this GetModbusMission.  # noqa: E501
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this GetModbusMission.


        :param parameters: The parameters of this GetModbusMission.  # noqa: E501
        :type: str
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetModbusMission, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetModbusMission):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetModbusMission):
            return True

        return self.to_dict() != other.to_dict()
