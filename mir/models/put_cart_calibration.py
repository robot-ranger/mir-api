# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class PutCartCalibration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'x': 'float',
        'y': 'float',
        'z': 'float',
        'qx': 'float',
        'qy': 'float',
        'qz': 'float',
        'qw': 'float',
        'entry_height': 'int',
        'lock_height': 'int',
        'drive_height': 'int',
        'standard': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'x': 'x',
        'y': 'y',
        'z': 'z',
        'qx': 'qx',
        'qy': 'qy',
        'qz': 'qz',
        'qw': 'qw',
        'entry_height': 'entry_height',
        'lock_height': 'lock_height',
        'drive_height': 'drive_height',
        'standard': 'standard'
    }

    def __init__(self, name=None, x=None, y=None, z=None, qx=None, qy=None, qz=None, qw=None, entry_height=None, lock_height=None, drive_height=None, standard=None, _configuration=None):  # noqa: E501
        """PutCartCalibration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._x = None
        self._y = None
        self._z = None
        self._qx = None
        self._qy = None
        self._qz = None
        self._qw = None
        self._entry_height = None
        self._lock_height = None
        self._drive_height = None
        self._standard = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if z is not None:
            self.z = z
        if qx is not None:
            self.qx = qx
        if qy is not None:
            self.qy = qy
        if qz is not None:
            self.qz = qz
        if qw is not None:
            self.qw = qw
        if entry_height is not None:
            self.entry_height = entry_height
        if lock_height is not None:
            self.lock_height = lock_height
        if drive_height is not None:
            self.drive_height = drive_height
        if standard is not None:
            self.standard = standard

    @property
    def name(self):
        """Gets the name of this PutCartCalibration.  # noqa: E501

        Min length: 1, Max length: 40  # noqa: E501

        :return: The name of this PutCartCalibration.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PutCartCalibration.

        Min length: 1, Max length: 40  # noqa: E501

        :param name: The name of this PutCartCalibration.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def x(self):
        """Gets the x of this PutCartCalibration.  # noqa: E501


        :return: The x of this PutCartCalibration.  # noqa: E501
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this PutCartCalibration.


        :param x: The x of this PutCartCalibration.  # noqa: E501
        :type: float
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this PutCartCalibration.  # noqa: E501


        :return: The y of this PutCartCalibration.  # noqa: E501
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this PutCartCalibration.


        :param y: The y of this PutCartCalibration.  # noqa: E501
        :type: float
        """

        self._y = y

    @property
    def z(self):
        """Gets the z of this PutCartCalibration.  # noqa: E501


        :return: The z of this PutCartCalibration.  # noqa: E501
        :rtype: float
        """
        return self._z

    @z.setter
    def z(self, z):
        """Sets the z of this PutCartCalibration.


        :param z: The z of this PutCartCalibration.  # noqa: E501
        :type: float
        """

        self._z = z

    @property
    def qx(self):
        """Gets the qx of this PutCartCalibration.  # noqa: E501


        :return: The qx of this PutCartCalibration.  # noqa: E501
        :rtype: float
        """
        return self._qx

    @qx.setter
    def qx(self, qx):
        """Sets the qx of this PutCartCalibration.


        :param qx: The qx of this PutCartCalibration.  # noqa: E501
        :type: float
        """

        self._qx = qx

    @property
    def qy(self):
        """Gets the qy of this PutCartCalibration.  # noqa: E501


        :return: The qy of this PutCartCalibration.  # noqa: E501
        :rtype: float
        """
        return self._qy

    @qy.setter
    def qy(self, qy):
        """Sets the qy of this PutCartCalibration.


        :param qy: The qy of this PutCartCalibration.  # noqa: E501
        :type: float
        """

        self._qy = qy

    @property
    def qz(self):
        """Gets the qz of this PutCartCalibration.  # noqa: E501


        :return: The qz of this PutCartCalibration.  # noqa: E501
        :rtype: float
        """
        return self._qz

    @qz.setter
    def qz(self, qz):
        """Sets the qz of this PutCartCalibration.


        :param qz: The qz of this PutCartCalibration.  # noqa: E501
        :type: float
        """

        self._qz = qz

    @property
    def qw(self):
        """Gets the qw of this PutCartCalibration.  # noqa: E501


        :return: The qw of this PutCartCalibration.  # noqa: E501
        :rtype: float
        """
        return self._qw

    @qw.setter
    def qw(self, qw):
        """Sets the qw of this PutCartCalibration.


        :param qw: The qw of this PutCartCalibration.  # noqa: E501
        :type: float
        """

        self._qw = qw

    @property
    def entry_height(self):
        """Gets the entry_height of this PutCartCalibration.  # noqa: E501


        :return: The entry_height of this PutCartCalibration.  # noqa: E501
        :rtype: int
        """
        return self._entry_height

    @entry_height.setter
    def entry_height(self, entry_height):
        """Sets the entry_height of this PutCartCalibration.


        :param entry_height: The entry_height of this PutCartCalibration.  # noqa: E501
        :type: int
        """

        self._entry_height = entry_height

    @property
    def lock_height(self):
        """Gets the lock_height of this PutCartCalibration.  # noqa: E501


        :return: The lock_height of this PutCartCalibration.  # noqa: E501
        :rtype: int
        """
        return self._lock_height

    @lock_height.setter
    def lock_height(self, lock_height):
        """Sets the lock_height of this PutCartCalibration.


        :param lock_height: The lock_height of this PutCartCalibration.  # noqa: E501
        :type: int
        """

        self._lock_height = lock_height

    @property
    def drive_height(self):
        """Gets the drive_height of this PutCartCalibration.  # noqa: E501


        :return: The drive_height of this PutCartCalibration.  # noqa: E501
        :rtype: int
        """
        return self._drive_height

    @drive_height.setter
    def drive_height(self, drive_height):
        """Sets the drive_height of this PutCartCalibration.


        :param drive_height: The drive_height of this PutCartCalibration.  # noqa: E501
        :type: int
        """

        self._drive_height = drive_height

    @property
    def standard(self):
        """Gets the standard of this PutCartCalibration.  # noqa: E501


        :return: The standard of this PutCartCalibration.  # noqa: E501
        :rtype: bool
        """
        return self._standard

    @standard.setter
    def standard(self, standard):
        """Sets the standard of this PutCartCalibration.


        :param standard: The standard of this PutCartCalibration.  # noqa: E501
        :type: bool
        """

        self._standard = standard

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PutCartCalibration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutCartCalibration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PutCartCalibration):
            return True

        return self.to_dict() != other.to_dict()
