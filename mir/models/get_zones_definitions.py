# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class GetZonesDefinitions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'int',
        'actions': 'str',
        'color': 'str',
        'image': 'str',
        'shape_types': 'str',
        'stroke_width': 'str',
        'direction': 'str'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'actions': 'actions',
        'color': 'color',
        'image': 'image',
        'shape_types': 'shape_types',
        'stroke_width': 'stroke_width',
        'direction': 'direction'
    }

    def __init__(self, name=None, id=None, actions=None, color=None, image=None, shape_types=None, stroke_width=None, direction=None, _configuration=None):  # noqa: E501
        """GetZonesDefinitions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._id = None
        self._actions = None
        self._color = None
        self._image = None
        self._shape_types = None
        self._stroke_width = None
        self._direction = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if actions is not None:
            self.actions = actions
        if color is not None:
            self.color = color
        if image is not None:
            self.image = image
        if shape_types is not None:
            self.shape_types = shape_types
        if stroke_width is not None:
            self.stroke_width = stroke_width
        if direction is not None:
            self.direction = direction

    @property
    def name(self):
        """Gets the name of this GetZonesDefinitions.  # noqa: E501

        A nice name associated with this area action  # noqa: E501

        :return: The name of this GetZonesDefinitions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetZonesDefinitions.

        A nice name associated with this area action  # noqa: E501

        :param name: The name of this GetZonesDefinitions.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this GetZonesDefinitions.  # noqa: E501

        The type of area  # noqa: E501

        :return: The id of this GetZonesDefinitions.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetZonesDefinitions.

        The type of area  # noqa: E501

        :param id: The id of this GetZonesDefinitions.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def actions(self):
        """Gets the actions of this GetZonesDefinitions.  # noqa: E501


        :return: The actions of this GetZonesDefinitions.  # noqa: E501
        :rtype: str
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this GetZonesDefinitions.


        :param actions: The actions of this GetZonesDefinitions.  # noqa: E501
        :type: str
        """

        self._actions = actions

    @property
    def color(self):
        """Gets the color of this GetZonesDefinitions.  # noqa: E501

        The color associated with this area  # noqa: E501

        :return: The color of this GetZonesDefinitions.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this GetZonesDefinitions.

        The color associated with this area  # noqa: E501

        :param color: The color of this GetZonesDefinitions.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def image(self):
        """Gets the image of this GetZonesDefinitions.  # noqa: E501

          # noqa: E501

        :return: The image of this GetZonesDefinitions.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this GetZonesDefinitions.

          # noqa: E501

        :param image: The image of this GetZonesDefinitions.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def shape_types(self):
        """Gets the shape_types of this GetZonesDefinitions.  # noqa: E501


        :return: The shape_types of this GetZonesDefinitions.  # noqa: E501
        :rtype: str
        """
        return self._shape_types

    @shape_types.setter
    def shape_types(self, shape_types):
        """Sets the shape_types of this GetZonesDefinitions.


        :param shape_types: The shape_types of this GetZonesDefinitions.  # noqa: E501
        :type: str
        """

        self._shape_types = shape_types

    @property
    def stroke_width(self):
        """Gets the stroke_width of this GetZonesDefinitions.  # noqa: E501


        :return: The stroke_width of this GetZonesDefinitions.  # noqa: E501
        :rtype: str
        """
        return self._stroke_width

    @stroke_width.setter
    def stroke_width(self, stroke_width):
        """Sets the stroke_width of this GetZonesDefinitions.


        :param stroke_width: The stroke_width of this GetZonesDefinitions.  # noqa: E501
        :type: str
        """

        self._stroke_width = stroke_width

    @property
    def direction(self):
        """Gets the direction of this GetZonesDefinitions.  # noqa: E501


        :return: The direction of this GetZonesDefinitions.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this GetZonesDefinitions.


        :param direction: The direction of this GetZonesDefinitions.  # noqa: E501
        :type: str
        """

        self._direction = direction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetZonesDefinitions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetZonesDefinitions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetZonesDefinitions):
            return True

        return self.to_dict() != other.to_dict()
