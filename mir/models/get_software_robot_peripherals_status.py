# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class GetSoftwareRobotPeripheralsStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'peripheral_name': 'str',
        'current_version': 'str',
        'current_upgrade_status': 'str',
        'current_upgrade_status_msg': 'str',
        'upgrade_succeeded': 'str'
    }

    attribute_map = {
        'url': 'url',
        'peripheral_name': 'peripheral_name',
        'current_version': 'current_version',
        'current_upgrade_status': 'current_upgrade_status',
        'current_upgrade_status_msg': 'current_upgrade_status_msg',
        'upgrade_succeeded': 'upgrade_succeeded'
    }

    def __init__(self, url=None, peripheral_name=None, current_version=None, current_upgrade_status=None, current_upgrade_status_msg=None, upgrade_succeeded=None, _configuration=None):  # noqa: E501
        """GetSoftwareRobotPeripheralsStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._url = None
        self._peripheral_name = None
        self._current_version = None
        self._current_upgrade_status = None
        self._current_upgrade_status_msg = None
        self._upgrade_succeeded = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if peripheral_name is not None:
            self.peripheral_name = peripheral_name
        if current_version is not None:
            self.current_version = current_version
        if current_upgrade_status is not None:
            self.current_upgrade_status = current_upgrade_status
        if current_upgrade_status_msg is not None:
            self.current_upgrade_status_msg = current_upgrade_status_msg
        if upgrade_succeeded is not None:
            self.upgrade_succeeded = upgrade_succeeded

    @property
    def url(self):
        """Gets the url of this GetSoftwareRobotPeripheralsStatus.  # noqa: E501

        The URL of the resource  # noqa: E501

        :return: The url of this GetSoftwareRobotPeripheralsStatus.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GetSoftwareRobotPeripheralsStatus.

        The URL of the resource  # noqa: E501

        :param url: The url of this GetSoftwareRobotPeripheralsStatus.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def peripheral_name(self):
        """Gets the peripheral_name of this GetSoftwareRobotPeripheralsStatus.  # noqa: E501

        Peripheral name  # noqa: E501

        :return: The peripheral_name of this GetSoftwareRobotPeripheralsStatus.  # noqa: E501
        :rtype: str
        """
        return self._peripheral_name

    @peripheral_name.setter
    def peripheral_name(self, peripheral_name):
        """Sets the peripheral_name of this GetSoftwareRobotPeripheralsStatus.

        Peripheral name  # noqa: E501

        :param peripheral_name: The peripheral_name of this GetSoftwareRobotPeripheralsStatus.  # noqa: E501
        :type: str
        """

        self._peripheral_name = peripheral_name

    @property
    def current_version(self):
        """Gets the current_version of this GetSoftwareRobotPeripheralsStatus.  # noqa: E501

        Current peripheral fw/sw version  # noqa: E501

        :return: The current_version of this GetSoftwareRobotPeripheralsStatus.  # noqa: E501
        :rtype: str
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """Sets the current_version of this GetSoftwareRobotPeripheralsStatus.

        Current peripheral fw/sw version  # noqa: E501

        :param current_version: The current_version of this GetSoftwareRobotPeripheralsStatus.  # noqa: E501
        :type: str
        """

        self._current_version = current_version

    @property
    def current_upgrade_status(self):
        """Gets the current_upgrade_status of this GetSoftwareRobotPeripheralsStatus.  # noqa: E501

        Current peripheral upgrade status  # noqa: E501

        :return: The current_upgrade_status of this GetSoftwareRobotPeripheralsStatus.  # noqa: E501
        :rtype: str
        """
        return self._current_upgrade_status

    @current_upgrade_status.setter
    def current_upgrade_status(self, current_upgrade_status):
        """Sets the current_upgrade_status of this GetSoftwareRobotPeripheralsStatus.

        Current peripheral upgrade status  # noqa: E501

        :param current_upgrade_status: The current_upgrade_status of this GetSoftwareRobotPeripheralsStatus.  # noqa: E501
        :type: str
        """

        self._current_upgrade_status = current_upgrade_status

    @property
    def current_upgrade_status_msg(self):
        """Gets the current_upgrade_status_msg of this GetSoftwareRobotPeripheralsStatus.  # noqa: E501

        Current peripheral upgrade status message  # noqa: E501

        :return: The current_upgrade_status_msg of this GetSoftwareRobotPeripheralsStatus.  # noqa: E501
        :rtype: str
        """
        return self._current_upgrade_status_msg

    @current_upgrade_status_msg.setter
    def current_upgrade_status_msg(self, current_upgrade_status_msg):
        """Sets the current_upgrade_status_msg of this GetSoftwareRobotPeripheralsStatus.

        Current peripheral upgrade status message  # noqa: E501

        :param current_upgrade_status_msg: The current_upgrade_status_msg of this GetSoftwareRobotPeripheralsStatus.  # noqa: E501
        :type: str
        """

        self._current_upgrade_status_msg = current_upgrade_status_msg

    @property
    def upgrade_succeeded(self):
        """Gets the upgrade_succeeded of this GetSoftwareRobotPeripheralsStatus.  # noqa: E501

        True if upgrade is successful, false if failed, if in progress, it should be a string with progress  # noqa: E501

        :return: The upgrade_succeeded of this GetSoftwareRobotPeripheralsStatus.  # noqa: E501
        :rtype: str
        """
        return self._upgrade_succeeded

    @upgrade_succeeded.setter
    def upgrade_succeeded(self, upgrade_succeeded):
        """Sets the upgrade_succeeded of this GetSoftwareRobotPeripheralsStatus.

        True if upgrade is successful, false if failed, if in progress, it should be a string with progress  # noqa: E501

        :param upgrade_succeeded: The upgrade_succeeded of this GetSoftwareRobotPeripheralsStatus.  # noqa: E501
        :type: str
        """

        self._upgrade_succeeded = upgrade_succeeded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSoftwareRobotPeripheralsStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSoftwareRobotPeripheralsStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetSoftwareRobotPeripheralsStatus):
            return True

        return self.to_dict() != other.to_dict()
