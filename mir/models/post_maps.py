# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class PostMaps(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'session_id': 'str',
        'name': 'str',
        'base_map': 'str',
        'resolution': 'float',
        'origin_x': 'float',
        'origin_y': 'float',
        'origin_theta': 'float',
        'created_by_id': 'str'
    }

    attribute_map = {
        'guid': 'guid',
        'session_id': 'session_id',
        'name': 'name',
        'base_map': 'base_map',
        'resolution': 'resolution',
        'origin_x': 'origin_x',
        'origin_y': 'origin_y',
        'origin_theta': 'origin_theta',
        'created_by_id': 'created_by_id'
    }

    def __init__(self, guid=None, session_id=None, name=None, base_map=None, resolution=None, origin_x=None, origin_y=None, origin_theta=None, created_by_id=None, _configuration=None):  # noqa: E501
        """PostMaps - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._guid = None
        self._session_id = None
        self._name = None
        self._base_map = None
        self._resolution = None
        self._origin_x = None
        self._origin_y = None
        self._origin_theta = None
        self._created_by_id = None
        self.discriminator = None

        if guid is not None:
            self.guid = guid
        self.session_id = session_id
        self.name = name
        if base_map is not None:
            self.base_map = base_map
        if resolution is not None:
            self.resolution = resolution
        self.origin_x = origin_x
        self.origin_y = origin_y
        self.origin_theta = origin_theta
        if created_by_id is not None:
            self.created_by_id = created_by_id

    @property
    def guid(self):
        """Gets the guid of this PostMaps.  # noqa: E501


        :return: The guid of this PostMaps.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this PostMaps.


        :param guid: The guid of this PostMaps.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def session_id(self):
        """Gets the session_id of this PostMaps.  # noqa: E501


        :return: The session_id of this PostMaps.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this PostMaps.


        :param session_id: The session_id of this PostMaps.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and session_id is None:
            raise ValueError("Invalid value for `session_id`, must not be `None`")  # noqa: E501

        self._session_id = session_id

    @property
    def name(self):
        """Gets the name of this PostMaps.  # noqa: E501

        Min length: 1, Max length: 40  # noqa: E501

        :return: The name of this PostMaps.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostMaps.

        Min length: 1, Max length: 40  # noqa: E501

        :param name: The name of this PostMaps.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def base_map(self):
        """Gets the base_map of this PostMaps.  # noqa: E501


        :return: The base_map of this PostMaps.  # noqa: E501
        :rtype: str
        """
        return self._base_map

    @base_map.setter
    def base_map(self, base_map):
        """Sets the base_map of this PostMaps.


        :param base_map: The base_map of this PostMaps.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                base_map is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', base_map)):  # noqa: E501
            raise ValueError(r"Invalid value for `base_map`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._base_map = base_map

    @property
    def resolution(self):
        """Gets the resolution of this PostMaps.  # noqa: E501


        :return: The resolution of this PostMaps.  # noqa: E501
        :rtype: float
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this PostMaps.


        :param resolution: The resolution of this PostMaps.  # noqa: E501
        :type: float
        """

        self._resolution = resolution

    @property
    def origin_x(self):
        """Gets the origin_x of this PostMaps.  # noqa: E501


        :return: The origin_x of this PostMaps.  # noqa: E501
        :rtype: float
        """
        return self._origin_x

    @origin_x.setter
    def origin_x(self, origin_x):
        """Sets the origin_x of this PostMaps.


        :param origin_x: The origin_x of this PostMaps.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and origin_x is None:
            raise ValueError("Invalid value for `origin_x`, must not be `None`")  # noqa: E501

        self._origin_x = origin_x

    @property
    def origin_y(self):
        """Gets the origin_y of this PostMaps.  # noqa: E501


        :return: The origin_y of this PostMaps.  # noqa: E501
        :rtype: float
        """
        return self._origin_y

    @origin_y.setter
    def origin_y(self, origin_y):
        """Sets the origin_y of this PostMaps.


        :param origin_y: The origin_y of this PostMaps.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and origin_y is None:
            raise ValueError("Invalid value for `origin_y`, must not be `None`")  # noqa: E501

        self._origin_y = origin_y

    @property
    def origin_theta(self):
        """Gets the origin_theta of this PostMaps.  # noqa: E501


        :return: The origin_theta of this PostMaps.  # noqa: E501
        :rtype: float
        """
        return self._origin_theta

    @origin_theta.setter
    def origin_theta(self, origin_theta):
        """Sets the origin_theta of this PostMaps.


        :param origin_theta: The origin_theta of this PostMaps.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and origin_theta is None:
            raise ValueError("Invalid value for `origin_theta`, must not be `None`")  # noqa: E501

        self._origin_theta = origin_theta

    @property
    def created_by_id(self):
        """Gets the created_by_id of this PostMaps.  # noqa: E501


        :return: The created_by_id of this PostMaps.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this PostMaps.


        :param created_by_id: The created_by_id of this PostMaps.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostMaps, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostMaps):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostMaps):
            return True

        return self.to_dict() != other.to_dict()
