# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class GetZone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'name': 'str',
        'type_id': 'int',
        'shape_type': 'str',
        'stroke_width': 'float',
        'direction': 'float',
        'polygon': 'list[Object]',
        'actions': 'object',
        'map_id': 'str',
        'map': 'str',
        'created_by_id': 'str',
        'created_by': 'str'
    }

    attribute_map = {
        'guid': 'guid',
        'name': 'name',
        'type_id': 'type_id',
        'shape_type': 'shape_type',
        'stroke_width': 'stroke_width',
        'direction': 'direction',
        'polygon': 'polygon',
        'actions': 'actions',
        'map_id': 'map_id',
        'map': 'map',
        'created_by_id': 'created_by_id',
        'created_by': 'created_by'
    }

    def __init__(self, guid=None, name=None, type_id=None, shape_type=None, stroke_width=None, direction=None, polygon=None, actions=None, map_id=None, map=None, created_by_id=None, created_by=None, _configuration=None):  # noqa: E501
        """GetZone - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._guid = None
        self._name = None
        self._type_id = None
        self._shape_type = None
        self._stroke_width = None
        self._direction = None
        self._polygon = None
        self._actions = None
        self._map_id = None
        self._map = None
        self._created_by_id = None
        self._created_by = None
        self.discriminator = None

        if guid is not None:
            self.guid = guid
        if name is not None:
            self.name = name
        if type_id is not None:
            self.type_id = type_id
        if shape_type is not None:
            self.shape_type = shape_type
        if stroke_width is not None:
            self.stroke_width = stroke_width
        if direction is not None:
            self.direction = direction
        if polygon is not None:
            self.polygon = polygon
        if actions is not None:
            self.actions = actions
        if map_id is not None:
            self.map_id = map_id
        if map is not None:
            self.map = map
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_by is not None:
            self.created_by = created_by

    @property
    def guid(self):
        """Gets the guid of this GetZone.  # noqa: E501

        The global id unique across robots that identifies this area  # noqa: E501

        :return: The guid of this GetZone.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this GetZone.

        The global id unique across robots that identifies this area  # noqa: E501

        :param guid: The guid of this GetZone.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def name(self):
        """Gets the name of this GetZone.  # noqa: E501

        A name associated with this area  # noqa: E501

        :return: The name of this GetZone.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetZone.

        A name associated with this area  # noqa: E501

        :param name: The name of this GetZone.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type_id(self):
        """Gets the type_id of this GetZone.  # noqa: E501

        The type of area  # noqa: E501

        :return: The type_id of this GetZone.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GetZone.

        The type of area  # noqa: E501

        :param type_id: The type_id of this GetZone.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    @property
    def shape_type(self):
        """Gets the shape_type of this GetZone.  # noqa: E501

        The type of the area shape  # noqa: E501

        :return: The shape_type of this GetZone.  # noqa: E501
        :rtype: str
        """
        return self._shape_type

    @shape_type.setter
    def shape_type(self, shape_type):
        """Sets the shape_type of this GetZone.

        The type of the area shape  # noqa: E501

        :param shape_type: The shape_type of this GetZone.  # noqa: E501
        :type: str
        """

        self._shape_type = shape_type

    @property
    def stroke_width(self):
        """Gets the stroke_width of this GetZone.  # noqa: E501

        Width of stroke if shape type is stroke  # noqa: E501

        :return: The stroke_width of this GetZone.  # noqa: E501
        :rtype: float
        """
        return self._stroke_width

    @stroke_width.setter
    def stroke_width(self, stroke_width):
        """Sets the stroke_width of this GetZone.

        Width of stroke if shape type is stroke  # noqa: E501

        :param stroke_width: The stroke_width of this GetZone.  # noqa: E501
        :type: float
        """

        self._stroke_width = stroke_width

    @property
    def direction(self):
        """Gets the direction of this GetZone.  # noqa: E501

        Direction of one way area  # noqa: E501

        :return: The direction of this GetZone.  # noqa: E501
        :rtype: float
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this GetZone.

        Direction of one way area  # noqa: E501

        :param direction: The direction of this GetZone.  # noqa: E501
        :type: float
        """

        self._direction = direction

    @property
    def polygon(self):
        """Gets the polygon of this GetZone.  # noqa: E501

        The list of coordinates in the area polygon  # noqa: E501

        :return: The polygon of this GetZone.  # noqa: E501
        :rtype: list[Object]
        """
        return self._polygon

    @polygon.setter
    def polygon(self, polygon):
        """Sets the polygon of this GetZone.

        The list of coordinates in the area polygon  # noqa: E501

        :param polygon: The polygon of this GetZone.  # noqa: E501
        :type: list[Object]
        """

        self._polygon = polygon

    @property
    def actions(self):
        """Gets the actions of this GetZone.  # noqa: E501

          # noqa: E501

        :return: The actions of this GetZone.  # noqa: E501
        :rtype: object
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this GetZone.

          # noqa: E501

        :param actions: The actions of this GetZone.  # noqa: E501
        :type: object
        """

        self._actions = actions

    @property
    def map_id(self):
        """Gets the map_id of this GetZone.  # noqa: E501

        The id of the map this area belongs to  # noqa: E501

        :return: The map_id of this GetZone.  # noqa: E501
        :rtype: str
        """
        return self._map_id

    @map_id.setter
    def map_id(self, map_id):
        """Sets the map_id of this GetZone.

        The id of the map this area belongs to  # noqa: E501

        :param map_id: The map_id of this GetZone.  # noqa: E501
        :type: str
        """

        self._map_id = map_id

    @property
    def map(self):
        """Gets the map of this GetZone.  # noqa: E501

        The url to the map this area belongs to  # noqa: E501

        :return: The map of this GetZone.  # noqa: E501
        :rtype: str
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this GetZone.

        The url to the map this area belongs to  # noqa: E501

        :param map: The map of this GetZone.  # noqa: E501
        :type: str
        """

        self._map = map

    @property
    def created_by_id(self):
        """Gets the created_by_id of this GetZone.  # noqa: E501

        The global id of the user who created this entry  # noqa: E501

        :return: The created_by_id of this GetZone.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this GetZone.

        The global id of the user who created this entry  # noqa: E501

        :param created_by_id: The created_by_id of this GetZone.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_by(self):
        """Gets the created_by of this GetZone.  # noqa: E501

        The url to the description of the type of this position  # noqa: E501

        :return: The created_by of this GetZone.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this GetZone.

        The url to the description of the type of this position  # noqa: E501

        :param created_by: The created_by of this GetZone.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetZone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetZone):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetZone):
            return True

        return self.to_dict() != other.to_dict()
