# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class PostWorldModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'world_model': 'list[object]',
        'robot_ip': 'str',
        'enable_resource_tracking': 'bool',
        'fleet_id': 'str'
    }

    attribute_map = {
        'world_model': 'world_model',
        'robot_ip': 'robot_ip',
        'enable_resource_tracking': 'enable_resource_tracking',
        'fleet_id': 'fleet_id'
    }

    def __init__(self, world_model=None, robot_ip=None, enable_resource_tracking=None, fleet_id=None, _configuration=None):  # noqa: E501
        """PostWorldModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._world_model = None
        self._robot_ip = None
        self._enable_resource_tracking = None
        self._fleet_id = None
        self.discriminator = None

        self.world_model = world_model
        self.robot_ip = robot_ip
        self.enable_resource_tracking = enable_resource_tracking
        if fleet_id is not None:
            self.fleet_id = fleet_id

    @property
    def world_model(self):
        """Gets the world_model of this PostWorldModel.  # noqa: E501


        :return: The world_model of this PostWorldModel.  # noqa: E501
        :rtype: list[object]
        """
        return self._world_model

    @world_model.setter
    def world_model(self, world_model):
        """Sets the world_model of this PostWorldModel.


        :param world_model: The world_model of this PostWorldModel.  # noqa: E501
        :type: list[object]
        """
        if self._configuration.client_side_validation and world_model is None:
            raise ValueError("Invalid value for `world_model`, must not be `None`")  # noqa: E501

        self._world_model = world_model

    @property
    def robot_ip(self):
        """Gets the robot_ip of this PostWorldModel.  # noqa: E501


        :return: The robot_ip of this PostWorldModel.  # noqa: E501
        :rtype: str
        """
        return self._robot_ip

    @robot_ip.setter
    def robot_ip(self, robot_ip):
        """Sets the robot_ip of this PostWorldModel.


        :param robot_ip: The robot_ip of this PostWorldModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and robot_ip is None:
            raise ValueError("Invalid value for `robot_ip`, must not be `None`")  # noqa: E501

        self._robot_ip = robot_ip

    @property
    def enable_resource_tracking(self):
        """Gets the enable_resource_tracking of this PostWorldModel.  # noqa: E501


        :return: The enable_resource_tracking of this PostWorldModel.  # noqa: E501
        :rtype: bool
        """
        return self._enable_resource_tracking

    @enable_resource_tracking.setter
    def enable_resource_tracking(self, enable_resource_tracking):
        """Sets the enable_resource_tracking of this PostWorldModel.


        :param enable_resource_tracking: The enable_resource_tracking of this PostWorldModel.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and enable_resource_tracking is None:
            raise ValueError("Invalid value for `enable_resource_tracking`, must not be `None`")  # noqa: E501

        self._enable_resource_tracking = enable_resource_tracking

    @property
    def fleet_id(self):
        """Gets the fleet_id of this PostWorldModel.  # noqa: E501


        :return: The fleet_id of this PostWorldModel.  # noqa: E501
        :rtype: str
        """
        return self._fleet_id

    @fleet_id.setter
    def fleet_id(self, fleet_id):
        """Sets the fleet_id of this PostWorldModel.


        :param fleet_id: The fleet_id of this PostWorldModel.  # noqa: E501
        :type: str
        """

        self._fleet_id = fleet_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostWorldModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostWorldModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostWorldModel):
            return True

        return self.to_dict() != other.to_dict()
