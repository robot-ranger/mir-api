# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class GetElevatorFloor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'session_guid': 'str',
        'elevator_guid': 'str',
        'floor': 'int',
        'map': 'str',
        'map_guid': 'str',
        'elevator_entry_pos_guid': 'str',
        'elevator_entry_pos': 'str',
        'elevator_pos_guid': 'str',
        'elevator_pos': 'str',
        'entry_mission_guid': 'str',
        'entry_mission': 'str',
        'exit_mission_guid': 'str',
        'exit_mission': 'str',
        'door': 'int',
        'created_by_id': 'str',
        'created_by': 'str'
    }

    attribute_map = {
        'guid': 'guid',
        'session_guid': 'session_guid',
        'elevator_guid': 'elevator_guid',
        'floor': 'floor',
        'map': 'map',
        'map_guid': 'map_guid',
        'elevator_entry_pos_guid': 'elevator_entry_pos_guid',
        'elevator_entry_pos': 'elevator_entry_pos',
        'elevator_pos_guid': 'elevator_pos_guid',
        'elevator_pos': 'elevator_pos',
        'entry_mission_guid': 'entry_mission_guid',
        'entry_mission': 'entry_mission',
        'exit_mission_guid': 'exit_mission_guid',
        'exit_mission': 'exit_mission',
        'door': 'door',
        'created_by_id': 'created_by_id',
        'created_by': 'created_by'
    }

    def __init__(self, guid=None, session_guid=None, elevator_guid=None, floor=None, map=None, map_guid=None, elevator_entry_pos_guid=None, elevator_entry_pos=None, elevator_pos_guid=None, elevator_pos=None, entry_mission_guid=None, entry_mission=None, exit_mission_guid=None, exit_mission=None, door=None, created_by_id=None, created_by=None, _configuration=None):  # noqa: E501
        """GetElevatorFloor - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._guid = None
        self._session_guid = None
        self._elevator_guid = None
        self._floor = None
        self._map = None
        self._map_guid = None
        self._elevator_entry_pos_guid = None
        self._elevator_entry_pos = None
        self._elevator_pos_guid = None
        self._elevator_pos = None
        self._entry_mission_guid = None
        self._entry_mission = None
        self._exit_mission_guid = None
        self._exit_mission = None
        self._door = None
        self._created_by_id = None
        self._created_by = None
        self.discriminator = None

        if guid is not None:
            self.guid = guid
        if session_guid is not None:
            self.session_guid = session_guid
        if elevator_guid is not None:
            self.elevator_guid = elevator_guid
        if floor is not None:
            self.floor = floor
        if map is not None:
            self.map = map
        if map_guid is not None:
            self.map_guid = map_guid
        if elevator_entry_pos_guid is not None:
            self.elevator_entry_pos_guid = elevator_entry_pos_guid
        if elevator_entry_pos is not None:
            self.elevator_entry_pos = elevator_entry_pos
        if elevator_pos_guid is not None:
            self.elevator_pos_guid = elevator_pos_guid
        if elevator_pos is not None:
            self.elevator_pos = elevator_pos
        if entry_mission_guid is not None:
            self.entry_mission_guid = entry_mission_guid
        if entry_mission is not None:
            self.entry_mission = entry_mission
        if exit_mission_guid is not None:
            self.exit_mission_guid = exit_mission_guid
        if exit_mission is not None:
            self.exit_mission = exit_mission
        if door is not None:
            self.door = door
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_by is not None:
            self.created_by = created_by

    @property
    def guid(self):
        """Gets the guid of this GetElevatorFloor.  # noqa: E501

        The global id unique across robots that identifies this elevator floor  # noqa: E501

        :return: The guid of this GetElevatorFloor.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this GetElevatorFloor.

        The global id unique across robots that identifies this elevator floor  # noqa: E501

        :param guid: The guid of this GetElevatorFloor.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def session_guid(self):
        """Gets the session_guid of this GetElevatorFloor.  # noqa: E501

        The global id unique across robots containing this elevator  # noqa: E501

        :return: The session_guid of this GetElevatorFloor.  # noqa: E501
        :rtype: str
        """
        return self._session_guid

    @session_guid.setter
    def session_guid(self, session_guid):
        """Sets the session_guid of this GetElevatorFloor.

        The global id unique across robots containing this elevator  # noqa: E501

        :param session_guid: The session_guid of this GetElevatorFloor.  # noqa: E501
        :type: str
        """

        self._session_guid = session_guid

    @property
    def elevator_guid(self):
        """Gets the elevator_guid of this GetElevatorFloor.  # noqa: E501

        The global unique id of the elevator associated with this floor  # noqa: E501

        :return: The elevator_guid of this GetElevatorFloor.  # noqa: E501
        :rtype: str
        """
        return self._elevator_guid

    @elevator_guid.setter
    def elevator_guid(self, elevator_guid):
        """Sets the elevator_guid of this GetElevatorFloor.

        The global unique id of the elevator associated with this floor  # noqa: E501

        :param elevator_guid: The elevator_guid of this GetElevatorFloor.  # noqa: E501
        :type: str
        """

        self._elevator_guid = elevator_guid

    @property
    def floor(self):
        """Gets the floor of this GetElevatorFloor.  # noqa: E501

        The integer identifying the floor  # noqa: E501

        :return: The floor of this GetElevatorFloor.  # noqa: E501
        :rtype: int
        """
        return self._floor

    @floor.setter
    def floor(self, floor):
        """Sets the floor of this GetElevatorFloor.

        The integer identifying the floor  # noqa: E501

        :param floor: The floor of this GetElevatorFloor.  # noqa: E501
        :type: int
        """

        self._floor = floor

    @property
    def map(self):
        """Gets the map of this GetElevatorFloor.  # noqa: E501

          # noqa: E501

        :return: The map of this GetElevatorFloor.  # noqa: E501
        :rtype: str
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this GetElevatorFloor.

          # noqa: E501

        :param map: The map of this GetElevatorFloor.  # noqa: E501
        :type: str
        """

        self._map = map

    @property
    def map_guid(self):
        """Gets the map_guid of this GetElevatorFloor.  # noqa: E501

        The map id associated with the floor  # noqa: E501

        :return: The map_guid of this GetElevatorFloor.  # noqa: E501
        :rtype: str
        """
        return self._map_guid

    @map_guid.setter
    def map_guid(self, map_guid):
        """Sets the map_guid of this GetElevatorFloor.

        The map id associated with the floor  # noqa: E501

        :param map_guid: The map_guid of this GetElevatorFloor.  # noqa: E501
        :type: str
        """

        self._map_guid = map_guid

    @property
    def elevator_entry_pos_guid(self):
        """Gets the elevator_entry_pos_guid of this GetElevatorFloor.  # noqa: E501

        The id of the position located in front of the elevator  # noqa: E501

        :return: The elevator_entry_pos_guid of this GetElevatorFloor.  # noqa: E501
        :rtype: str
        """
        return self._elevator_entry_pos_guid

    @elevator_entry_pos_guid.setter
    def elevator_entry_pos_guid(self, elevator_entry_pos_guid):
        """Sets the elevator_entry_pos_guid of this GetElevatorFloor.

        The id of the position located in front of the elevator  # noqa: E501

        :param elevator_entry_pos_guid: The elevator_entry_pos_guid of this GetElevatorFloor.  # noqa: E501
        :type: str
        """

        self._elevator_entry_pos_guid = elevator_entry_pos_guid

    @property
    def elevator_entry_pos(self):
        """Gets the elevator_entry_pos of this GetElevatorFloor.  # noqa: E501

          # noqa: E501

        :return: The elevator_entry_pos of this GetElevatorFloor.  # noqa: E501
        :rtype: str
        """
        return self._elevator_entry_pos

    @elevator_entry_pos.setter
    def elevator_entry_pos(self, elevator_entry_pos):
        """Sets the elevator_entry_pos of this GetElevatorFloor.

          # noqa: E501

        :param elevator_entry_pos: The elevator_entry_pos of this GetElevatorFloor.  # noqa: E501
        :type: str
        """

        self._elevator_entry_pos = elevator_entry_pos

    @property
    def elevator_pos_guid(self):
        """Gets the elevator_pos_guid of this GetElevatorFloor.  # noqa: E501

        The id of the position located in the elevator  # noqa: E501

        :return: The elevator_pos_guid of this GetElevatorFloor.  # noqa: E501
        :rtype: str
        """
        return self._elevator_pos_guid

    @elevator_pos_guid.setter
    def elevator_pos_guid(self, elevator_pos_guid):
        """Sets the elevator_pos_guid of this GetElevatorFloor.

        The id of the position located in the elevator  # noqa: E501

        :param elevator_pos_guid: The elevator_pos_guid of this GetElevatorFloor.  # noqa: E501
        :type: str
        """

        self._elevator_pos_guid = elevator_pos_guid

    @property
    def elevator_pos(self):
        """Gets the elevator_pos of this GetElevatorFloor.  # noqa: E501

          # noqa: E501

        :return: The elevator_pos of this GetElevatorFloor.  # noqa: E501
        :rtype: str
        """
        return self._elevator_pos

    @elevator_pos.setter
    def elevator_pos(self, elevator_pos):
        """Sets the elevator_pos of this GetElevatorFloor.

          # noqa: E501

        :param elevator_pos: The elevator_pos of this GetElevatorFloor.  # noqa: E501
        :type: str
        """

        self._elevator_pos = elevator_pos

    @property
    def entry_mission_guid(self):
        """Gets the entry_mission_guid of this GetElevatorFloor.  # noqa: E501

        The id of the entry mission  # noqa: E501

        :return: The entry_mission_guid of this GetElevatorFloor.  # noqa: E501
        :rtype: str
        """
        return self._entry_mission_guid

    @entry_mission_guid.setter
    def entry_mission_guid(self, entry_mission_guid):
        """Sets the entry_mission_guid of this GetElevatorFloor.

        The id of the entry mission  # noqa: E501

        :param entry_mission_guid: The entry_mission_guid of this GetElevatorFloor.  # noqa: E501
        :type: str
        """

        self._entry_mission_guid = entry_mission_guid

    @property
    def entry_mission(self):
        """Gets the entry_mission of this GetElevatorFloor.  # noqa: E501

          # noqa: E501

        :return: The entry_mission of this GetElevatorFloor.  # noqa: E501
        :rtype: str
        """
        return self._entry_mission

    @entry_mission.setter
    def entry_mission(self, entry_mission):
        """Sets the entry_mission of this GetElevatorFloor.

          # noqa: E501

        :param entry_mission: The entry_mission of this GetElevatorFloor.  # noqa: E501
        :type: str
        """

        self._entry_mission = entry_mission

    @property
    def exit_mission_guid(self):
        """Gets the exit_mission_guid of this GetElevatorFloor.  # noqa: E501

        The id of the exit mission  # noqa: E501

        :return: The exit_mission_guid of this GetElevatorFloor.  # noqa: E501
        :rtype: str
        """
        return self._exit_mission_guid

    @exit_mission_guid.setter
    def exit_mission_guid(self, exit_mission_guid):
        """Sets the exit_mission_guid of this GetElevatorFloor.

        The id of the exit mission  # noqa: E501

        :param exit_mission_guid: The exit_mission_guid of this GetElevatorFloor.  # noqa: E501
        :type: str
        """

        self._exit_mission_guid = exit_mission_guid

    @property
    def exit_mission(self):
        """Gets the exit_mission of this GetElevatorFloor.  # noqa: E501

          # noqa: E501

        :return: The exit_mission of this GetElevatorFloor.  # noqa: E501
        :rtype: str
        """
        return self._exit_mission

    @exit_mission.setter
    def exit_mission(self, exit_mission):
        """Sets the exit_mission of this GetElevatorFloor.

          # noqa: E501

        :param exit_mission: The exit_mission of this GetElevatorFloor.  # noqa: E501
        :type: str
        """

        self._exit_mission = exit_mission

    @property
    def door(self):
        """Gets the door of this GetElevatorFloor.  # noqa: E501

        The integer identifying the door used by the elevator on this floor  # noqa: E501

        :return: The door of this GetElevatorFloor.  # noqa: E501
        :rtype: int
        """
        return self._door

    @door.setter
    def door(self, door):
        """Sets the door of this GetElevatorFloor.

        The integer identifying the door used by the elevator on this floor  # noqa: E501

        :param door: The door of this GetElevatorFloor.  # noqa: E501
        :type: int
        """

        self._door = door

    @property
    def created_by_id(self):
        """Gets the created_by_id of this GetElevatorFloor.  # noqa: E501

        The global id of the user who created this entry  # noqa: E501

        :return: The created_by_id of this GetElevatorFloor.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this GetElevatorFloor.

        The global id of the user who created this entry  # noqa: E501

        :param created_by_id: The created_by_id of this GetElevatorFloor.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_by(self):
        """Gets the created_by of this GetElevatorFloor.  # noqa: E501

        The url to the description this elevator floor  # noqa: E501

        :return: The created_by of this GetElevatorFloor.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this GetElevatorFloor.

        The url to the description this elevator floor  # noqa: E501

        :param created_by: The created_by of this GetElevatorFloor.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetElevatorFloor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetElevatorFloor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetElevatorFloor):
            return True

        return self.to_dict() != other.to_dict()
