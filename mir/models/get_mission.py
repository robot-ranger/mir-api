# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class GetMission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'name': 'str',
        'description': 'str',
        'session_id': 'str',
        'group_id': 'str',
        'hidden': 'bool',
        'is_template': 'bool',
        'actions': 'str',
        'definition': 'str',
        'created_by_id': 'str',
        'created_by': 'str',
        'valid': 'bool',
        'has_user_parameters': 'bool'
    }

    attribute_map = {
        'guid': 'guid',
        'name': 'name',
        'description': 'description',
        'session_id': 'session_id',
        'group_id': 'group_id',
        'hidden': 'hidden',
        'is_template': 'is_template',
        'actions': 'actions',
        'definition': 'definition',
        'created_by_id': 'created_by_id',
        'created_by': 'created_by',
        'valid': 'valid',
        'has_user_parameters': 'has_user_parameters'
    }

    def __init__(self, guid=None, name=None, description=None, session_id=None, group_id=None, hidden=None, is_template=None, actions=None, definition=None, created_by_id=None, created_by=None, valid=None, has_user_parameters=None, _configuration=None):  # noqa: E501
        """GetMission - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._guid = None
        self._name = None
        self._description = None
        self._session_id = None
        self._group_id = None
        self._hidden = None
        self._is_template = None
        self._actions = None
        self._definition = None
        self._created_by_id = None
        self._created_by = None
        self._valid = None
        self._has_user_parameters = None
        self.discriminator = None

        if guid is not None:
            self.guid = guid
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if session_id is not None:
            self.session_id = session_id
        if group_id is not None:
            self.group_id = group_id
        if hidden is not None:
            self.hidden = hidden
        if is_template is not None:
            self.is_template = is_template
        if actions is not None:
            self.actions = actions
        if definition is not None:
            self.definition = definition
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_by is not None:
            self.created_by = created_by
        if valid is not None:
            self.valid = valid
        if has_user_parameters is not None:
            self.has_user_parameters = has_user_parameters

    @property
    def guid(self):
        """Gets the guid of this GetMission.  # noqa: E501

        The global id unique across robots that identifies this mission  # noqa: E501

        :return: The guid of this GetMission.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this GetMission.

        The global id unique across robots that identifies this mission  # noqa: E501

        :param guid: The guid of this GetMission.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def name(self):
        """Gets the name of this GetMission.  # noqa: E501

        The name of the mission  # noqa: E501

        :return: The name of this GetMission.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetMission.

        The name of the mission  # noqa: E501

        :param name: The name of this GetMission.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this GetMission.  # noqa: E501

        The description of the mission  # noqa: E501

        :return: The description of this GetMission.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetMission.

        The description of the mission  # noqa: E501

        :param description: The description of this GetMission.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def session_id(self):
        """Gets the session_id of this GetMission.  # noqa: E501

        The id of the area this mission belongs to, or null if the mission belongs to all areas  # noqa: E501

        :return: The session_id of this GetMission.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this GetMission.

        The id of the area this mission belongs to, or null if the mission belongs to all areas  # noqa: E501

        :param session_id: The session_id of this GetMission.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def group_id(self):
        """Gets the group_id of this GetMission.  # noqa: E501

        The id of the area this mission belongs to, or null if the mission belongs to all areas  # noqa: E501

        :return: The group_id of this GetMission.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this GetMission.

        The id of the area this mission belongs to, or null if the mission belongs to all areas  # noqa: E501

        :param group_id: The group_id of this GetMission.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def hidden(self):
        """Gets the hidden of this GetMission.  # noqa: E501

        If this mission is hidden in the mission list  # noqa: E501

        :return: The hidden of this GetMission.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this GetMission.

        If this mission is hidden in the mission list  # noqa: E501

        :param hidden: The hidden of this GetMission.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def is_template(self):
        """Gets the is_template of this GetMission.  # noqa: E501

        True if the missions is a template mission  # noqa: E501

        :return: The is_template of this GetMission.  # noqa: E501
        :rtype: bool
        """
        return self._is_template

    @is_template.setter
    def is_template(self, is_template):
        """Sets the is_template of this GetMission.

        True if the missions is a template mission  # noqa: E501

        :param is_template: The is_template of this GetMission.  # noqa: E501
        :type: bool
        """

        self._is_template = is_template

    @property
    def actions(self):
        """Gets the actions of this GetMission.  # noqa: E501

        The url to the list of actions contained in this mission  # noqa: E501

        :return: The actions of this GetMission.  # noqa: E501
        :rtype: str
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this GetMission.

        The url to the list of actions contained in this mission  # noqa: E501

        :param actions: The actions of this GetMission.  # noqa: E501
        :type: str
        """

        self._actions = actions

    @property
    def definition(self):
        """Gets the definition of this GetMission.  # noqa: E501

        The url to the list of input parameters this mission accepts  # noqa: E501

        :return: The definition of this GetMission.  # noqa: E501
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this GetMission.

        The url to the list of input parameters this mission accepts  # noqa: E501

        :param definition: The definition of this GetMission.  # noqa: E501
        :type: str
        """

        self._definition = definition

    @property
    def created_by_id(self):
        """Gets the created_by_id of this GetMission.  # noqa: E501

        The global id of the user who created this entry  # noqa: E501

        :return: The created_by_id of this GetMission.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this GetMission.

        The global id of the user who created this entry  # noqa: E501

        :param created_by_id: The created_by_id of this GetMission.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_by(self):
        """Gets the created_by of this GetMission.  # noqa: E501

        The url to the description of the type of this position  # noqa: E501

        :return: The created_by of this GetMission.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this GetMission.

        The url to the description of the type of this position  # noqa: E501

        :param created_by: The created_by of this GetMission.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def valid(self):
        """Gets the valid of this GetMission.  # noqa: E501

        Indicates if the mission contains only existing submissions  # noqa: E501

        :return: The valid of this GetMission.  # noqa: E501
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this GetMission.

        Indicates if the mission contains only existing submissions  # noqa: E501

        :param valid: The valid of this GetMission.  # noqa: E501
        :type: bool
        """

        self._valid = valid

    @property
    def has_user_parameters(self):
        """Gets the has_user_parameters of this GetMission.  # noqa: E501

        Indicates if the mission has dynamic parameters  # noqa: E501

        :return: The has_user_parameters of this GetMission.  # noqa: E501
        :rtype: bool
        """
        return self._has_user_parameters

    @has_user_parameters.setter
    def has_user_parameters(self, has_user_parameters):
        """Sets the has_user_parameters of this GetMission.

        Indicates if the mission has dynamic parameters  # noqa: E501

        :param has_user_parameters: The has_user_parameters of this GetMission.  # noqa: E501
        :type: bool
        """

        self._has_user_parameters = has_user_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetMission, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetMission):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetMission):
            return True

        return self.to_dict() != other.to_dict()
