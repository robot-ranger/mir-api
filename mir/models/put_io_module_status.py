# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class PutIoModuleStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'port': 'int',
        'on': 'bool',
        'timeout': 'int'
    }

    attribute_map = {
        'port': 'port',
        'on': 'on',
        'timeout': 'timeout'
    }

    def __init__(self, port=None, on=None, timeout=None, _configuration=None):  # noqa: E501
        """PutIoModuleStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._port = None
        self._on = None
        self._timeout = None
        self.discriminator = None

        if port is not None:
            self.port = port
        if on is not None:
            self.on = on
        if timeout is not None:
            self.timeout = timeout

    @property
    def port(self):
        """Gets the port of this PutIoModuleStatus.  # noqa: E501


        :return: The port of this PutIoModuleStatus.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this PutIoModuleStatus.


        :param port: The port of this PutIoModuleStatus.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def on(self):
        """Gets the on of this PutIoModuleStatus.  # noqa: E501


        :return: The on of this PutIoModuleStatus.  # noqa: E501
        :rtype: bool
        """
        return self._on

    @on.setter
    def on(self, on):
        """Sets the on of this PutIoModuleStatus.


        :param on: The on of this PutIoModuleStatus.  # noqa: E501
        :type: bool
        """

        self._on = on

    @property
    def timeout(self):
        """Gets the timeout of this PutIoModuleStatus.  # noqa: E501


        :return: The timeout of this PutIoModuleStatus.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this PutIoModuleStatus.


        :param timeout: The timeout of this PutIoModuleStatus.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PutIoModuleStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutIoModuleStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PutIoModuleStatus):
            return True

        return self.to_dict() != other.to_dict()
