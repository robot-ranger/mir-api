# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class GetSoftwareSystemStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'platform_version': 'str',
        'application_version': 'str',
        'last_sw_update_type': 'str',
        'last_sw_update_status': 'str',
        'last_sw_update_date': 'datetime',
        'free_disk_space': 'str',
        'used_disk_space': 'str'
    }

    attribute_map = {
        'url': 'url',
        'platform_version': 'platform_version',
        'application_version': 'application_version',
        'last_sw_update_type': 'last_sw_update_type',
        'last_sw_update_status': 'last_sw_update_status',
        'last_sw_update_date': 'last_sw_update_date',
        'free_disk_space': 'free_disk_space',
        'used_disk_space': 'used_disk_space'
    }

    def __init__(self, url=None, platform_version=None, application_version=None, last_sw_update_type=None, last_sw_update_status=None, last_sw_update_date=None, free_disk_space=None, used_disk_space=None, _configuration=None):  # noqa: E501
        """GetSoftwareSystemStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._url = None
        self._platform_version = None
        self._application_version = None
        self._last_sw_update_type = None
        self._last_sw_update_status = None
        self._last_sw_update_date = None
        self._free_disk_space = None
        self._used_disk_space = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if platform_version is not None:
            self.platform_version = platform_version
        if application_version is not None:
            self.application_version = application_version
        if last_sw_update_type is not None:
            self.last_sw_update_type = last_sw_update_type
        if last_sw_update_status is not None:
            self.last_sw_update_status = last_sw_update_status
        if last_sw_update_date is not None:
            self.last_sw_update_date = last_sw_update_date
        if free_disk_space is not None:
            self.free_disk_space = free_disk_space
        if used_disk_space is not None:
            self.used_disk_space = used_disk_space

    @property
    def url(self):
        """Gets the url of this GetSoftwareSystemStatus.  # noqa: E501

        The URL of the resource  # noqa: E501

        :return: The url of this GetSoftwareSystemStatus.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GetSoftwareSystemStatus.

        The URL of the resource  # noqa: E501

        :param url: The url of this GetSoftwareSystemStatus.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def platform_version(self):
        """Gets the platform_version of this GetSoftwareSystemStatus.  # noqa: E501

        Mir_platform sw version  # noqa: E501

        :return: The platform_version of this GetSoftwareSystemStatus.  # noqa: E501
        :rtype: str
        """
        return self._platform_version

    @platform_version.setter
    def platform_version(self, platform_version):
        """Sets the platform_version of this GetSoftwareSystemStatus.

        Mir_platform sw version  # noqa: E501

        :param platform_version: The platform_version of this GetSoftwareSystemStatus.  # noqa: E501
        :type: str
        """

        self._platform_version = platform_version

    @property
    def application_version(self):
        """Gets the application_version of this GetSoftwareSystemStatus.  # noqa: E501

        Mir_application sw version  # noqa: E501

        :return: The application_version of this GetSoftwareSystemStatus.  # noqa: E501
        :rtype: str
        """
        return self._application_version

    @application_version.setter
    def application_version(self, application_version):
        """Sets the application_version of this GetSoftwareSystemStatus.

        Mir_application sw version  # noqa: E501

        :param application_version: The application_version of this GetSoftwareSystemStatus.  # noqa: E501
        :type: str
        """

        self._application_version = application_version

    @property
    def last_sw_update_type(self):
        """Gets the last_sw_update_type of this GetSoftwareSystemStatus.  # noqa: E501

        Status of the last upgrade in the system  # noqa: E501

        :return: The last_sw_update_type of this GetSoftwareSystemStatus.  # noqa: E501
        :rtype: str
        """
        return self._last_sw_update_type

    @last_sw_update_type.setter
    def last_sw_update_type(self, last_sw_update_type):
        """Sets the last_sw_update_type of this GetSoftwareSystemStatus.

        Status of the last upgrade in the system  # noqa: E501

        :param last_sw_update_type: The last_sw_update_type of this GetSoftwareSystemStatus.  # noqa: E501
        :type: str
        """

        self._last_sw_update_type = last_sw_update_type

    @property
    def last_sw_update_status(self):
        """Gets the last_sw_update_status of this GetSoftwareSystemStatus.  # noqa: E501

        Status of the last upgrade in the system  # noqa: E501

        :return: The last_sw_update_status of this GetSoftwareSystemStatus.  # noqa: E501
        :rtype: str
        """
        return self._last_sw_update_status

    @last_sw_update_status.setter
    def last_sw_update_status(self, last_sw_update_status):
        """Sets the last_sw_update_status of this GetSoftwareSystemStatus.

        Status of the last upgrade in the system  # noqa: E501

        :param last_sw_update_status: The last_sw_update_status of this GetSoftwareSystemStatus.  # noqa: E501
        :type: str
        """

        self._last_sw_update_status = last_sw_update_status

    @property
    def last_sw_update_date(self):
        """Gets the last_sw_update_date of this GetSoftwareSystemStatus.  # noqa: E501

        The date of the last upgrade in the system  # noqa: E501

        :return: The last_sw_update_date of this GetSoftwareSystemStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._last_sw_update_date

    @last_sw_update_date.setter
    def last_sw_update_date(self, last_sw_update_date):
        """Sets the last_sw_update_date of this GetSoftwareSystemStatus.

        The date of the last upgrade in the system  # noqa: E501

        :param last_sw_update_date: The last_sw_update_date of this GetSoftwareSystemStatus.  # noqa: E501
        :type: datetime
        """

        self._last_sw_update_date = last_sw_update_date

    @property
    def free_disk_space(self):
        """Gets the free_disk_space of this GetSoftwareSystemStatus.  # noqa: E501

        Free disk space in the sw images partition  # noqa: E501

        :return: The free_disk_space of this GetSoftwareSystemStatus.  # noqa: E501
        :rtype: str
        """
        return self._free_disk_space

    @free_disk_space.setter
    def free_disk_space(self, free_disk_space):
        """Sets the free_disk_space of this GetSoftwareSystemStatus.

        Free disk space in the sw images partition  # noqa: E501

        :param free_disk_space: The free_disk_space of this GetSoftwareSystemStatus.  # noqa: E501
        :type: str
        """

        self._free_disk_space = free_disk_space

    @property
    def used_disk_space(self):
        """Gets the used_disk_space of this GetSoftwareSystemStatus.  # noqa: E501

        Used disk space in the sw images partition  # noqa: E501

        :return: The used_disk_space of this GetSoftwareSystemStatus.  # noqa: E501
        :rtype: str
        """
        return self._used_disk_space

    @used_disk_space.setter
    def used_disk_space(self, used_disk_space):
        """Sets the used_disk_space of this GetSoftwareSystemStatus.

        Used disk space in the sw images partition  # noqa: E501

        :param used_disk_space: The used_disk_space of this GetSoftwareSystemStatus.  # noqa: E501
        :type: str
        """

        self._used_disk_space = used_disk_space

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSoftwareSystemStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSoftwareSystemStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetSoftwareSystemStatus):
            return True

        return self.to_dict() != other.to_dict()
