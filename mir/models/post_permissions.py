# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class PostPermissions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'endpoint': 'str',
        'permission_type': 'str',
        'user_group_guid': 'str'
    }

    attribute_map = {
        'guid': 'guid',
        'endpoint': 'endpoint',
        'permission_type': 'permission_type',
        'user_group_guid': 'user_group_guid'
    }

    def __init__(self, guid=None, endpoint=None, permission_type=None, user_group_guid=None, _configuration=None):  # noqa: E501
        """PostPermissions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._guid = None
        self._endpoint = None
        self._permission_type = None
        self._user_group_guid = None
        self.discriminator = None

        if guid is not None:
            self.guid = guid
        self.endpoint = endpoint
        self.permission_type = permission_type
        self.user_group_guid = user_group_guid

    @property
    def guid(self):
        """Gets the guid of this PostPermissions.  # noqa: E501


        :return: The guid of this PostPermissions.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this PostPermissions.


        :param guid: The guid of this PostPermissions.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def endpoint(self):
        """Gets the endpoint of this PostPermissions.  # noqa: E501

        Min length: 1, Max length: 255  # noqa: E501

        :return: The endpoint of this PostPermissions.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this PostPermissions.

        Min length: 1, Max length: 255  # noqa: E501

        :param endpoint: The endpoint of this PostPermissions.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and endpoint is None:
            raise ValueError("Invalid value for `endpoint`, must not be `None`")  # noqa: E501

        self._endpoint = endpoint

    @property
    def permission_type(self):
        """Gets the permission_type of this PostPermissions.  # noqa: E501

          # noqa: E501

        :return: The permission_type of this PostPermissions.  # noqa: E501
        :rtype: str
        """
        return self._permission_type

    @permission_type.setter
    def permission_type(self, permission_type):
        """Sets the permission_type of this PostPermissions.

          # noqa: E501

        :param permission_type: The permission_type of this PostPermissions.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and permission_type is None:
            raise ValueError("Invalid value for `permission_type`, must not be `None`")  # noqa: E501

        self._permission_type = permission_type

    @property
    def user_group_guid(self):
        """Gets the user_group_guid of this PostPermissions.  # noqa: E501


        :return: The user_group_guid of this PostPermissions.  # noqa: E501
        :rtype: str
        """
        return self._user_group_guid

    @user_group_guid.setter
    def user_group_guid(self, user_group_guid):
        """Sets the user_group_guid of this PostPermissions.


        :param user_group_guid: The user_group_guid of this PostPermissions.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and user_group_guid is None:
            raise ValueError("Invalid value for `user_group_guid`, must not be `None`")  # noqa: E501

        self._user_group_guid = user_group_guid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostPermissions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostPermissions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostPermissions):
            return True

        return self.to_dict() != other.to_dict()
