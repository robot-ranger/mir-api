# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class GetSettingGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'priority': 'int',
        'settings_count': 'int',
        'advanced_settings_count': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'priority': 'priority',
        'settings_count': 'settings_count',
        'advanced_settings_count': 'advanced_settings_count'
    }

    def __init__(self, id=None, name=None, description=None, priority=None, settings_count=None, advanced_settings_count=None, _configuration=None):  # noqa: E501
        """GetSettingGroup - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._priority = None
        self._settings_count = None
        self._advanced_settings_count = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if priority is not None:
            self.priority = priority
        if settings_count is not None:
            self.settings_count = settings_count
        if advanced_settings_count is not None:
            self.advanced_settings_count = advanced_settings_count

    @property
    def id(self):
        """Gets the id of this GetSettingGroup.  # noqa: E501

          # noqa: E501

        :return: The id of this GetSettingGroup.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetSettingGroup.

          # noqa: E501

        :param id: The id of this GetSettingGroup.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this GetSettingGroup.  # noqa: E501

          # noqa: E501

        :return: The name of this GetSettingGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetSettingGroup.

          # noqa: E501

        :param name: The name of this GetSettingGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this GetSettingGroup.  # noqa: E501

          # noqa: E501

        :return: The description of this GetSettingGroup.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetSettingGroup.

          # noqa: E501

        :param description: The description of this GetSettingGroup.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def priority(self):
        """Gets the priority of this GetSettingGroup.  # noqa: E501

          # noqa: E501

        :return: The priority of this GetSettingGroup.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this GetSettingGroup.

          # noqa: E501

        :param priority: The priority of this GetSettingGroup.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def settings_count(self):
        """Gets the settings_count of this GetSettingGroup.  # noqa: E501

          # noqa: E501

        :return: The settings_count of this GetSettingGroup.  # noqa: E501
        :rtype: int
        """
        return self._settings_count

    @settings_count.setter
    def settings_count(self, settings_count):
        """Sets the settings_count of this GetSettingGroup.

          # noqa: E501

        :param settings_count: The settings_count of this GetSettingGroup.  # noqa: E501
        :type: int
        """

        self._settings_count = settings_count

    @property
    def advanced_settings_count(self):
        """Gets the advanced_settings_count of this GetSettingGroup.  # noqa: E501

          # noqa: E501

        :return: The advanced_settings_count of this GetSettingGroup.  # noqa: E501
        :rtype: int
        """
        return self._advanced_settings_count

    @advanced_settings_count.setter
    def advanced_settings_count(self, advanced_settings_count):
        """Sets the advanced_settings_count of this GetSettingGroup.

          # noqa: E501

        :param advanced_settings_count: The advanced_settings_count of this GetSettingGroup.  # noqa: E501
        :type: int
        """

        self._advanced_settings_count = advanced_settings_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSettingGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSettingGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetSettingGroup):
            return True

        return self.to_dict() != other.to_dict()
