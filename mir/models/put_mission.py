# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class PutMission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'hidden': 'bool',
        'session_id': 'str',
        'group_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'hidden': 'hidden',
        'session_id': 'session_id',
        'group_id': 'group_id'
    }

    def __init__(self, name=None, description=None, hidden=None, session_id=None, group_id=None, _configuration=None):  # noqa: E501
        """PutMission - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._hidden = None
        self._session_id = None
        self._group_id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if hidden is not None:
            self.hidden = hidden
        if session_id is not None:
            self.session_id = session_id
        if group_id is not None:
            self.group_id = group_id

    @property
    def name(self):
        """Gets the name of this PutMission.  # noqa: E501

        Min length: 1, Max length: 255  # noqa: E501

        :return: The name of this PutMission.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PutMission.

        Min length: 1, Max length: 255  # noqa: E501

        :param name: The name of this PutMission.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this PutMission.  # noqa: E501

        Max length: 255  # noqa: E501

        :return: The description of this PutMission.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PutMission.

        Max length: 255  # noqa: E501

        :param description: The description of this PutMission.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def hidden(self):
        """Gets the hidden of this PutMission.  # noqa: E501


        :return: The hidden of this PutMission.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this PutMission.


        :param hidden: The hidden of this PutMission.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def session_id(self):
        """Gets the session_id of this PutMission.  # noqa: E501


        :return: The session_id of this PutMission.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this PutMission.


        :param session_id: The session_id of this PutMission.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def group_id(self):
        """Gets the group_id of this PutMission.  # noqa: E501


        :return: The group_id of this PutMission.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this PutMission.


        :param group_id: The group_id of this PutMission.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PutMission, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutMission):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PutMission):
            return True

        return self.to_dict() != other.to_dict()
