# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class GetUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'name': 'str',
        'email': 'str',
        'single_dashboard': 'bool',
        'dashboard_id': 'str',
        'create_time': 'str',
        'update_time': 'str',
        'guid': 'str',
        'url': 'str',
        'user_group_id': 'str',
        'user_group': 'str',
        'created_by_id': 'str',
        'created_by': 'str',
        'pincode': 'str'
    }

    attribute_map = {
        'username': 'username',
        'name': 'name',
        'email': 'email',
        'single_dashboard': 'single_dashboard',
        'dashboard_id': 'dashboard_id',
        'create_time': 'create_time',
        'update_time': 'update_time',
        'guid': 'guid',
        'url': 'url',
        'user_group_id': 'user_group_id',
        'user_group': 'user_group',
        'created_by_id': 'created_by_id',
        'created_by': 'created_by',
        'pincode': 'pincode'
    }

    def __init__(self, username=None, name=None, email=None, single_dashboard=None, dashboard_id=None, create_time=None, update_time=None, guid=None, url=None, user_group_id=None, user_group=None, created_by_id=None, created_by=None, pincode=None, _configuration=None):  # noqa: E501
        """GetUser - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._username = None
        self._name = None
        self._email = None
        self._single_dashboard = None
        self._dashboard_id = None
        self._create_time = None
        self._update_time = None
        self._guid = None
        self._url = None
        self._user_group_id = None
        self._user_group = None
        self._created_by_id = None
        self._created_by = None
        self._pincode = None
        self.discriminator = None

        if username is not None:
            self.username = username
        if name is not None:
            self.name = name
        if email is not None:
            self.email = email
        if single_dashboard is not None:
            self.single_dashboard = single_dashboard
        if dashboard_id is not None:
            self.dashboard_id = dashboard_id
        if create_time is not None:
            self.create_time = create_time
        if update_time is not None:
            self.update_time = update_time
        if guid is not None:
            self.guid = guid
        if url is not None:
            self.url = url
        if user_group_id is not None:
            self.user_group_id = user_group_id
        if user_group is not None:
            self.user_group = user_group
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_by is not None:
            self.created_by = created_by
        if pincode is not None:
            self.pincode = pincode

    @property
    def username(self):
        """Gets the username of this GetUser.  # noqa: E501

        The username of the user  # noqa: E501

        :return: The username of this GetUser.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this GetUser.

        The username of the user  # noqa: E501

        :param username: The username of this GetUser.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def name(self):
        """Gets the name of this GetUser.  # noqa: E501

        The name of the user  # noqa: E501

        :return: The name of this GetUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetUser.

        The name of the user  # noqa: E501

        :param name: The name of this GetUser.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def email(self):
        """Gets the email of this GetUser.  # noqa: E501

        The email of the user  # noqa: E501

        :return: The email of this GetUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GetUser.

        The email of the user  # noqa: E501

        :param email: The email of this GetUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def single_dashboard(self):
        """Gets the single_dashboard of this GetUser.  # noqa: E501

          # noqa: E501

        :return: The single_dashboard of this GetUser.  # noqa: E501
        :rtype: bool
        """
        return self._single_dashboard

    @single_dashboard.setter
    def single_dashboard(self, single_dashboard):
        """Sets the single_dashboard of this GetUser.

          # noqa: E501

        :param single_dashboard: The single_dashboard of this GetUser.  # noqa: E501
        :type: bool
        """

        self._single_dashboard = single_dashboard

    @property
    def dashboard_id(self):
        """Gets the dashboard_id of this GetUser.  # noqa: E501

          # noqa: E501

        :return: The dashboard_id of this GetUser.  # noqa: E501
        :rtype: str
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """Sets the dashboard_id of this GetUser.

          # noqa: E501

        :param dashboard_id: The dashboard_id of this GetUser.  # noqa: E501
        :type: str
        """

        self._dashboard_id = dashboard_id

    @property
    def create_time(self):
        """Gets the create_time of this GetUser.  # noqa: E501

        Creation time of the user  # noqa: E501

        :return: The create_time of this GetUser.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GetUser.

        Creation time of the user  # noqa: E501

        :param create_time: The create_time of this GetUser.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this GetUser.  # noqa: E501

        Last time the user was updated  # noqa: E501

        :return: The update_time of this GetUser.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GetUser.

        Last time the user was updated  # noqa: E501

        :param update_time: The update_time of this GetUser.  # noqa: E501
        :type: str
        """

        self._update_time = update_time

    @property
    def guid(self):
        """Gets the guid of this GetUser.  # noqa: E501

        The global unique id across robots that identifies this user  # noqa: E501

        :return: The guid of this GetUser.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this GetUser.

        The global unique id across robots that identifies this user  # noqa: E501

        :param guid: The guid of this GetUser.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def url(self):
        """Gets the url of this GetUser.  # noqa: E501

        Url to this user  # noqa: E501

        :return: The url of this GetUser.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GetUser.

        Url to this user  # noqa: E501

        :param url: The url of this GetUser.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def user_group_id(self):
        """Gets the user_group_id of this GetUser.  # noqa: E501

        Global id of the user group this user is in  # noqa: E501

        :return: The user_group_id of this GetUser.  # noqa: E501
        :rtype: str
        """
        return self._user_group_id

    @user_group_id.setter
    def user_group_id(self, user_group_id):
        """Sets the user_group_id of this GetUser.

        Global id of the user group this user is in  # noqa: E501

        :param user_group_id: The user_group_id of this GetUser.  # noqa: E501
        :type: str
        """

        self._user_group_id = user_group_id

    @property
    def user_group(self):
        """Gets the user_group of this GetUser.  # noqa: E501

        Url for the user group this user is in  # noqa: E501

        :return: The user_group of this GetUser.  # noqa: E501
        :rtype: str
        """
        return self._user_group

    @user_group.setter
    def user_group(self, user_group):
        """Sets the user_group of this GetUser.

        Url for the user group this user is in  # noqa: E501

        :param user_group: The user_group of this GetUser.  # noqa: E501
        :type: str
        """

        self._user_group = user_group

    @property
    def created_by_id(self):
        """Gets the created_by_id of this GetUser.  # noqa: E501

        The global id of the user who created this entry  # noqa: E501

        :return: The created_by_id of this GetUser.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this GetUser.

        The global id of the user who created this entry  # noqa: E501

        :param created_by_id: The created_by_id of this GetUser.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_by(self):
        """Gets the created_by of this GetUser.  # noqa: E501

        The url to the description of the type of this position  # noqa: E501

        :return: The created_by of this GetUser.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this GetUser.

        The url to the description of the type of this position  # noqa: E501

        :param created_by: The created_by of this GetUser.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def pincode(self):
        """Gets the pincode of this GetUser.  # noqa: E501

        Pincode for the user  # noqa: E501

        :return: The pincode of this GetUser.  # noqa: E501
        :rtype: str
        """
        return self._pincode

    @pincode.setter
    def pincode(self, pincode):
        """Sets the pincode of this GetUser.

        Pincode for the user  # noqa: E501

        :param pincode: The pincode of this GetUser.  # noqa: E501
        :type: str
        """

        self._pincode = pincode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetUser):
            return True

        return self.to_dict() != other.to_dict()
