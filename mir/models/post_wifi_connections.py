# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class PostWifiConnections(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ssid': 'str',
        'description': 'str',
        'device': 'str',
        'security': 'str',
        'address': 'str',
        'netmask': 'str',
        'gateway': 'str',
        'dns': 'str',
        'scan_freqs': 'list[object]',
        'bgscan_short_interval': 'int',
        'bgscan_long_interval': 'int',
        'bgscan_threshold': 'int'
    }

    attribute_map = {
        'ssid': 'ssid',
        'description': 'description',
        'device': 'device',
        'security': 'security',
        'address': 'address',
        'netmask': 'netmask',
        'gateway': 'gateway',
        'dns': 'dns',
        'scan_freqs': 'scan_freqs',
        'bgscan_short_interval': 'bgscan_short_interval',
        'bgscan_long_interval': 'bgscan_long_interval',
        'bgscan_threshold': 'bgscan_threshold'
    }

    def __init__(self, ssid=None, description=None, device=None, security=None, address=None, netmask=None, gateway=None, dns=None, scan_freqs=None, bgscan_short_interval=None, bgscan_long_interval=None, bgscan_threshold=None, _configuration=None):  # noqa: E501
        """PostWifiConnections - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ssid = None
        self._description = None
        self._device = None
        self._security = None
        self._address = None
        self._netmask = None
        self._gateway = None
        self._dns = None
        self._scan_freqs = None
        self._bgscan_short_interval = None
        self._bgscan_long_interval = None
        self._bgscan_threshold = None
        self.discriminator = None

        self.ssid = ssid
        if description is not None:
            self.description = description
        if device is not None:
            self.device = device
        if security is not None:
            self.security = security
        if address is not None:
            self.address = address
        if netmask is not None:
            self.netmask = netmask
        if gateway is not None:
            self.gateway = gateway
        if dns is not None:
            self.dns = dns
        if scan_freqs is not None:
            self.scan_freqs = scan_freqs
        if bgscan_short_interval is not None:
            self.bgscan_short_interval = bgscan_short_interval
        if bgscan_long_interval is not None:
            self.bgscan_long_interval = bgscan_long_interval
        if bgscan_threshold is not None:
            self.bgscan_threshold = bgscan_threshold

    @property
    def ssid(self):
        """Gets the ssid of this PostWifiConnections.  # noqa: E501

          # noqa: E501

        :return: The ssid of this PostWifiConnections.  # noqa: E501
        :rtype: str
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """Sets the ssid of this PostWifiConnections.

          # noqa: E501

        :param ssid: The ssid of this PostWifiConnections.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ssid is None:
            raise ValueError("Invalid value for `ssid`, must not be `None`")  # noqa: E501

        self._ssid = ssid

    @property
    def description(self):
        """Gets the description of this PostWifiConnections.  # noqa: E501

          # noqa: E501

        :return: The description of this PostWifiConnections.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostWifiConnections.

          # noqa: E501

        :param description: The description of this PostWifiConnections.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def device(self):
        """Gets the device of this PostWifiConnections.  # noqa: E501

          # noqa: E501

        :return: The device of this PostWifiConnections.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this PostWifiConnections.

          # noqa: E501

        :param device: The device of this PostWifiConnections.  # noqa: E501
        :type: str
        """

        self._device = device

    @property
    def security(self):
        """Gets the security of this PostWifiConnections.  # noqa: E501

          # noqa: E501

        :return: The security of this PostWifiConnections.  # noqa: E501
        :rtype: str
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this PostWifiConnections.

          # noqa: E501

        :param security: The security of this PostWifiConnections.  # noqa: E501
        :type: str
        """

        self._security = security

    @property
    def address(self):
        """Gets the address of this PostWifiConnections.  # noqa: E501


        :return: The address of this PostWifiConnections.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PostWifiConnections.


        :param address: The address of this PostWifiConnections.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def netmask(self):
        """Gets the netmask of this PostWifiConnections.  # noqa: E501


        :return: The netmask of this PostWifiConnections.  # noqa: E501
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """Sets the netmask of this PostWifiConnections.


        :param netmask: The netmask of this PostWifiConnections.  # noqa: E501
        :type: str
        """

        self._netmask = netmask

    @property
    def gateway(self):
        """Gets the gateway of this PostWifiConnections.  # noqa: E501


        :return: The gateway of this PostWifiConnections.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this PostWifiConnections.


        :param gateway: The gateway of this PostWifiConnections.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def dns(self):
        """Gets the dns of this PostWifiConnections.  # noqa: E501


        :return: The dns of this PostWifiConnections.  # noqa: E501
        :rtype: str
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this PostWifiConnections.


        :param dns: The dns of this PostWifiConnections.  # noqa: E501
        :type: str
        """

        self._dns = dns

    @property
    def scan_freqs(self):
        """Gets the scan_freqs of this PostWifiConnections.  # noqa: E501


        :return: The scan_freqs of this PostWifiConnections.  # noqa: E501
        :rtype: list[object]
        """
        return self._scan_freqs

    @scan_freqs.setter
    def scan_freqs(self, scan_freqs):
        """Sets the scan_freqs of this PostWifiConnections.


        :param scan_freqs: The scan_freqs of this PostWifiConnections.  # noqa: E501
        :type: list[object]
        """

        self._scan_freqs = scan_freqs

    @property
    def bgscan_short_interval(self):
        """Gets the bgscan_short_interval of this PostWifiConnections.  # noqa: E501


        :return: The bgscan_short_interval of this PostWifiConnections.  # noqa: E501
        :rtype: int
        """
        return self._bgscan_short_interval

    @bgscan_short_interval.setter
    def bgscan_short_interval(self, bgscan_short_interval):
        """Sets the bgscan_short_interval of this PostWifiConnections.


        :param bgscan_short_interval: The bgscan_short_interval of this PostWifiConnections.  # noqa: E501
        :type: int
        """

        self._bgscan_short_interval = bgscan_short_interval

    @property
    def bgscan_long_interval(self):
        """Gets the bgscan_long_interval of this PostWifiConnections.  # noqa: E501


        :return: The bgscan_long_interval of this PostWifiConnections.  # noqa: E501
        :rtype: int
        """
        return self._bgscan_long_interval

    @bgscan_long_interval.setter
    def bgscan_long_interval(self, bgscan_long_interval):
        """Sets the bgscan_long_interval of this PostWifiConnections.


        :param bgscan_long_interval: The bgscan_long_interval of this PostWifiConnections.  # noqa: E501
        :type: int
        """

        self._bgscan_long_interval = bgscan_long_interval

    @property
    def bgscan_threshold(self):
        """Gets the bgscan_threshold of this PostWifiConnections.  # noqa: E501


        :return: The bgscan_threshold of this PostWifiConnections.  # noqa: E501
        :rtype: int
        """
        return self._bgscan_threshold

    @bgscan_threshold.setter
    def bgscan_threshold(self, bgscan_threshold):
        """Sets the bgscan_threshold of this PostWifiConnections.


        :param bgscan_threshold: The bgscan_threshold of this PostWifiConnections.  # noqa: E501
        :type: int
        """

        self._bgscan_threshold = bgscan_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostWifiConnections, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostWifiConnections):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostWifiConnections):
            return True

        return self.to_dict() != other.to_dict()
