# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class PutZone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'polygon': 'list[object]',
        'stroke_width': 'float',
        'direction': 'float',
        'actions': 'list[object]'
    }

    attribute_map = {
        'name': 'name',
        'polygon': 'polygon',
        'stroke_width': 'stroke_width',
        'direction': 'direction',
        'actions': 'actions'
    }

    def __init__(self, name=None, polygon=None, stroke_width=None, direction=None, actions=None, _configuration=None):  # noqa: E501
        """PutZone - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._polygon = None
        self._stroke_width = None
        self._direction = None
        self._actions = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if polygon is not None:
            self.polygon = polygon
        if stroke_width is not None:
            self.stroke_width = stroke_width
        if direction is not None:
            self.direction = direction
        if actions is not None:
            self.actions = actions

    @property
    def name(self):
        """Gets the name of this PutZone.  # noqa: E501

        Max length: 255  # noqa: E501

        :return: The name of this PutZone.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PutZone.

        Max length: 255  # noqa: E501

        :param name: The name of this PutZone.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def polygon(self):
        """Gets the polygon of this PutZone.  # noqa: E501


        :return: The polygon of this PutZone.  # noqa: E501
        :rtype: list[object]
        """
        return self._polygon

    @polygon.setter
    def polygon(self, polygon):
        """Sets the polygon of this PutZone.


        :param polygon: The polygon of this PutZone.  # noqa: E501
        :type: list[object]
        """

        self._polygon = polygon

    @property
    def stroke_width(self):
        """Gets the stroke_width of this PutZone.  # noqa: E501


        :return: The stroke_width of this PutZone.  # noqa: E501
        :rtype: float
        """
        return self._stroke_width

    @stroke_width.setter
    def stroke_width(self, stroke_width):
        """Sets the stroke_width of this PutZone.


        :param stroke_width: The stroke_width of this PutZone.  # noqa: E501
        :type: float
        """

        self._stroke_width = stroke_width

    @property
    def direction(self):
        """Gets the direction of this PutZone.  # noqa: E501


        :return: The direction of this PutZone.  # noqa: E501
        :rtype: float
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this PutZone.


        :param direction: The direction of this PutZone.  # noqa: E501
        :type: float
        """

        self._direction = direction

    @property
    def actions(self):
        """Gets the actions of this PutZone.  # noqa: E501


        :return: The actions of this PutZone.  # noqa: E501
        :rtype: list[object]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this PutZone.


        :param actions: The actions of this PutZone.  # noqa: E501
        :type: list[object]
        """

        self._actions = actions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PutZone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutZone):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PutZone):
            return True

        return self.to_dict() != other.to_dict()
