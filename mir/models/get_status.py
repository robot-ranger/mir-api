# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class GetStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'position': 'GetStatusPosition',
        'velocity': 'GetStatusVelocity',
        'battery_time_remaining': 'int',
        'battery_percentage': 'float',
        'moved': 'float',
        'mission_queue_id': 'int',
        'mission_queue_url': 'str',
        'mission_text': 'str',
        'distance_to_next_target': 'float',
        'robot_name': 'str',
        'robot_model': 'str',
        'serial_number': 'str',
        'session_id': 'str',
        'state_id': 'int',
        'state_text': 'str',
        'mode_id': 'int',
        'mode_text': 'str',
        'joystick_web_session_id': 'str',
        'map_id': 'str',
        'unloaded_map_changes': 'bool',
        'safety_system_muted': 'bool',
        'joystick_low_speed_mode_enabled': 'bool',
        'mode_key_state': 'str',
        'uptime': 'int',
        'errors': 'list[GetStatusErrors]',
        'footprint': 'str',
        'hook_status': 'GetStatusHookStatus',
        'hook_data': 'GetStatusHookData',
        'user_prompt': 'GetStatusUserPrompt'
    }

    attribute_map = {
        'position': 'position',
        'velocity': 'velocity',
        'battery_time_remaining': 'battery_time_remaining',
        'battery_percentage': 'battery_percentage',
        'moved': 'moved',
        'mission_queue_id': 'mission_queue_id',
        'mission_queue_url': 'mission_queue_url',
        'mission_text': 'mission_text',
        'distance_to_next_target': 'distance_to_next_target',
        'robot_name': 'robot_name',
        'robot_model': 'robot_model',
        'serial_number': 'serial_number',
        'session_id': 'session_id',
        'state_id': 'state_id',
        'state_text': 'state_text',
        'mode_id': 'mode_id',
        'mode_text': 'mode_text',
        'joystick_web_session_id': 'joystick_web_session_id',
        'map_id': 'map_id',
        'unloaded_map_changes': 'unloaded_map_changes',
        'safety_system_muted': 'safety_system_muted',
        'joystick_low_speed_mode_enabled': 'joystick_low_speed_mode_enabled',
        'mode_key_state': 'mode_key_state',
        'uptime': 'uptime',
        'errors': 'errors',
        'footprint': 'footprint',
        'hook_status': 'hook_status',
        'hook_data': 'hook_data',
        'user_prompt': 'user_prompt'
    }

    def __init__(self, position=None, velocity=None, battery_time_remaining=None, battery_percentage=None, moved=None, mission_queue_id=None, mission_queue_url=None, mission_text=None, distance_to_next_target=None, robot_name=None, robot_model=None, serial_number=None, session_id=None, state_id=None, state_text=None, mode_id=None, mode_text=None, joystick_web_session_id=None, map_id=None, unloaded_map_changes=None, safety_system_muted=None, joystick_low_speed_mode_enabled=None, mode_key_state=None, uptime=None, errors=None, footprint=None, hook_status=None, hook_data=None, user_prompt=None, _configuration=None):  # noqa: E501
        """GetStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._position = None
        self._velocity = None
        self._battery_time_remaining = None
        self._battery_percentage = None
        self._moved = None
        self._mission_queue_id = None
        self._mission_queue_url = None
        self._mission_text = None
        self._distance_to_next_target = None
        self._robot_name = None
        self._robot_model = None
        self._serial_number = None
        self._session_id = None
        self._state_id = None
        self._state_text = None
        self._mode_id = None
        self._mode_text = None
        self._joystick_web_session_id = None
        self._map_id = None
        self._unloaded_map_changes = None
        self._safety_system_muted = None
        self._joystick_low_speed_mode_enabled = None
        self._mode_key_state = None
        self._uptime = None
        self._errors = None
        self._footprint = None
        self._hook_status = None
        self._hook_data = None
        self._user_prompt = None
        self.discriminator = None

        if position is not None:
            self.position = position
        if velocity is not None:
            self.velocity = velocity
        if battery_time_remaining is not None:
            self.battery_time_remaining = battery_time_remaining
        if battery_percentage is not None:
            self.battery_percentage = battery_percentage
        if moved is not None:
            self.moved = moved
        if mission_queue_id is not None:
            self.mission_queue_id = mission_queue_id
        if mission_queue_url is not None:
            self.mission_queue_url = mission_queue_url
        if mission_text is not None:
            self.mission_text = mission_text
        if distance_to_next_target is not None:
            self.distance_to_next_target = distance_to_next_target
        if robot_name is not None:
            self.robot_name = robot_name
        if robot_model is not None:
            self.robot_model = robot_model
        if serial_number is not None:
            self.serial_number = serial_number
        if session_id is not None:
            self.session_id = session_id
        if state_id is not None:
            self.state_id = state_id
        if state_text is not None:
            self.state_text = state_text
        if mode_id is not None:
            self.mode_id = mode_id
        if mode_text is not None:
            self.mode_text = mode_text
        if joystick_web_session_id is not None:
            self.joystick_web_session_id = joystick_web_session_id
        if map_id is not None:
            self.map_id = map_id
        if unloaded_map_changes is not None:
            self.unloaded_map_changes = unloaded_map_changes
        if safety_system_muted is not None:
            self.safety_system_muted = safety_system_muted
        if joystick_low_speed_mode_enabled is not None:
            self.joystick_low_speed_mode_enabled = joystick_low_speed_mode_enabled
        if mode_key_state is not None:
            self.mode_key_state = mode_key_state
        if uptime is not None:
            self.uptime = uptime
        if errors is not None:
            self.errors = errors
        if footprint is not None:
            self.footprint = footprint
        if hook_status is not None:
            self.hook_status = hook_status
        if hook_data is not None:
            self.hook_data = hook_data
        if user_prompt is not None:
            self.user_prompt = user_prompt

    @property
    def position(self):
        """Gets the position of this GetStatus.  # noqa: E501


        :return: The position of this GetStatus.  # noqa: E501
        :rtype: GetStatusPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this GetStatus.


        :param position: The position of this GetStatus.  # noqa: E501
        :type: GetStatusPosition
        """

        self._position = position

    @property
    def velocity(self):
        """Gets the velocity of this GetStatus.  # noqa: E501


        :return: The velocity of this GetStatus.  # noqa: E501
        :rtype: GetStatusVelocity
        """
        return self._velocity

    @velocity.setter
    def velocity(self, velocity):
        """Sets the velocity of this GetStatus.


        :param velocity: The velocity of this GetStatus.  # noqa: E501
        :type: GetStatusVelocity
        """

        self._velocity = velocity

    @property
    def battery_time_remaining(self):
        """Gets the battery_time_remaining of this GetStatus.  # noqa: E501

        The approximate time remaining on the battery during normal operation of the robot  # noqa: E501

        :return: The battery_time_remaining of this GetStatus.  # noqa: E501
        :rtype: int
        """
        return self._battery_time_remaining

    @battery_time_remaining.setter
    def battery_time_remaining(self, battery_time_remaining):
        """Sets the battery_time_remaining of this GetStatus.

        The approximate time remaining on the battery during normal operation of the robot  # noqa: E501

        :param battery_time_remaining: The battery_time_remaining of this GetStatus.  # noqa: E501
        :type: int
        """

        self._battery_time_remaining = battery_time_remaining

    @property
    def battery_percentage(self):
        """Gets the battery_percentage of this GetStatus.  # noqa: E501

        The current charge percentage of the battery  # noqa: E501

        :return: The battery_percentage of this GetStatus.  # noqa: E501
        :rtype: float
        """
        return self._battery_percentage

    @battery_percentage.setter
    def battery_percentage(self, battery_percentage):
        """Sets the battery_percentage of this GetStatus.

        The current charge percentage of the battery  # noqa: E501

        :param battery_percentage: The battery_percentage of this GetStatus.  # noqa: E501
        :type: float
        """

        self._battery_percentage = battery_percentage

    @property
    def moved(self):
        """Gets the moved of this GetStatus.  # noqa: E501

          # noqa: E501

        :return: The moved of this GetStatus.  # noqa: E501
        :rtype: float
        """
        return self._moved

    @moved.setter
    def moved(self, moved):
        """Sets the moved of this GetStatus.

          # noqa: E501

        :param moved: The moved of this GetStatus.  # noqa: E501
        :type: float
        """

        self._moved = moved

    @property
    def mission_queue_id(self):
        """Gets the mission_queue_id of this GetStatus.  # noqa: E501

        The id of the current job the robot executes  # noqa: E501

        :return: The mission_queue_id of this GetStatus.  # noqa: E501
        :rtype: int
        """
        return self._mission_queue_id

    @mission_queue_id.setter
    def mission_queue_id(self, mission_queue_id):
        """Sets the mission_queue_id of this GetStatus.

        The id of the current job the robot executes  # noqa: E501

        :param mission_queue_id: The mission_queue_id of this GetStatus.  # noqa: E501
        :type: int
        """

        self._mission_queue_id = mission_queue_id

    @property
    def mission_queue_url(self):
        """Gets the mission_queue_url of this GetStatus.  # noqa: E501

        The url to the active mission in queue  # noqa: E501

        :return: The mission_queue_url of this GetStatus.  # noqa: E501
        :rtype: str
        """
        return self._mission_queue_url

    @mission_queue_url.setter
    def mission_queue_url(self, mission_queue_url):
        """Sets the mission_queue_url of this GetStatus.

        The url to the active mission in queue  # noqa: E501

        :param mission_queue_url: The mission_queue_url of this GetStatus.  # noqa: E501
        :type: str
        """

        self._mission_queue_url = mission_queue_url

    @property
    def mission_text(self):
        """Gets the mission_text of this GetStatus.  # noqa: E501

        Status message from mission controller  # noqa: E501

        :return: The mission_text of this GetStatus.  # noqa: E501
        :rtype: str
        """
        return self._mission_text

    @mission_text.setter
    def mission_text(self, mission_text):
        """Sets the mission_text of this GetStatus.

        Status message from mission controller  # noqa: E501

        :param mission_text: The mission_text of this GetStatus.  # noqa: E501
        :type: str
        """

        self._mission_text = mission_text

    @property
    def distance_to_next_target(self):
        """Gets the distance_to_next_target of this GetStatus.  # noqa: E501

        The distance to the next target of the robot  # noqa: E501

        :return: The distance_to_next_target of this GetStatus.  # noqa: E501
        :rtype: float
        """
        return self._distance_to_next_target

    @distance_to_next_target.setter
    def distance_to_next_target(self, distance_to_next_target):
        """Sets the distance_to_next_target of this GetStatus.

        The distance to the next target of the robot  # noqa: E501

        :param distance_to_next_target: The distance_to_next_target of this GetStatus.  # noqa: E501
        :type: float
        """

        self._distance_to_next_target = distance_to_next_target

    @property
    def robot_name(self):
        """Gets the robot_name of this GetStatus.  # noqa: E501

        The name of the robot  # noqa: E501

        :return: The robot_name of this GetStatus.  # noqa: E501
        :rtype: str
        """
        return self._robot_name

    @robot_name.setter
    def robot_name(self, robot_name):
        """Sets the robot_name of this GetStatus.

        The name of the robot  # noqa: E501

        :param robot_name: The robot_name of this GetStatus.  # noqa: E501
        :type: str
        """

        self._robot_name = robot_name

    @property
    def robot_model(self):
        """Gets the robot_model of this GetStatus.  # noqa: E501

        The model of the robot  # noqa: E501

        :return: The robot_model of this GetStatus.  # noqa: E501
        :rtype: str
        """
        return self._robot_model

    @robot_model.setter
    def robot_model(self, robot_model):
        """Sets the robot_model of this GetStatus.

        The model of the robot  # noqa: E501

        :param robot_model: The robot_model of this GetStatus.  # noqa: E501
        :type: str
        """

        self._robot_model = robot_model

    @property
    def serial_number(self):
        """Gets the serial_number of this GetStatus.  # noqa: E501

        The model of the robot  # noqa: E501

        :return: The serial_number of this GetStatus.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this GetStatus.

        The model of the robot  # noqa: E501

        :param serial_number: The serial_number of this GetStatus.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def session_id(self):
        """Gets the session_id of this GetStatus.  # noqa: E501

        The id of the session the robot recides in  # noqa: E501

        :return: The session_id of this GetStatus.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this GetStatus.

        The id of the session the robot recides in  # noqa: E501

        :param session_id: The session_id of this GetStatus.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def state_id(self):
        """Gets the state_id of this GetStatus.  # noqa: E501

        The id of the current state of the robot  # noqa: E501

        :return: The state_id of this GetStatus.  # noqa: E501
        :rtype: int
        """
        return self._state_id

    @state_id.setter
    def state_id(self, state_id):
        """Sets the state_id of this GetStatus.

        The id of the current state of the robot  # noqa: E501

        :param state_id: The state_id of this GetStatus.  # noqa: E501
        :type: int
        """

        self._state_id = state_id

    @property
    def state_text(self):
        """Gets the state_text of this GetStatus.  # noqa: E501

        A textual description of the current state of the robot  # noqa: E501

        :return: The state_text of this GetStatus.  # noqa: E501
        :rtype: str
        """
        return self._state_text

    @state_text.setter
    def state_text(self, state_text):
        """Sets the state_text of this GetStatus.

        A textual description of the current state of the robot  # noqa: E501

        :param state_text: The state_text of this GetStatus.  # noqa: E501
        :type: str
        """

        self._state_text = state_text

    @property
    def mode_id(self):
        """Gets the mode_id of this GetStatus.  # noqa: E501

        The id of the current mode of the robot  # noqa: E501

        :return: The mode_id of this GetStatus.  # noqa: E501
        :rtype: int
        """
        return self._mode_id

    @mode_id.setter
    def mode_id(self, mode_id):
        """Sets the mode_id of this GetStatus.

        The id of the current mode of the robot  # noqa: E501

        :param mode_id: The mode_id of this GetStatus.  # noqa: E501
        :type: int
        """

        self._mode_id = mode_id

    @property
    def mode_text(self):
        """Gets the mode_text of this GetStatus.  # noqa: E501

        A textual description of the current state of the robot  # noqa: E501

        :return: The mode_text of this GetStatus.  # noqa: E501
        :rtype: str
        """
        return self._mode_text

    @mode_text.setter
    def mode_text(self, mode_text):
        """Sets the mode_text of this GetStatus.

        A textual description of the current state of the robot  # noqa: E501

        :param mode_text: The mode_text of this GetStatus.  # noqa: E501
        :type: str
        """

        self._mode_text = mode_text

    @property
    def joystick_web_session_id(self):
        """Gets the joystick_web_session_id of this GetStatus.  # noqa: E501

        The id of the web user that has control over the joystick  # noqa: E501

        :return: The joystick_web_session_id of this GetStatus.  # noqa: E501
        :rtype: str
        """
        return self._joystick_web_session_id

    @joystick_web_session_id.setter
    def joystick_web_session_id(self, joystick_web_session_id):
        """Sets the joystick_web_session_id of this GetStatus.

        The id of the web user that has control over the joystick  # noqa: E501

        :param joystick_web_session_id: The joystick_web_session_id of this GetStatus.  # noqa: E501
        :type: str
        """

        self._joystick_web_session_id = joystick_web_session_id

    @property
    def map_id(self):
        """Gets the map_id of this GetStatus.  # noqa: E501

        The id of the current map the robot recides in  # noqa: E501

        :return: The map_id of this GetStatus.  # noqa: E501
        :rtype: str
        """
        return self._map_id

    @map_id.setter
    def map_id(self, map_id):
        """Sets the map_id of this GetStatus.

        The id of the current map the robot recides in  # noqa: E501

        :param map_id: The map_id of this GetStatus.  # noqa: E501
        :type: str
        """

        self._map_id = map_id

    @property
    def unloaded_map_changes(self):
        """Gets the unloaded_map_changes of this GetStatus.  # noqa: E501

          # noqa: E501

        :return: The unloaded_map_changes of this GetStatus.  # noqa: E501
        :rtype: bool
        """
        return self._unloaded_map_changes

    @unloaded_map_changes.setter
    def unloaded_map_changes(self, unloaded_map_changes):
        """Sets the unloaded_map_changes of this GetStatus.

          # noqa: E501

        :param unloaded_map_changes: The unloaded_map_changes of this GetStatus.  # noqa: E501
        :type: bool
        """

        self._unloaded_map_changes = unloaded_map_changes

    @property
    def safety_system_muted(self):
        """Gets the safety_system_muted of this GetStatus.  # noqa: E501

          # noqa: E501

        :return: The safety_system_muted of this GetStatus.  # noqa: E501
        :rtype: bool
        """
        return self._safety_system_muted

    @safety_system_muted.setter
    def safety_system_muted(self, safety_system_muted):
        """Sets the safety_system_muted of this GetStatus.

          # noqa: E501

        :param safety_system_muted: The safety_system_muted of this GetStatus.  # noqa: E501
        :type: bool
        """

        self._safety_system_muted = safety_system_muted

    @property
    def joystick_low_speed_mode_enabled(self):
        """Gets the joystick_low_speed_mode_enabled of this GetStatus.  # noqa: E501

          # noqa: E501

        :return: The joystick_low_speed_mode_enabled of this GetStatus.  # noqa: E501
        :rtype: bool
        """
        return self._joystick_low_speed_mode_enabled

    @joystick_low_speed_mode_enabled.setter
    def joystick_low_speed_mode_enabled(self, joystick_low_speed_mode_enabled):
        """Sets the joystick_low_speed_mode_enabled of this GetStatus.

          # noqa: E501

        :param joystick_low_speed_mode_enabled: The joystick_low_speed_mode_enabled of this GetStatus.  # noqa: E501
        :type: bool
        """

        self._joystick_low_speed_mode_enabled = joystick_low_speed_mode_enabled

    @property
    def mode_key_state(self):
        """Gets the mode_key_state of this GetStatus.  # noqa: E501

        A textual description of the position of the mode key  # noqa: E501

        :return: The mode_key_state of this GetStatus.  # noqa: E501
        :rtype: str
        """
        return self._mode_key_state

    @mode_key_state.setter
    def mode_key_state(self, mode_key_state):
        """Sets the mode_key_state of this GetStatus.

        A textual description of the position of the mode key  # noqa: E501

        :param mode_key_state: The mode_key_state of this GetStatus.  # noqa: E501
        :type: str
        """

        self._mode_key_state = mode_key_state

    @property
    def uptime(self):
        """Gets the uptime of this GetStatus.  # noqa: E501

        The uptime of the robot  # noqa: E501

        :return: The uptime of this GetStatus.  # noqa: E501
        :rtype: int
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this GetStatus.

        The uptime of the robot  # noqa: E501

        :param uptime: The uptime of this GetStatus.  # noqa: E501
        :type: int
        """

        self._uptime = uptime

    @property
    def errors(self):
        """Gets the errors of this GetStatus.  # noqa: E501

        The list of actions executed as part of the mission  # noqa: E501

        :return: The errors of this GetStatus.  # noqa: E501
        :rtype: list[GetStatusErrors]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this GetStatus.

        The list of actions executed as part of the mission  # noqa: E501

        :param errors: The errors of this GetStatus.  # noqa: E501
        :type: list[GetStatusErrors]
        """

        self._errors = errors

    @property
    def footprint(self):
        """Gets the footprint of this GetStatus.  # noqa: E501

        The current footprint of the robot  # noqa: E501

        :return: The footprint of this GetStatus.  # noqa: E501
        :rtype: str
        """
        return self._footprint

    @footprint.setter
    def footprint(self, footprint):
        """Sets the footprint of this GetStatus.

        The current footprint of the robot  # noqa: E501

        :param footprint: The footprint of this GetStatus.  # noqa: E501
        :type: str
        """

        self._footprint = footprint

    @property
    def hook_status(self):
        """Gets the hook_status of this GetStatus.  # noqa: E501


        :return: The hook_status of this GetStatus.  # noqa: E501
        :rtype: GetStatusHookStatus
        """
        return self._hook_status

    @hook_status.setter
    def hook_status(self, hook_status):
        """Sets the hook_status of this GetStatus.


        :param hook_status: The hook_status of this GetStatus.  # noqa: E501
        :type: GetStatusHookStatus
        """

        self._hook_status = hook_status

    @property
    def hook_data(self):
        """Gets the hook_data of this GetStatus.  # noqa: E501


        :return: The hook_data of this GetStatus.  # noqa: E501
        :rtype: GetStatusHookData
        """
        return self._hook_data

    @hook_data.setter
    def hook_data(self, hook_data):
        """Sets the hook_data of this GetStatus.


        :param hook_data: The hook_data of this GetStatus.  # noqa: E501
        :type: GetStatusHookData
        """

        self._hook_data = hook_data

    @property
    def user_prompt(self):
        """Gets the user_prompt of this GetStatus.  # noqa: E501


        :return: The user_prompt of this GetStatus.  # noqa: E501
        :rtype: GetStatusUserPrompt
        """
        return self._user_prompt

    @user_prompt.setter
    def user_prompt(self, user_prompt):
        """Sets the user_prompt of this GetStatus.


        :param user_prompt: The user_prompt of this GetStatus.  # noqa: E501
        :type: GetStatusUserPrompt
        """

        self._user_prompt = user_prompt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetStatus):
            return True

        return self.to_dict() != other.to_dict()
