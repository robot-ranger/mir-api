# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class GetErrorReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'ready': 'bool',
        'module': 'str',
        'description': 'str',
        'time': 'datetime',
        'download_url': 'str',
        'generating': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'ready': 'ready',
        'module': 'module',
        'description': 'description',
        'time': 'time',
        'download_url': 'download_url',
        'generating': 'generating'
    }

    def __init__(self, id=None, ready=None, module=None, description=None, time=None, download_url=None, generating=None, _configuration=None):  # noqa: E501
        """GetErrorReport - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._ready = None
        self._module = None
        self._description = None
        self._time = None
        self._download_url = None
        self._generating = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if ready is not None:
            self.ready = ready
        if module is not None:
            self.module = module
        if description is not None:
            self.description = description
        if time is not None:
            self.time = time
        if download_url is not None:
            self.download_url = download_url
        if generating is not None:
            self.generating = generating

    @property
    def id(self):
        """Gets the id of this GetErrorReport.  # noqa: E501

        Id of the autobag  # noqa: E501

        :return: The id of this GetErrorReport.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetErrorReport.

        Id of the autobag  # noqa: E501

        :param id: The id of this GetErrorReport.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def ready(self):
        """Gets the ready of this GetErrorReport.  # noqa: E501

        Status of the rosbag  # noqa: E501

        :return: The ready of this GetErrorReport.  # noqa: E501
        :rtype: bool
        """
        return self._ready

    @ready.setter
    def ready(self, ready):
        """Sets the ready of this GetErrorReport.

        Status of the rosbag  # noqa: E501

        :param ready: The ready of this GetErrorReport.  # noqa: E501
        :type: bool
        """

        self._ready = ready

    @property
    def module(self):
        """Gets the module of this GetErrorReport.  # noqa: E501

        The module that created the autolog  # noqa: E501

        :return: The module of this GetErrorReport.  # noqa: E501
        :rtype: str
        """
        return self._module

    @module.setter
    def module(self, module):
        """Sets the module of this GetErrorReport.

        The module that created the autolog  # noqa: E501

        :param module: The module of this GetErrorReport.  # noqa: E501
        :type: str
        """

        self._module = module

    @property
    def description(self):
        """Gets the description of this GetErrorReport.  # noqa: E501

          # noqa: E501

        :return: The description of this GetErrorReport.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetErrorReport.

          # noqa: E501

        :param description: The description of this GetErrorReport.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def time(self):
        """Gets the time of this GetErrorReport.  # noqa: E501

        The time where the autolog was created  # noqa: E501

        :return: The time of this GetErrorReport.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this GetErrorReport.

        The time where the autolog was created  # noqa: E501

        :param time: The time of this GetErrorReport.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def download_url(self):
        """Gets the download_url of this GetErrorReport.  # noqa: E501

        The url from where the bag can be downloaded  # noqa: E501

        :return: The download_url of this GetErrorReport.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this GetErrorReport.

        The url from where the bag can be downloaded  # noqa: E501

        :param download_url: The download_url of this GetErrorReport.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def generating(self):
        """Gets the generating of this GetErrorReport.  # noqa: E501

        Indicates whether the error log creation is running or not  # noqa: E501

        :return: The generating of this GetErrorReport.  # noqa: E501
        :rtype: bool
        """
        return self._generating

    @generating.setter
    def generating(self, generating):
        """Sets the generating of this GetErrorReport.

        Indicates whether the error log creation is running or not  # noqa: E501

        :param generating: The generating of this GetErrorReport.  # noqa: E501
        :type: bool
        """

        self._generating = generating

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetErrorReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetErrorReport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetErrorReport):
            return True

        return self.to_dict() != other.to_dict()
