# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class GetMissionQueueAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'mission_queue_id': 'int',
        'action_id': 'str',
        'state': 'str',
        'message': 'str',
        'action_type': 'str',
        'started': 'datetime',
        'finished': 'datetime',
        'parameters': 'list[object]'
    }

    attribute_map = {
        'id': 'id',
        'mission_queue_id': 'mission_queue_id',
        'action_id': 'action_id',
        'state': 'state',
        'message': 'message',
        'action_type': 'action_type',
        'started': 'started',
        'finished': 'finished',
        'parameters': 'parameters'
    }

    def __init__(self, id=None, mission_queue_id=None, action_id=None, state=None, message=None, action_type=None, started=None, finished=None, parameters=None, _configuration=None):  # noqa: E501
        """GetMissionQueueAction - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._mission_queue_id = None
        self._action_id = None
        self._state = None
        self._message = None
        self._action_type = None
        self._started = None
        self._finished = None
        self._parameters = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if mission_queue_id is not None:
            self.mission_queue_id = mission_queue_id
        if action_id is not None:
            self.action_id = action_id
        if state is not None:
            self.state = state
        if message is not None:
            self.message = message
        if action_type is not None:
            self.action_type = action_type
        if started is not None:
            self.started = started
        if finished is not None:
            self.finished = finished
        if parameters is not None:
            self.parameters = parameters

    @property
    def id(self):
        """Gets the id of this GetMissionQueueAction.  # noqa: E501

        The id of the action  # noqa: E501

        :return: The id of this GetMissionQueueAction.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetMissionQueueAction.

        The id of the action  # noqa: E501

        :param id: The id of this GetMissionQueueAction.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def mission_queue_id(self):
        """Gets the mission_queue_id of this GetMissionQueueAction.  # noqa: E501

        The id of the action  # noqa: E501

        :return: The mission_queue_id of this GetMissionQueueAction.  # noqa: E501
        :rtype: int
        """
        return self._mission_queue_id

    @mission_queue_id.setter
    def mission_queue_id(self, mission_queue_id):
        """Sets the mission_queue_id of this GetMissionQueueAction.

        The id of the action  # noqa: E501

        :param mission_queue_id: The mission_queue_id of this GetMissionQueueAction.  # noqa: E501
        :type: int
        """

        self._mission_queue_id = mission_queue_id

    @property
    def action_id(self):
        """Gets the action_id of this GetMissionQueueAction.  # noqa: E501

        The id of the action  # noqa: E501

        :return: The action_id of this GetMissionQueueAction.  # noqa: E501
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this GetMissionQueueAction.

        The id of the action  # noqa: E501

        :param action_id: The action_id of this GetMissionQueueAction.  # noqa: E501
        :type: str
        """

        self._action_id = action_id

    @property
    def state(self):
        """Gets the state of this GetMissionQueueAction.  # noqa: E501

        The end state after executing the action  # noqa: E501

        :return: The state of this GetMissionQueueAction.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GetMissionQueueAction.

        The end state after executing the action  # noqa: E501

        :param state: The state of this GetMissionQueueAction.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def message(self):
        """Gets the message of this GetMissionQueueAction.  # noqa: E501

        The possible message produced by the action  # noqa: E501

        :return: The message of this GetMissionQueueAction.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GetMissionQueueAction.

        The possible message produced by the action  # noqa: E501

        :param message: The message of this GetMissionQueueAction.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def action_type(self):
        """Gets the action_type of this GetMissionQueueAction.  # noqa: E501

        The name of the action  # noqa: E501

        :return: The action_type of this GetMissionQueueAction.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this GetMissionQueueAction.

        The name of the action  # noqa: E501

        :param action_type: The action_type of this GetMissionQueueAction.  # noqa: E501
        :type: str
        """

        self._action_type = action_type

    @property
    def started(self):
        """Gets the started of this GetMissionQueueAction.  # noqa: E501

        The date and time when the action was started  # noqa: E501

        :return: The started of this GetMissionQueueAction.  # noqa: E501
        :rtype: datetime
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this GetMissionQueueAction.

        The date and time when the action was started  # noqa: E501

        :param started: The started of this GetMissionQueueAction.  # noqa: E501
        :type: datetime
        """

        self._started = started

    @property
    def finished(self):
        """Gets the finished of this GetMissionQueueAction.  # noqa: E501

        The date and time when the action finished  # noqa: E501

        :return: The finished of this GetMissionQueueAction.  # noqa: E501
        :rtype: datetime
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this GetMissionQueueAction.

        The date and time when the action finished  # noqa: E501

        :param finished: The finished of this GetMissionQueueAction.  # noqa: E501
        :type: datetime
        """

        self._finished = finished

    @property
    def parameters(self):
        """Gets the parameters of this GetMissionQueueAction.  # noqa: E501

        The list of parameters to the action  # noqa: E501

        :return: The parameters of this GetMissionQueueAction.  # noqa: E501
        :rtype: list[object]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this GetMissionQueueAction.

        The list of parameters to the action  # noqa: E501

        :param parameters: The parameters of this GetMissionQueueAction.  # noqa: E501
        :type: list[object]
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetMissionQueueAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetMissionQueueAction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetMissionQueueAction):
            return True

        return self.to_dict() != other.to_dict()
