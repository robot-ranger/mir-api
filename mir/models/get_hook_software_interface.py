# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class GetHookSoftwareInterface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hook_interface_state': 'str',
        'hook_interface_state_code': 'int',
        'hook_is_upgradeable': 'bool',
        'hook_is_upgrading': 'bool',
        'uploading_software_to_hook': 'bool',
        'hook_software_matches_robot': 'bool',
        'hook_software_version': 'str',
        'hook_software_newer_than_robot': 'bool',
        'software_file_missing': 'bool'
    }

    attribute_map = {
        'hook_interface_state': 'hook_interface_state',
        'hook_interface_state_code': 'hook_interface_state_code',
        'hook_is_upgradeable': 'hook_is_upgradeable',
        'hook_is_upgrading': 'hook_is_upgrading',
        'uploading_software_to_hook': 'uploading_software_to_hook',
        'hook_software_matches_robot': 'hook_software_matches_robot',
        'hook_software_version': 'hook_software_version',
        'hook_software_newer_than_robot': 'hook_software_newer_than_robot',
        'software_file_missing': 'software_file_missing'
    }

    def __init__(self, hook_interface_state=None, hook_interface_state_code=None, hook_is_upgradeable=None, hook_is_upgrading=None, uploading_software_to_hook=None, hook_software_matches_robot=None, hook_software_version=None, hook_software_newer_than_robot=None, software_file_missing=None, _configuration=None):  # noqa: E501
        """GetHookSoftwareInterface - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._hook_interface_state = None
        self._hook_interface_state_code = None
        self._hook_is_upgradeable = None
        self._hook_is_upgrading = None
        self._uploading_software_to_hook = None
        self._hook_software_matches_robot = None
        self._hook_software_version = None
        self._hook_software_newer_than_robot = None
        self._software_file_missing = None
        self.discriminator = None

        if hook_interface_state is not None:
            self.hook_interface_state = hook_interface_state
        if hook_interface_state_code is not None:
            self.hook_interface_state_code = hook_interface_state_code
        if hook_is_upgradeable is not None:
            self.hook_is_upgradeable = hook_is_upgradeable
        if hook_is_upgrading is not None:
            self.hook_is_upgrading = hook_is_upgrading
        if uploading_software_to_hook is not None:
            self.uploading_software_to_hook = uploading_software_to_hook
        if hook_software_matches_robot is not None:
            self.hook_software_matches_robot = hook_software_matches_robot
        if hook_software_version is not None:
            self.hook_software_version = hook_software_version
        if hook_software_newer_than_robot is not None:
            self.hook_software_newer_than_robot = hook_software_newer_than_robot
        if software_file_missing is not None:
            self.software_file_missing = software_file_missing

    @property
    def hook_interface_state(self):
        """Gets the hook_interface_state of this GetHookSoftwareInterface.  # noqa: E501

        Hook interface state  # noqa: E501

        :return: The hook_interface_state of this GetHookSoftwareInterface.  # noqa: E501
        :rtype: str
        """
        return self._hook_interface_state

    @hook_interface_state.setter
    def hook_interface_state(self, hook_interface_state):
        """Sets the hook_interface_state of this GetHookSoftwareInterface.

        Hook interface state  # noqa: E501

        :param hook_interface_state: The hook_interface_state of this GetHookSoftwareInterface.  # noqa: E501
        :type: str
        """

        self._hook_interface_state = hook_interface_state

    @property
    def hook_interface_state_code(self):
        """Gets the hook_interface_state_code of this GetHookSoftwareInterface.  # noqa: E501

        Hook interface state  # noqa: E501

        :return: The hook_interface_state_code of this GetHookSoftwareInterface.  # noqa: E501
        :rtype: int
        """
        return self._hook_interface_state_code

    @hook_interface_state_code.setter
    def hook_interface_state_code(self, hook_interface_state_code):
        """Sets the hook_interface_state_code of this GetHookSoftwareInterface.

        Hook interface state  # noqa: E501

        :param hook_interface_state_code: The hook_interface_state_code of this GetHookSoftwareInterface.  # noqa: E501
        :type: int
        """

        self._hook_interface_state_code = hook_interface_state_code

    @property
    def hook_is_upgradeable(self):
        """Gets the hook_is_upgradeable of this GetHookSoftwareInterface.  # noqa: E501

        Wheater the hook is ready to be upgraded  # noqa: E501

        :return: The hook_is_upgradeable of this GetHookSoftwareInterface.  # noqa: E501
        :rtype: bool
        """
        return self._hook_is_upgradeable

    @hook_is_upgradeable.setter
    def hook_is_upgradeable(self, hook_is_upgradeable):
        """Sets the hook_is_upgradeable of this GetHookSoftwareInterface.

        Wheater the hook is ready to be upgraded  # noqa: E501

        :param hook_is_upgradeable: The hook_is_upgradeable of this GetHookSoftwareInterface.  # noqa: E501
        :type: bool
        """

        self._hook_is_upgradeable = hook_is_upgradeable

    @property
    def hook_is_upgrading(self):
        """Gets the hook_is_upgrading of this GetHookSoftwareInterface.  # noqa: E501

        Wheater the hook is upgrading now  # noqa: E501

        :return: The hook_is_upgrading of this GetHookSoftwareInterface.  # noqa: E501
        :rtype: bool
        """
        return self._hook_is_upgrading

    @hook_is_upgrading.setter
    def hook_is_upgrading(self, hook_is_upgrading):
        """Sets the hook_is_upgrading of this GetHookSoftwareInterface.

        Wheater the hook is upgrading now  # noqa: E501

        :param hook_is_upgrading: The hook_is_upgrading of this GetHookSoftwareInterface.  # noqa: E501
        :type: bool
        """

        self._hook_is_upgrading = hook_is_upgrading

    @property
    def uploading_software_to_hook(self):
        """Gets the uploading_software_to_hook of this GetHookSoftwareInterface.  # noqa: E501

        Wheater we are currently uploading software to hook  # noqa: E501

        :return: The uploading_software_to_hook of this GetHookSoftwareInterface.  # noqa: E501
        :rtype: bool
        """
        return self._uploading_software_to_hook

    @uploading_software_to_hook.setter
    def uploading_software_to_hook(self, uploading_software_to_hook):
        """Sets the uploading_software_to_hook of this GetHookSoftwareInterface.

        Wheater we are currently uploading software to hook  # noqa: E501

        :param uploading_software_to_hook: The uploading_software_to_hook of this GetHookSoftwareInterface.  # noqa: E501
        :type: bool
        """

        self._uploading_software_to_hook = uploading_software_to_hook

    @property
    def hook_software_matches_robot(self):
        """Gets the hook_software_matches_robot of this GetHookSoftwareInterface.  # noqa: E501

        Wheter the hook software version matches the robot version  # noqa: E501

        :return: The hook_software_matches_robot of this GetHookSoftwareInterface.  # noqa: E501
        :rtype: bool
        """
        return self._hook_software_matches_robot

    @hook_software_matches_robot.setter
    def hook_software_matches_robot(self, hook_software_matches_robot):
        """Sets the hook_software_matches_robot of this GetHookSoftwareInterface.

        Wheter the hook software version matches the robot version  # noqa: E501

        :param hook_software_matches_robot: The hook_software_matches_robot of this GetHookSoftwareInterface.  # noqa: E501
        :type: bool
        """

        self._hook_software_matches_robot = hook_software_matches_robot

    @property
    def hook_software_version(self):
        """Gets the hook_software_version of this GetHookSoftwareInterface.  # noqa: E501

        Hook software version  # noqa: E501

        :return: The hook_software_version of this GetHookSoftwareInterface.  # noqa: E501
        :rtype: str
        """
        return self._hook_software_version

    @hook_software_version.setter
    def hook_software_version(self, hook_software_version):
        """Sets the hook_software_version of this GetHookSoftwareInterface.

        Hook software version  # noqa: E501

        :param hook_software_version: The hook_software_version of this GetHookSoftwareInterface.  # noqa: E501
        :type: str
        """

        self._hook_software_version = hook_software_version

    @property
    def hook_software_newer_than_robot(self):
        """Gets the hook_software_newer_than_robot of this GetHookSoftwareInterface.  # noqa: E501

        Whether hook software version is newer than robot version  # noqa: E501

        :return: The hook_software_newer_than_robot of this GetHookSoftwareInterface.  # noqa: E501
        :rtype: bool
        """
        return self._hook_software_newer_than_robot

    @hook_software_newer_than_robot.setter
    def hook_software_newer_than_robot(self, hook_software_newer_than_robot):
        """Sets the hook_software_newer_than_robot of this GetHookSoftwareInterface.

        Whether hook software version is newer than robot version  # noqa: E501

        :param hook_software_newer_than_robot: The hook_software_newer_than_robot of this GetHookSoftwareInterface.  # noqa: E501
        :type: bool
        """

        self._hook_software_newer_than_robot = hook_software_newer_than_robot

    @property
    def software_file_missing(self):
        """Gets the software_file_missing of this GetHookSoftwareInterface.  # noqa: E501

        Original software file not found.  # noqa: E501

        :return: The software_file_missing of this GetHookSoftwareInterface.  # noqa: E501
        :rtype: bool
        """
        return self._software_file_missing

    @software_file_missing.setter
    def software_file_missing(self, software_file_missing):
        """Sets the software_file_missing of this GetHookSoftwareInterface.

        Original software file not found.  # noqa: E501

        :param software_file_missing: The software_file_missing of this GetHookSoftwareInterface.  # noqa: E501
        :type: bool
        """

        self._software_file_missing = software_file_missing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetHookSoftwareInterface, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetHookSoftwareInterface):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetHookSoftwareInterface):
            return True

        return self.to_dict() != other.to_dict()
