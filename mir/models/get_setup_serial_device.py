# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class GetSetupSerialDevice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'ros_name': 'str',
        'description': 'str',
        'value': 'str',
        'default_value': 'str',
        'request_succeeded': 'bool',
        'url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'ros_name': 'ros_name',
        'description': 'description',
        'value': 'value',
        'default_value': 'default_value',
        'request_succeeded': 'request_succeeded',
        'url': 'url'
    }

    def __init__(self, id=None, name=None, ros_name=None, description=None, value=None, default_value=None, request_succeeded=None, url=None, _configuration=None):  # noqa: E501
        """GetSetupSerialDevice - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._ros_name = None
        self._description = None
        self._value = None
        self._default_value = None
        self._request_succeeded = None
        self._url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if ros_name is not None:
            self.ros_name = ros_name
        if description is not None:
            self.description = description
        if value is not None:
            self.value = value
        if default_value is not None:
            self.default_value = default_value
        if request_succeeded is not None:
            self.request_succeeded = request_succeeded
        if url is not None:
            self.url = url

    @property
    def id(self):
        """Gets the id of this GetSetupSerialDevice.  # noqa: E501

          # noqa: E501

        :return: The id of this GetSetupSerialDevice.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetSetupSerialDevice.

          # noqa: E501

        :param id: The id of this GetSetupSerialDevice.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this GetSetupSerialDevice.  # noqa: E501

          # noqa: E501

        :return: The name of this GetSetupSerialDevice.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetSetupSerialDevice.

          # noqa: E501

        :param name: The name of this GetSetupSerialDevice.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ros_name(self):
        """Gets the ros_name of this GetSetupSerialDevice.  # noqa: E501

          # noqa: E501

        :return: The ros_name of this GetSetupSerialDevice.  # noqa: E501
        :rtype: str
        """
        return self._ros_name

    @ros_name.setter
    def ros_name(self, ros_name):
        """Sets the ros_name of this GetSetupSerialDevice.

          # noqa: E501

        :param ros_name: The ros_name of this GetSetupSerialDevice.  # noqa: E501
        :type: str
        """

        self._ros_name = ros_name

    @property
    def description(self):
        """Gets the description of this GetSetupSerialDevice.  # noqa: E501

          # noqa: E501

        :return: The description of this GetSetupSerialDevice.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetSetupSerialDevice.

          # noqa: E501

        :param description: The description of this GetSetupSerialDevice.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def value(self):
        """Gets the value of this GetSetupSerialDevice.  # noqa: E501

          # noqa: E501

        :return: The value of this GetSetupSerialDevice.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GetSetupSerialDevice.

          # noqa: E501

        :param value: The value of this GetSetupSerialDevice.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def default_value(self):
        """Gets the default_value of this GetSetupSerialDevice.  # noqa: E501

          # noqa: E501

        :return: The default_value of this GetSetupSerialDevice.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this GetSetupSerialDevice.

          # noqa: E501

        :param default_value: The default_value of this GetSetupSerialDevice.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def request_succeeded(self):
        """Gets the request_succeeded of this GetSetupSerialDevice.  # noqa: E501

          # noqa: E501

        :return: The request_succeeded of this GetSetupSerialDevice.  # noqa: E501
        :rtype: bool
        """
        return self._request_succeeded

    @request_succeeded.setter
    def request_succeeded(self, request_succeeded):
        """Sets the request_succeeded of this GetSetupSerialDevice.

          # noqa: E501

        :param request_succeeded: The request_succeeded of this GetSetupSerialDevice.  # noqa: E501
        :type: bool
        """

        self._request_succeeded = request_succeeded

    @property
    def url(self):
        """Gets the url of this GetSetupSerialDevice.  # noqa: E501

        Specific serial device information  # noqa: E501

        :return: The url of this GetSetupSerialDevice.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GetSetupSerialDevice.

        Specific serial device information  # noqa: E501

        :param url: The url of this GetSetupSerialDevice.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSetupSerialDevice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSetupSerialDevice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetSetupSerialDevice):
            return True

        return self.to_dict() != other.to_dict()
