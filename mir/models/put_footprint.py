# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mir.configuration import Configuration


class PutFootprint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'height': 'float',
        'footprint_points': 'str',
        'config_id': 'str',
        'hook': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'height': 'height',
        'footprint_points': 'footprint_points',
        'config_id': 'config_id',
        'hook': 'hook'
    }

    def __init__(self, name=None, height=None, footprint_points=None, config_id=None, hook=None, _configuration=None):  # noqa: E501
        """PutFootprint - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._height = None
        self._footprint_points = None
        self._config_id = None
        self._hook = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if height is not None:
            self.height = height
        if footprint_points is not None:
            self.footprint_points = footprint_points
        if config_id is not None:
            self.config_id = config_id
        if hook is not None:
            self.hook = hook

    @property
    def name(self):
        """Gets the name of this PutFootprint.  # noqa: E501

        Min length: 1, Max length: 255  # noqa: E501

        :return: The name of this PutFootprint.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PutFootprint.

        Min length: 1, Max length: 255  # noqa: E501

        :param name: The name of this PutFootprint.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def height(self):
        """Gets the height of this PutFootprint.  # noqa: E501


        :return: The height of this PutFootprint.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this PutFootprint.


        :param height: The height of this PutFootprint.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def footprint_points(self):
        """Gets the footprint_points of this PutFootprint.  # noqa: E501

          # noqa: E501

        :return: The footprint_points of this PutFootprint.  # noqa: E501
        :rtype: str
        """
        return self._footprint_points

    @footprint_points.setter
    def footprint_points(self, footprint_points):
        """Sets the footprint_points of this PutFootprint.

          # noqa: E501

        :param footprint_points: The footprint_points of this PutFootprint.  # noqa: E501
        :type: str
        """

        self._footprint_points = footprint_points

    @property
    def config_id(self):
        """Gets the config_id of this PutFootprint.  # noqa: E501

        Choices are: {\"MIR500-1000\", \"MIR600-1350\", \"MIR100-200\", \"MIR250\", \"MIR125\", \"UNKNOWN\"}  # noqa: E501

        :return: The config_id of this PutFootprint.  # noqa: E501
        :rtype: str
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this PutFootprint.

        Choices are: {\"MIR500-1000\", \"MIR600-1350\", \"MIR100-200\", \"MIR250\", \"MIR125\", \"UNKNOWN\"}  # noqa: E501

        :param config_id: The config_id of this PutFootprint.  # noqa: E501
        :type: str
        """

        self._config_id = config_id

    @property
    def hook(self):
        """Gets the hook of this PutFootprint.  # noqa: E501


        :return: The hook of this PutFootprint.  # noqa: E501
        :rtype: bool
        """
        return self._hook

    @hook.setter
    def hook(self, hook):
        """Sets the hook of this PutFootprint.


        :param hook: The hook of this PutFootprint.  # noqa: E501
        :type: bool
        """

        self._hook = hook

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PutFootprint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutFootprint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PutFootprint):
            return True

        return self.to_dict() != other.to_dict()
