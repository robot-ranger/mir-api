# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mir.api_client import ApiClient


class PathGuidesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def maps_map_id_path_guides_get(self, authorization, accept_language, map_id, **kwargs):  # noqa: E501
        """GET /maps/{map_id}/path_guides  # noqa: E501

        Retrieve the list of path guides that belong to the map with the specified map ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_map_id_path_guides_get(authorization, accept_language, map_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str map_id: The map_id to search for (required)
        :return: list[GetMapPathGuides]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_map_id_path_guides_get_with_http_info(authorization, accept_language, map_id, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_map_id_path_guides_get_with_http_info(authorization, accept_language, map_id, **kwargs)  # noqa: E501
            return data

    def maps_map_id_path_guides_get_with_http_info(self, authorization, accept_language, map_id, **kwargs):  # noqa: E501
        """GET /maps/{map_id}/path_guides  # noqa: E501

        Retrieve the list of path guides that belong to the map with the specified map ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_map_id_path_guides_get_with_http_info(authorization, accept_language, map_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str map_id: The map_id to search for (required)
        :return: list[GetMapPathGuides]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'map_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_map_id_path_guides_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `maps_map_id_path_guides_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `maps_map_id_path_guides_get`")  # noqa: E501
        # verify the required parameter 'map_id' is set
        if self.api_client.client_side_validation and ('map_id' not in params or
                                                       params['map_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `map_id` when calling `maps_map_id_path_guides_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'map_id' in params:
            path_params['map_id'] = params['map_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/maps/{map_id}/path_guides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetMapPathGuides]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_get(self, authorization, accept_language, **kwargs):  # noqa: E501
        """GET /path_guides  # noqa: E501

        Retrieve the list of path guides  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_get(authorization, accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :return: list[GetPathGuides]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_get_with_http_info(authorization, accept_language, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_get_with_http_info(authorization, accept_language, **kwargs)  # noqa: E501
            return data

    def path_guides_get_with_http_info(self, authorization, accept_language, **kwargs):  # noqa: E501
        """GET /path_guides  # noqa: E501

        Retrieve the list of path guides  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_get_with_http_info(authorization, accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :return: list[GetPathGuides]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `path_guides_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `path_guides_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/path_guides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetPathGuides]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_guid_delete(self, authorization, accept_language, guid, **kwargs):  # noqa: E501
        """DELETE /path_guides/{guid}  # noqa: E501

        Erase the path guide with the specified GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_guid_delete(authorization, accept_language, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str guid: The guid to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_guid_delete_with_http_info(authorization, accept_language, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_guid_delete_with_http_info(authorization, accept_language, guid, **kwargs)  # noqa: E501
            return data

    def path_guides_guid_delete_with_http_info(self, authorization, accept_language, guid, **kwargs):  # noqa: E501
        """DELETE /path_guides/{guid}  # noqa: E501

        Erase the path guide with the specified GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_guid_delete_with_http_info(authorization, accept_language, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str guid: The guid to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `path_guides_guid_delete`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `path_guides_guid_delete`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in params or
                                                       params['guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `guid` when calling `path_guides_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/path_guides/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_guid_get(self, authorization, accept_language, guid, **kwargs):  # noqa: E501
        """GET /path_guides/{guid}  # noqa: E501

        Retrieve the path guide with the specified GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_guid_get(authorization, accept_language, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str guid: The guid to search for (required)
        :return: GetPathGuide
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_guid_get_with_http_info(authorization, accept_language, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_guid_get_with_http_info(authorization, accept_language, guid, **kwargs)  # noqa: E501
            return data

    def path_guides_guid_get_with_http_info(self, authorization, accept_language, guid, **kwargs):  # noqa: E501
        """GET /path_guides/{guid}  # noqa: E501

        Retrieve the path guide with the specified GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_guid_get_with_http_info(authorization, accept_language, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str guid: The guid to search for (required)
        :return: GetPathGuide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `path_guides_guid_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `path_guides_guid_get`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in params or
                                                       params['guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `guid` when calling `path_guides_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/path_guides/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPathGuide',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_guid_put(self, authorization, accept_language, guid, path_guide, **kwargs):  # noqa: E501
        """PUT /path_guides/{guid}  # noqa: E501

        Modify the values of the path guide with the specified GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_guid_put(authorization, accept_language, guid, path_guide, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str guid: The guid to modify (required)
        :param PutPathGuide path_guide: The new values of the path_guide (required)
        :return: GetPathGuide
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_guid_put_with_http_info(authorization, accept_language, guid, path_guide, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_guid_put_with_http_info(authorization, accept_language, guid, path_guide, **kwargs)  # noqa: E501
            return data

    def path_guides_guid_put_with_http_info(self, authorization, accept_language, guid, path_guide, **kwargs):  # noqa: E501
        """PUT /path_guides/{guid}  # noqa: E501

        Modify the values of the path guide with the specified GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_guid_put_with_http_info(authorization, accept_language, guid, path_guide, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str guid: The guid to modify (required)
        :param PutPathGuide path_guide: The new values of the path_guide (required)
        :return: GetPathGuide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'guid', 'path_guide']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `path_guides_guid_put`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `path_guides_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in params or
                                                       params['guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `guid` when calling `path_guides_guid_put`")  # noqa: E501
        # verify the required parameter 'path_guide' is set
        if self.api_client.client_side_validation and ('path_guide' not in params or
                                                       params['path_guide'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `path_guide` when calling `path_guides_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'path_guide' in params:
            body_params = params['path_guide']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/path_guides/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPathGuide',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_path_guide_guid_options_get(self, authorization, accept_language, path_guide_guid, **kwargs):  # noqa: E501
        """GET /path_guides/{path_guide_guid}/options  # noqa: E501

        Retrieve the list of allowed start/via/goal options for the selected path guide  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_options_get(authorization, accept_language, path_guide_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str path_guide_guid: The path_guide_guid to search for (required)
        :return: GetPathGuideOptions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_path_guide_guid_options_get_with_http_info(authorization, accept_language, path_guide_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_path_guide_guid_options_get_with_http_info(authorization, accept_language, path_guide_guid, **kwargs)  # noqa: E501
            return data

    def path_guides_path_guide_guid_options_get_with_http_info(self, authorization, accept_language, path_guide_guid, **kwargs):  # noqa: E501
        """GET /path_guides/{path_guide_guid}/options  # noqa: E501

        Retrieve the list of allowed start/via/goal options for the selected path guide  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_options_get_with_http_info(authorization, accept_language, path_guide_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str path_guide_guid: The path_guide_guid to search for (required)
        :return: GetPathGuideOptions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'path_guide_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_path_guide_guid_options_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `path_guides_path_guide_guid_options_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `path_guides_path_guide_guid_options_get`")  # noqa: E501
        # verify the required parameter 'path_guide_guid' is set
        if self.api_client.client_side_validation and ('path_guide_guid' not in params or
                                                       params['path_guide_guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `path_guide_guid` when calling `path_guides_path_guide_guid_options_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path_guide_guid' in params:
            path_params['path_guide_guid'] = params['path_guide_guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/path_guides/{path_guide_guid}/options', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPathGuideOptions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_path_guide_guid_positions_get(self, authorization, accept_language, path_guide_guid, **kwargs):  # noqa: E501
        """GET /path_guides/{path_guide_guid}/positions  # noqa: E501

        Retrieve the list of positions for the path guide with the specified GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_positions_get(authorization, accept_language, path_guide_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str path_guide_guid: The path_guide_guid to search for (required)
        :return: list[GetPathGuidePositions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_path_guide_guid_positions_get_with_http_info(authorization, accept_language, path_guide_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_path_guide_guid_positions_get_with_http_info(authorization, accept_language, path_guide_guid, **kwargs)  # noqa: E501
            return data

    def path_guides_path_guide_guid_positions_get_with_http_info(self, authorization, accept_language, path_guide_guid, **kwargs):  # noqa: E501
        """GET /path_guides/{path_guide_guid}/positions  # noqa: E501

        Retrieve the list of positions for the path guide with the specified GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_positions_get_with_http_info(authorization, accept_language, path_guide_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str path_guide_guid: The path_guide_guid to search for (required)
        :return: list[GetPathGuidePositions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'path_guide_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_path_guide_guid_positions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `path_guides_path_guide_guid_positions_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `path_guides_path_guide_guid_positions_get`")  # noqa: E501
        # verify the required parameter 'path_guide_guid' is set
        if self.api_client.client_side_validation and ('path_guide_guid' not in params or
                                                       params['path_guide_guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `path_guide_guid` when calling `path_guides_path_guide_guid_positions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path_guide_guid' in params:
            path_params['path_guide_guid'] = params['path_guide_guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/path_guides/{path_guide_guid}/positions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetPathGuidePositions]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_path_guide_guid_positions_guid_delete(self, authorization, accept_language, path_guide_guid, guid, **kwargs):  # noqa: E501
        """DELETE /path_guides/{path_guide_guid}/positions/{guid}  # noqa: E501

        Erase the position with the specified GUID from the path guide with the specified path guide GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_positions_guid_delete(authorization, accept_language, path_guide_guid, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str path_guide_guid: The path_guide_guid to delete (required)
        :param str guid: The guid to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_path_guide_guid_positions_guid_delete_with_http_info(authorization, accept_language, path_guide_guid, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_path_guide_guid_positions_guid_delete_with_http_info(authorization, accept_language, path_guide_guid, guid, **kwargs)  # noqa: E501
            return data

    def path_guides_path_guide_guid_positions_guid_delete_with_http_info(self, authorization, accept_language, path_guide_guid, guid, **kwargs):  # noqa: E501
        """DELETE /path_guides/{path_guide_guid}/positions/{guid}  # noqa: E501

        Erase the position with the specified GUID from the path guide with the specified path guide GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_positions_guid_delete_with_http_info(authorization, accept_language, path_guide_guid, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str path_guide_guid: The path_guide_guid to delete (required)
        :param str guid: The guid to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'path_guide_guid', 'guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_path_guide_guid_positions_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `path_guides_path_guide_guid_positions_guid_delete`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `path_guides_path_guide_guid_positions_guid_delete`")  # noqa: E501
        # verify the required parameter 'path_guide_guid' is set
        if self.api_client.client_side_validation and ('path_guide_guid' not in params or
                                                       params['path_guide_guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `path_guide_guid` when calling `path_guides_path_guide_guid_positions_guid_delete`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in params or
                                                       params['guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `guid` when calling `path_guides_path_guide_guid_positions_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path_guide_guid' in params:
            path_params['path_guide_guid'] = params['path_guide_guid']  # noqa: E501
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/path_guides/{path_guide_guid}/positions/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_path_guide_guid_positions_guid_get(self, authorization, accept_language, path_guide_guid, guid, **kwargs):  # noqa: E501
        """GET /path_guides/{path_guide_guid}/positions/{guid}  # noqa: E501

        Retrieve the position with the specified GUID from the path guide with the specified path guide GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_positions_guid_get(authorization, accept_language, path_guide_guid, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str path_guide_guid: The path_guide_guid to search for (required)
        :param str guid: The guid to search for (required)
        :return: GetPathGuidePosition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_path_guide_guid_positions_guid_get_with_http_info(authorization, accept_language, path_guide_guid, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_path_guide_guid_positions_guid_get_with_http_info(authorization, accept_language, path_guide_guid, guid, **kwargs)  # noqa: E501
            return data

    def path_guides_path_guide_guid_positions_guid_get_with_http_info(self, authorization, accept_language, path_guide_guid, guid, **kwargs):  # noqa: E501
        """GET /path_guides/{path_guide_guid}/positions/{guid}  # noqa: E501

        Retrieve the position with the specified GUID from the path guide with the specified path guide GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_positions_guid_get_with_http_info(authorization, accept_language, path_guide_guid, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str path_guide_guid: The path_guide_guid to search for (required)
        :param str guid: The guid to search for (required)
        :return: GetPathGuidePosition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'path_guide_guid', 'guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_path_guide_guid_positions_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `path_guides_path_guide_guid_positions_guid_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `path_guides_path_guide_guid_positions_guid_get`")  # noqa: E501
        # verify the required parameter 'path_guide_guid' is set
        if self.api_client.client_side_validation and ('path_guide_guid' not in params or
                                                       params['path_guide_guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `path_guide_guid` when calling `path_guides_path_guide_guid_positions_guid_get`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in params or
                                                       params['guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `guid` when calling `path_guides_path_guide_guid_positions_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path_guide_guid' in params:
            path_params['path_guide_guid'] = params['path_guide_guid']  # noqa: E501
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/path_guides/{path_guide_guid}/positions/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPathGuidePosition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_path_guide_guid_positions_guid_put(self, authorization, accept_language, path_guide_guid, guid, path_guide_position, **kwargs):  # noqa: E501
        """PUT /path_guides/{path_guide_guid}/positions/{guid}  # noqa: E501

        Modify the values of the position with the specified GUID from the path guide with the specified path guide GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_positions_guid_put(authorization, accept_language, path_guide_guid, guid, path_guide_position, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str path_guide_guid: The path_guide_guid to modify (required)
        :param str guid: The guid to modify (required)
        :param PutPathGuidePosition path_guide_position: The new values of the path_guide_position (required)
        :return: GetPathGuidePosition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_path_guide_guid_positions_guid_put_with_http_info(authorization, accept_language, path_guide_guid, guid, path_guide_position, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_path_guide_guid_positions_guid_put_with_http_info(authorization, accept_language, path_guide_guid, guid, path_guide_position, **kwargs)  # noqa: E501
            return data

    def path_guides_path_guide_guid_positions_guid_put_with_http_info(self, authorization, accept_language, path_guide_guid, guid, path_guide_position, **kwargs):  # noqa: E501
        """PUT /path_guides/{path_guide_guid}/positions/{guid}  # noqa: E501

        Modify the values of the position with the specified GUID from the path guide with the specified path guide GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_positions_guid_put_with_http_info(authorization, accept_language, path_guide_guid, guid, path_guide_position, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str path_guide_guid: The path_guide_guid to modify (required)
        :param str guid: The guid to modify (required)
        :param PutPathGuidePosition path_guide_position: The new values of the path_guide_position (required)
        :return: GetPathGuidePosition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'path_guide_guid', 'guid', 'path_guide_position']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_path_guide_guid_positions_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `path_guides_path_guide_guid_positions_guid_put`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `path_guides_path_guide_guid_positions_guid_put`")  # noqa: E501
        # verify the required parameter 'path_guide_guid' is set
        if self.api_client.client_side_validation and ('path_guide_guid' not in params or
                                                       params['path_guide_guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `path_guide_guid` when calling `path_guides_path_guide_guid_positions_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in params or
                                                       params['guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `guid` when calling `path_guides_path_guide_guid_positions_guid_put`")  # noqa: E501
        # verify the required parameter 'path_guide_position' is set
        if self.api_client.client_side_validation and ('path_guide_position' not in params or
                                                       params['path_guide_position'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `path_guide_position` when calling `path_guides_path_guide_guid_positions_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path_guide_guid' in params:
            path_params['path_guide_guid'] = params['path_guide_guid']  # noqa: E501
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'path_guide_position' in params:
            body_params = params['path_guide_position']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/path_guides/{path_guide_guid}/positions/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPathGuidePosition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_path_guide_guid_positions_post(self, authorization, accept_language, path_guide_guid, path_guide_positions, **kwargs):  # noqa: E501
        """POST /path_guides/{path_guide_guid}/positions  # noqa: E501

        Add a new position to the path guide with the specified GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_positions_post(authorization, accept_language, path_guide_guid, path_guide_positions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str path_guide_guid: The path_guide_guid to add the new resource to (required)
        :param PostPathGuidePositions path_guide_positions: The details of the path_guide_positions (required)
        :return: GetPathGuidePositions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_path_guide_guid_positions_post_with_http_info(authorization, accept_language, path_guide_guid, path_guide_positions, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_path_guide_guid_positions_post_with_http_info(authorization, accept_language, path_guide_guid, path_guide_positions, **kwargs)  # noqa: E501
            return data

    def path_guides_path_guide_guid_positions_post_with_http_info(self, authorization, accept_language, path_guide_guid, path_guide_positions, **kwargs):  # noqa: E501
        """POST /path_guides/{path_guide_guid}/positions  # noqa: E501

        Add a new position to the path guide with the specified GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_path_guide_guid_positions_post_with_http_info(authorization, accept_language, path_guide_guid, path_guide_positions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str path_guide_guid: The path_guide_guid to add the new resource to (required)
        :param PostPathGuidePositions path_guide_positions: The details of the path_guide_positions (required)
        :return: GetPathGuidePositions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'path_guide_guid', 'path_guide_positions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_path_guide_guid_positions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `path_guides_path_guide_guid_positions_post`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `path_guides_path_guide_guid_positions_post`")  # noqa: E501
        # verify the required parameter 'path_guide_guid' is set
        if self.api_client.client_side_validation and ('path_guide_guid' not in params or
                                                       params['path_guide_guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `path_guide_guid` when calling `path_guides_path_guide_guid_positions_post`")  # noqa: E501
        # verify the required parameter 'path_guide_positions' is set
        if self.api_client.client_side_validation and ('path_guide_positions' not in params or
                                                       params['path_guide_positions'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `path_guide_positions` when calling `path_guides_path_guide_guid_positions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'path_guide_guid' in params:
            path_params['path_guide_guid'] = params['path_guide_guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'path_guide_positions' in params:
            body_params = params['path_guide_positions']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/path_guides/{path_guide_guid}/positions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPathGuidePositions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_guides_post(self, authorization, accept_language, path_guides, **kwargs):  # noqa: E501
        """POST /path_guides  # noqa: E501

        Add a new path guide  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_post(authorization, accept_language, path_guides, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param PostPathGuides path_guides: The details of the path_guides (required)
        :return: GetPathGuides
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.path_guides_post_with_http_info(authorization, accept_language, path_guides, **kwargs)  # noqa: E501
        else:
            (data) = self.path_guides_post_with_http_info(authorization, accept_language, path_guides, **kwargs)  # noqa: E501
            return data

    def path_guides_post_with_http_info(self, authorization, accept_language, path_guides, **kwargs):  # noqa: E501
        """POST /path_guides  # noqa: E501

        Add a new path guide  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.path_guides_post_with_http_info(authorization, accept_language, path_guides, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param PostPathGuides path_guides: The details of the path_guides (required)
        :return: GetPathGuides
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'path_guides']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_guides_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `path_guides_post`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `path_guides_post`")  # noqa: E501
        # verify the required parameter 'path_guides' is set
        if self.api_client.client_side_validation and ('path_guides' not in params or
                                                       params['path_guides'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `path_guides` when calling `path_guides_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'path_guides' in params:
            body_params = params['path_guides']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/path_guides', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPathGuides',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
