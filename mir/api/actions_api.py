# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mir.api_client import ApiClient


class ActionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def actions_action_type_get(self, authorization, accept_language, action_type, **kwargs):  # noqa: E501
        """GET /actions/{action_type}  # noqa: E501

        Retrieve the details about the action. It displays the parameters of the action and the limits for the values among others  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actions_action_type_get(authorization, accept_language, action_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str action_type: The action_type to search for (required)
        :return: GetActionDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.actions_action_type_get_with_http_info(authorization, accept_language, action_type, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_action_type_get_with_http_info(authorization, accept_language, action_type, **kwargs)  # noqa: E501
            return data

    def actions_action_type_get_with_http_info(self, authorization, accept_language, action_type, **kwargs):  # noqa: E501
        """GET /actions/{action_type}  # noqa: E501

        Retrieve the details about the action. It displays the parameters of the action and the limits for the values among others  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actions_action_type_get_with_http_info(authorization, accept_language, action_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str action_type: The action_type to search for (required)
        :return: GetActionDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'action_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_action_type_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `actions_action_type_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `actions_action_type_get`")  # noqa: E501
        # verify the required parameter 'action_type' is set
        if self.api_client.client_side_validation and ('action_type' not in params or
                                                       params['action_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `action_type` when calling `actions_action_type_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'action_type' in params:
            path_params['action_type'] = params['action_type']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/actions/{action_type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetActionDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_action_type_post(self, authorization, accept_language, action_type, action_definition, **kwargs):  # noqa: E501
        """POST /actions/{action_type}  # noqa: E501

        Add a new action definition with the specified action_type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actions_action_type_post(authorization, accept_language, action_type, action_definition, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str action_type: The action_type to add the new resource to (required)
        :param PostActionDefinition action_definition: The details of the action_definition (required)
        :return: GetActionDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.actions_action_type_post_with_http_info(authorization, accept_language, action_type, action_definition, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_action_type_post_with_http_info(authorization, accept_language, action_type, action_definition, **kwargs)  # noqa: E501
            return data

    def actions_action_type_post_with_http_info(self, authorization, accept_language, action_type, action_definition, **kwargs):  # noqa: E501
        """POST /actions/{action_type}  # noqa: E501

        Add a new action definition with the specified action_type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actions_action_type_post_with_http_info(authorization, accept_language, action_type, action_definition, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str action_type: The action_type to add the new resource to (required)
        :param PostActionDefinition action_definition: The details of the action_definition (required)
        :return: GetActionDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'action_type', 'action_definition']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_action_type_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `actions_action_type_post`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `actions_action_type_post`")  # noqa: E501
        # verify the required parameter 'action_type' is set
        if self.api_client.client_side_validation and ('action_type' not in params or
                                                       params['action_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `action_type` when calling `actions_action_type_post`")  # noqa: E501
        # verify the required parameter 'action_definition' is set
        if self.api_client.client_side_validation and ('action_definition' not in params or
                                                       params['action_definition'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `action_definition` when calling `actions_action_type_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'action_type' in params:
            path_params['action_type'] = params['action_type']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'action_definition' in params:
            body_params = params['action_definition']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/actions/{action_type}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetActionDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_get(self, authorization, accept_language, **kwargs):  # noqa: E501
        """GET /actions  # noqa: E501

        Retrieve the list of action definitions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actions_get(authorization, accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :return: GetActionDefinitions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.actions_get_with_http_info(authorization, accept_language, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_get_with_http_info(authorization, accept_language, **kwargs)  # noqa: E501
            return data

    def actions_get_with_http_info(self, authorization, accept_language, **kwargs):  # noqa: E501
        """GET /actions  # noqa: E501

        Retrieve the list of action definitions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actions_get_with_http_info(authorization, accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :return: GetActionDefinitions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `actions_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `actions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetActionDefinitions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mission_groups_mission_group_id_actions_get(self, authorization, accept_language, mission_group_id, **kwargs):  # noqa: E501
        """GET /mission_groups/{mission_group_id}/actions  # noqa: E501

        Retrieve the list of action definitions from the mission group with the specified mission group ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_groups_mission_group_id_actions_get(authorization, accept_language, mission_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str mission_group_id: The mission_group_id to search for (required)
        :return: GetGroupActionDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mission_groups_mission_group_id_actions_get_with_http_info(authorization, accept_language, mission_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mission_groups_mission_group_id_actions_get_with_http_info(authorization, accept_language, mission_group_id, **kwargs)  # noqa: E501
            return data

    def mission_groups_mission_group_id_actions_get_with_http_info(self, authorization, accept_language, mission_group_id, **kwargs):  # noqa: E501
        """GET /mission_groups/{mission_group_id}/actions  # noqa: E501

        Retrieve the list of action definitions from the mission group with the specified mission group ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_groups_mission_group_id_actions_get_with_http_info(authorization, accept_language, mission_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str mission_group_id: The mission_group_id to search for (required)
        :return: GetGroupActionDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'mission_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mission_groups_mission_group_id_actions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `mission_groups_mission_group_id_actions_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `mission_groups_mission_group_id_actions_get`")  # noqa: E501
        # verify the required parameter 'mission_group_id' is set
        if self.api_client.client_side_validation and ('mission_group_id' not in params or
                                                       params['mission_group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mission_group_id` when calling `mission_groups_mission_group_id_actions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mission_group_id' in params:
            path_params['mission_group_id'] = params['mission_group_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mission_groups/{mission_group_id}/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetGroupActionDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mission_queue_mission_queue_id_actions_get(self, authorization, accept_language, mission_queue_id, **kwargs):  # noqa: E501
        """GET /mission_queue/{mission_queue_id}/actions  # noqa: E501

        Retrieve the list of actions from the mission with the specified ID in the mission queue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_queue_mission_queue_id_actions_get(authorization, accept_language, mission_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param int mission_queue_id: The mission_queue_id to search for (required)
        :return: GetMissionQueueActions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mission_queue_mission_queue_id_actions_get_with_http_info(authorization, accept_language, mission_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mission_queue_mission_queue_id_actions_get_with_http_info(authorization, accept_language, mission_queue_id, **kwargs)  # noqa: E501
            return data

    def mission_queue_mission_queue_id_actions_get_with_http_info(self, authorization, accept_language, mission_queue_id, **kwargs):  # noqa: E501
        """GET /mission_queue/{mission_queue_id}/actions  # noqa: E501

        Retrieve the list of actions from the mission with the specified ID in the mission queue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_queue_mission_queue_id_actions_get_with_http_info(authorization, accept_language, mission_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param int mission_queue_id: The mission_queue_id to search for (required)
        :return: GetMissionQueueActions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'mission_queue_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mission_queue_mission_queue_id_actions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `mission_queue_mission_queue_id_actions_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `mission_queue_mission_queue_id_actions_get`")  # noqa: E501
        # verify the required parameter 'mission_queue_id' is set
        if self.api_client.client_side_validation and ('mission_queue_id' not in params or
                                                       params['mission_queue_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mission_queue_id` when calling `mission_queue_mission_queue_id_actions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mission_queue_id' in params:
            path_params['mission_queue_id'] = params['mission_queue_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mission_queue/{mission_queue_id}/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMissionQueueActions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mission_queue_mission_queue_id_actions_id_get(self, authorization, accept_language, mission_queue_id, id, **kwargs):  # noqa: E501
        """GET /mission_queue/{mission_queue_id}/actions/{id}  # noqa: E501

        Retrieve the details about the action with the specified ID from the mission with the specified ID in the mission queue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_queue_mission_queue_id_actions_id_get(authorization, accept_language, mission_queue_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param int mission_queue_id: The mission_queue_id to search for (required)
        :param int id: The id to search for (required)
        :return: GetMissionQueueAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mission_queue_mission_queue_id_actions_id_get_with_http_info(authorization, accept_language, mission_queue_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.mission_queue_mission_queue_id_actions_id_get_with_http_info(authorization, accept_language, mission_queue_id, id, **kwargs)  # noqa: E501
            return data

    def mission_queue_mission_queue_id_actions_id_get_with_http_info(self, authorization, accept_language, mission_queue_id, id, **kwargs):  # noqa: E501
        """GET /mission_queue/{mission_queue_id}/actions/{id}  # noqa: E501

        Retrieve the details about the action with the specified ID from the mission with the specified ID in the mission queue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mission_queue_mission_queue_id_actions_id_get_with_http_info(authorization, accept_language, mission_queue_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param int mission_queue_id: The mission_queue_id to search for (required)
        :param int id: The id to search for (required)
        :return: GetMissionQueueAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'mission_queue_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mission_queue_mission_queue_id_actions_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `mission_queue_mission_queue_id_actions_id_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `mission_queue_mission_queue_id_actions_id_get`")  # noqa: E501
        # verify the required parameter 'mission_queue_id' is set
        if self.api_client.client_side_validation and ('mission_queue_id' not in params or
                                                       params['mission_queue_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mission_queue_id` when calling `mission_queue_mission_queue_id_actions_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `mission_queue_mission_queue_id_actions_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mission_queue_id' in params:
            path_params['mission_queue_id'] = params['mission_queue_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mission_queue/{mission_queue_id}/actions/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMissionQueueAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def missions_mission_id_actions_get(self, authorization, accept_language, mission_id, **kwargs):  # noqa: E501
        """GET /missions/{mission_id}/actions  # noqa: E501

        Retrieve the list of actions that belong to the mission with the specified mission ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_mission_id_actions_get(authorization, accept_language, mission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str mission_id: The mission_id to search for (required)
        :return: list[GetMissionActions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.missions_mission_id_actions_get_with_http_info(authorization, accept_language, mission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.missions_mission_id_actions_get_with_http_info(authorization, accept_language, mission_id, **kwargs)  # noqa: E501
            return data

    def missions_mission_id_actions_get_with_http_info(self, authorization, accept_language, mission_id, **kwargs):  # noqa: E501
        """GET /missions/{mission_id}/actions  # noqa: E501

        Retrieve the list of actions that belong to the mission with the specified mission ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_mission_id_actions_get_with_http_info(authorization, accept_language, mission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str mission_id: The mission_id to search for (required)
        :return: list[GetMissionActions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'mission_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method missions_mission_id_actions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `missions_mission_id_actions_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `missions_mission_id_actions_get`")  # noqa: E501
        # verify the required parameter 'mission_id' is set
        if self.api_client.client_side_validation and ('mission_id' not in params or
                                                       params['mission_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mission_id` when calling `missions_mission_id_actions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mission_id' in params:
            path_params['mission_id'] = params['mission_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/missions/{mission_id}/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetMissionActions]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def missions_mission_id_actions_guid_delete(self, authorization, accept_language, mission_id, guid, **kwargs):  # noqa: E501
        """DELETE /missions/{mission_id}/actions/{guid}  # noqa: E501

        Erase the action with the specified GUID from the mission with the specified mission ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_mission_id_actions_guid_delete(authorization, accept_language, mission_id, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str mission_id: The mission_id to delete (required)
        :param str guid: The guid to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.missions_mission_id_actions_guid_delete_with_http_info(authorization, accept_language, mission_id, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.missions_mission_id_actions_guid_delete_with_http_info(authorization, accept_language, mission_id, guid, **kwargs)  # noqa: E501
            return data

    def missions_mission_id_actions_guid_delete_with_http_info(self, authorization, accept_language, mission_id, guid, **kwargs):  # noqa: E501
        """DELETE /missions/{mission_id}/actions/{guid}  # noqa: E501

        Erase the action with the specified GUID from the mission with the specified mission ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_mission_id_actions_guid_delete_with_http_info(authorization, accept_language, mission_id, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str mission_id: The mission_id to delete (required)
        :param str guid: The guid to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'mission_id', 'guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method missions_mission_id_actions_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `missions_mission_id_actions_guid_delete`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `missions_mission_id_actions_guid_delete`")  # noqa: E501
        # verify the required parameter 'mission_id' is set
        if self.api_client.client_side_validation and ('mission_id' not in params or
                                                       params['mission_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mission_id` when calling `missions_mission_id_actions_guid_delete`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in params or
                                                       params['guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `guid` when calling `missions_mission_id_actions_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mission_id' in params:
            path_params['mission_id'] = params['mission_id']  # noqa: E501
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/missions/{mission_id}/actions/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def missions_mission_id_actions_guid_get(self, authorization, accept_language, mission_id, guid, **kwargs):  # noqa: E501
        """GET /missions/{mission_id}/actions/{guid}  # noqa: E501

        Retrieve the details about the action with the specified GUID that belongs to the mission with the specified mission ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_mission_id_actions_guid_get(authorization, accept_language, mission_id, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str mission_id: The mission_id to search for (required)
        :param str guid: The guid to search for (required)
        :return: GetMissionAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.missions_mission_id_actions_guid_get_with_http_info(authorization, accept_language, mission_id, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.missions_mission_id_actions_guid_get_with_http_info(authorization, accept_language, mission_id, guid, **kwargs)  # noqa: E501
            return data

    def missions_mission_id_actions_guid_get_with_http_info(self, authorization, accept_language, mission_id, guid, **kwargs):  # noqa: E501
        """GET /missions/{mission_id}/actions/{guid}  # noqa: E501

        Retrieve the details about the action with the specified GUID that belongs to the mission with the specified mission ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_mission_id_actions_guid_get_with_http_info(authorization, accept_language, mission_id, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str mission_id: The mission_id to search for (required)
        :param str guid: The guid to search for (required)
        :return: GetMissionAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'mission_id', 'guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method missions_mission_id_actions_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `missions_mission_id_actions_guid_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `missions_mission_id_actions_guid_get`")  # noqa: E501
        # verify the required parameter 'mission_id' is set
        if self.api_client.client_side_validation and ('mission_id' not in params or
                                                       params['mission_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mission_id` when calling `missions_mission_id_actions_guid_get`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in params or
                                                       params['guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `guid` when calling `missions_mission_id_actions_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mission_id' in params:
            path_params['mission_id'] = params['mission_id']  # noqa: E501
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/missions/{mission_id}/actions/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMissionAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def missions_mission_id_actions_guid_put(self, authorization, accept_language, mission_id, guid, mission_action, **kwargs):  # noqa: E501
        """PUT /missions/{mission_id}/actions/{guid}  # noqa: E501

        Modify the values of the action with the specified GUID that belongs to the mission with the specified mission ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_mission_id_actions_guid_put(authorization, accept_language, mission_id, guid, mission_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str mission_id: The mission_id to modify (required)
        :param str guid: The guid to modify (required)
        :param PutMissionAction mission_action: The new values of the mission_action (required)
        :return: GetMissionAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.missions_mission_id_actions_guid_put_with_http_info(authorization, accept_language, mission_id, guid, mission_action, **kwargs)  # noqa: E501
        else:
            (data) = self.missions_mission_id_actions_guid_put_with_http_info(authorization, accept_language, mission_id, guid, mission_action, **kwargs)  # noqa: E501
            return data

    def missions_mission_id_actions_guid_put_with_http_info(self, authorization, accept_language, mission_id, guid, mission_action, **kwargs):  # noqa: E501
        """PUT /missions/{mission_id}/actions/{guid}  # noqa: E501

        Modify the values of the action with the specified GUID that belongs to the mission with the specified mission ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_mission_id_actions_guid_put_with_http_info(authorization, accept_language, mission_id, guid, mission_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str mission_id: The mission_id to modify (required)
        :param str guid: The guid to modify (required)
        :param PutMissionAction mission_action: The new values of the mission_action (required)
        :return: GetMissionAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'mission_id', 'guid', 'mission_action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method missions_mission_id_actions_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `missions_mission_id_actions_guid_put`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `missions_mission_id_actions_guid_put`")  # noqa: E501
        # verify the required parameter 'mission_id' is set
        if self.api_client.client_side_validation and ('mission_id' not in params or
                                                       params['mission_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mission_id` when calling `missions_mission_id_actions_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in params or
                                                       params['guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `guid` when calling `missions_mission_id_actions_guid_put`")  # noqa: E501
        # verify the required parameter 'mission_action' is set
        if self.api_client.client_side_validation and ('mission_action' not in params or
                                                       params['mission_action'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mission_action` when calling `missions_mission_id_actions_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mission_id' in params:
            path_params['mission_id'] = params['mission_id']  # noqa: E501
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mission_action' in params:
            body_params = params['mission_action']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/missions/{mission_id}/actions/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMissionAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def missions_mission_id_actions_post(self, authorization, accept_language, mission_id, mission_actions, **kwargs):  # noqa: E501
        """POST /missions/{mission_id}/actions  # noqa: E501

        Add a new action to the mission with the specified mission ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_mission_id_actions_post(authorization, accept_language, mission_id, mission_actions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str mission_id: The mission_id to add the new resource to (required)
        :param PostMissionActions mission_actions: The details of the mission_actions (required)
        :return: GetMissionActions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.missions_mission_id_actions_post_with_http_info(authorization, accept_language, mission_id, mission_actions, **kwargs)  # noqa: E501
        else:
            (data) = self.missions_mission_id_actions_post_with_http_info(authorization, accept_language, mission_id, mission_actions, **kwargs)  # noqa: E501
            return data

    def missions_mission_id_actions_post_with_http_info(self, authorization, accept_language, mission_id, mission_actions, **kwargs):  # noqa: E501
        """POST /missions/{mission_id}/actions  # noqa: E501

        Add a new action to the mission with the specified mission ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.missions_mission_id_actions_post_with_http_info(authorization, accept_language, mission_id, mission_actions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str mission_id: The mission_id to add the new resource to (required)
        :param PostMissionActions mission_actions: The details of the mission_actions (required)
        :return: GetMissionActions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'mission_id', 'mission_actions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method missions_mission_id_actions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `missions_mission_id_actions_post`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `missions_mission_id_actions_post`")  # noqa: E501
        # verify the required parameter 'mission_id' is set
        if self.api_client.client_side_validation and ('mission_id' not in params or
                                                       params['mission_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mission_id` when calling `missions_mission_id_actions_post`")  # noqa: E501
        # verify the required parameter 'mission_actions' is set
        if self.api_client.client_side_validation and ('mission_actions' not in params or
                                                       params['mission_actions'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mission_actions` when calling `missions_mission_id_actions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mission_id' in params:
            path_params['mission_id'] = params['mission_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mission_actions' in params:
            body_params = params['mission_actions']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/missions/{mission_id}/actions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMissionActions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
