# coding: utf-8

"""
    3.5.4 MIR250 REST API

    The REST API for the 3.5.4 interface of MIR250  # noqa: E501

    OpenAPI spec version: 3.5.4
    Contact: support@mir-robots.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mir.api_client import ApiClient


class MapsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def maps_get(self, authorization, accept_language, **kwargs):  # noqa: E501
        """GET /maps  # noqa: E501

        Retrieve the list of maps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_get(authorization, accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :return: list[GetMaps]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_get_with_http_info(authorization, accept_language, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_get_with_http_info(authorization, accept_language, **kwargs)  # noqa: E501
            return data

    def maps_get_with_http_info(self, authorization, accept_language, **kwargs):  # noqa: E501
        """GET /maps  # noqa: E501

        Retrieve the list of maps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_get_with_http_info(authorization, accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :return: list[GetMaps]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `maps_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `maps_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/maps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetMaps]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_guid_delete(self, authorization, accept_language, guid, **kwargs):  # noqa: E501
        """DELETE /maps/{guid}  # noqa: E501

        Erase the map with the specified GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_guid_delete(authorization, accept_language, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str guid: The guid to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_guid_delete_with_http_info(authorization, accept_language, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_guid_delete_with_http_info(authorization, accept_language, guid, **kwargs)  # noqa: E501
            return data

    def maps_guid_delete_with_http_info(self, authorization, accept_language, guid, **kwargs):  # noqa: E501
        """DELETE /maps/{guid}  # noqa: E501

        Erase the map with the specified GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_guid_delete_with_http_info(authorization, accept_language, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str guid: The guid to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `maps_guid_delete`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `maps_guid_delete`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in params or
                                                       params['guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `guid` when calling `maps_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/maps/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_guid_get(self, authorization, accept_language, guid, **kwargs):  # noqa: E501
        """GET /maps/{guid}  # noqa: E501

        Retrieve the details about the map with the specified GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_guid_get(authorization, accept_language, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str guid: The guid to search for (required)
        :return: GetMap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_guid_get_with_http_info(authorization, accept_language, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_guid_get_with_http_info(authorization, accept_language, guid, **kwargs)  # noqa: E501
            return data

    def maps_guid_get_with_http_info(self, authorization, accept_language, guid, **kwargs):  # noqa: E501
        """GET /maps/{guid}  # noqa: E501

        Retrieve the details about the map with the specified GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_guid_get_with_http_info(authorization, accept_language, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str guid: The guid to search for (required)
        :return: GetMap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `maps_guid_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `maps_guid_get`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in params or
                                                       params['guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `guid` when calling `maps_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/maps/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_guid_put(self, authorization, accept_language, guid, map, **kwargs):  # noqa: E501
        """PUT /maps/{guid}  # noqa: E501

        Modify the values of the map with the specified GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_guid_put(authorization, accept_language, guid, map, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str guid: The guid to modify (required)
        :param PutMap map: The new values of the map (required)
        :return: GetMap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_guid_put_with_http_info(authorization, accept_language, guid, map, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_guid_put_with_http_info(authorization, accept_language, guid, map, **kwargs)  # noqa: E501
            return data

    def maps_guid_put_with_http_info(self, authorization, accept_language, guid, map, **kwargs):  # noqa: E501
        """PUT /maps/{guid}  # noqa: E501

        Modify the values of the map with the specified GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_guid_put_with_http_info(authorization, accept_language, guid, map, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str guid: The guid to modify (required)
        :param PutMap map: The new values of the map (required)
        :return: GetMap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'guid', 'map']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_guid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `maps_guid_put`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `maps_guid_put`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in params or
                                                       params['guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `guid` when calling `maps_guid_put`")  # noqa: E501
        # verify the required parameter 'map' is set
        if self.api_client.client_side_validation and ('map' not in params or
                                                       params['map'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `map` when calling `maps_guid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'map' in params:
            body_params = params['map']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/maps/{guid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_map_id_path_guides_get(self, authorization, accept_language, map_id, **kwargs):  # noqa: E501
        """GET /maps/{map_id}/path_guides  # noqa: E501

        Retrieve the list of path guides that belong to the map with the specified map ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_map_id_path_guides_get(authorization, accept_language, map_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str map_id: The map_id to search for (required)
        :return: list[GetMapPathGuides]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_map_id_path_guides_get_with_http_info(authorization, accept_language, map_id, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_map_id_path_guides_get_with_http_info(authorization, accept_language, map_id, **kwargs)  # noqa: E501
            return data

    def maps_map_id_path_guides_get_with_http_info(self, authorization, accept_language, map_id, **kwargs):  # noqa: E501
        """GET /maps/{map_id}/path_guides  # noqa: E501

        Retrieve the list of path guides that belong to the map with the specified map ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_map_id_path_guides_get_with_http_info(authorization, accept_language, map_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str map_id: The map_id to search for (required)
        :return: list[GetMapPathGuides]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'map_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_map_id_path_guides_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `maps_map_id_path_guides_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `maps_map_id_path_guides_get`")  # noqa: E501
        # verify the required parameter 'map_id' is set
        if self.api_client.client_side_validation and ('map_id' not in params or
                                                       params['map_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `map_id` when calling `maps_map_id_path_guides_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'map_id' in params:
            path_params['map_id'] = params['map_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/maps/{map_id}/path_guides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetMapPathGuides]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_map_id_paths_get(self, authorization, accept_language, map_id, **kwargs):  # noqa: E501
        """GET /maps/{map_id}/paths  # noqa: E501

        Retrieve the list of paths that belong to the map with the specified map ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_map_id_paths_get(authorization, accept_language, map_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str map_id: The map_id to search for (required)
        :return: list[GetMapPaths]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_map_id_paths_get_with_http_info(authorization, accept_language, map_id, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_map_id_paths_get_with_http_info(authorization, accept_language, map_id, **kwargs)  # noqa: E501
            return data

    def maps_map_id_paths_get_with_http_info(self, authorization, accept_language, map_id, **kwargs):  # noqa: E501
        """GET /maps/{map_id}/paths  # noqa: E501

        Retrieve the list of paths that belong to the map with the specified map ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_map_id_paths_get_with_http_info(authorization, accept_language, map_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str map_id: The map_id to search for (required)
        :return: list[GetMapPaths]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'map_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_map_id_paths_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `maps_map_id_paths_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `maps_map_id_paths_get`")  # noqa: E501
        # verify the required parameter 'map_id' is set
        if self.api_client.client_side_validation and ('map_id' not in params or
                                                       params['map_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `map_id` when calling `maps_map_id_paths_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'map_id' in params:
            path_params['map_id'] = params['map_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/maps/{map_id}/paths', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetMapPaths]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_map_id_positions_get(self, authorization, accept_language, map_id, **kwargs):  # noqa: E501
        """GET /maps/{map_id}/positions  # noqa: E501

        Retrieve the list of positions that belong to the map with the specified map ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_map_id_positions_get(authorization, accept_language, map_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str map_id: The map_id to search for (required)
        :return: list[GetMapPositions]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_map_id_positions_get_with_http_info(authorization, accept_language, map_id, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_map_id_positions_get_with_http_info(authorization, accept_language, map_id, **kwargs)  # noqa: E501
            return data

    def maps_map_id_positions_get_with_http_info(self, authorization, accept_language, map_id, **kwargs):  # noqa: E501
        """GET /maps/{map_id}/positions  # noqa: E501

        Retrieve the list of positions that belong to the map with the specified map ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_map_id_positions_get_with_http_info(authorization, accept_language, map_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str map_id: The map_id to search for (required)
        :return: list[GetMapPositions]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'map_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_map_id_positions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `maps_map_id_positions_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `maps_map_id_positions_get`")  # noqa: E501
        # verify the required parameter 'map_id' is set
        if self.api_client.client_side_validation and ('map_id' not in params or
                                                       params['map_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `map_id` when calling `maps_map_id_positions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'map_id' in params:
            path_params['map_id'] = params['map_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/maps/{map_id}/positions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetMapPositions]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_map_id_zones_get(self, authorization, accept_language, map_id, **kwargs):  # noqa: E501
        """GET /maps/{map_id}/zones  # noqa: E501

        Retrieve the list of zones that belong to the map with the specified map ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_map_id_zones_get(authorization, accept_language, map_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str map_id: The map_id to search for (required)
        :return: list[GetMapZone]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_map_id_zones_get_with_http_info(authorization, accept_language, map_id, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_map_id_zones_get_with_http_info(authorization, accept_language, map_id, **kwargs)  # noqa: E501
            return data

    def maps_map_id_zones_get_with_http_info(self, authorization, accept_language, map_id, **kwargs):  # noqa: E501
        """GET /maps/{map_id}/zones  # noqa: E501

        Retrieve the list of zones that belong to the map with the specified map ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_map_id_zones_get_with_http_info(authorization, accept_language, map_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str map_id: The map_id to search for (required)
        :return: list[GetMapZone]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'map_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_map_id_zones_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `maps_map_id_zones_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `maps_map_id_zones_get`")  # noqa: E501
        # verify the required parameter 'map_id' is set
        if self.api_client.client_side_validation and ('map_id' not in params or
                                                       params['map_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `map_id` when calling `maps_map_id_zones_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'map_id' in params:
            path_params['map_id'] = params['map_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/maps/{map_id}/zones', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetMapZone]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_post(self, authorization, accept_language, maps, **kwargs):  # noqa: E501
        """POST /maps  # noqa: E501

        Add a new map  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_post(authorization, accept_language, maps, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param PostMaps maps: The details of the maps (required)
        :return: GetMaps
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_post_with_http_info(authorization, accept_language, maps, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_post_with_http_info(authorization, accept_language, maps, **kwargs)  # noqa: E501
            return data

    def maps_post_with_http_info(self, authorization, accept_language, maps, **kwargs):  # noqa: E501
        """POST /maps  # noqa: E501

        Add a new map  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_post_with_http_info(authorization, accept_language, maps, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param PostMaps maps: The details of the maps (required)
        :return: GetMaps
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'maps']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `maps_post`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `maps_post`")  # noqa: E501
        # verify the required parameter 'maps' is set
        if self.api_client.client_side_validation and ('maps' not in params or
                                                       params['maps'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `maps` when calling `maps_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'maps' in params:
            body_params = params['maps']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/maps', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMaps',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_record_get(self, authorization, accept_language, **kwargs):  # noqa: E501
        """GET /maps/record  # noqa: E501

        Retrive the latest recording of a map  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_record_get(authorization, accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :return: GetMapRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_record_get_with_http_info(authorization, accept_language, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_record_get_with_http_info(authorization, accept_language, **kwargs)  # noqa: E501
            return data

    def maps_record_get_with_http_info(self, authorization, accept_language, **kwargs):  # noqa: E501
        """GET /maps/record  # noqa: E501

        Retrive the latest recording of a map  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_record_get_with_http_info(authorization, accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :return: GetMapRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_record_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `maps_record_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `maps_record_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/maps/record', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMapRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_record_put(self, authorization, accept_language, map_record, **kwargs):  # noqa: E501
        """PUT /maps/record  # noqa: E501

        Start and stop the recording of a map  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_record_put(authorization, accept_language, map_record, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param PutMapRecord map_record: The new values of the map_record (required)
        :return: GetMapRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_record_put_with_http_info(authorization, accept_language, map_record, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_record_put_with_http_info(authorization, accept_language, map_record, **kwargs)  # noqa: E501
            return data

    def maps_record_put_with_http_info(self, authorization, accept_language, map_record, **kwargs):  # noqa: E501
        """PUT /maps/record  # noqa: E501

        Start and stop the recording of a map  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_record_put_with_http_info(authorization, accept_language, map_record, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param PutMapRecord map_record: The new values of the map_record (required)
        :return: GetMapRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'map_record']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_record_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `maps_record_put`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `maps_record_put`")  # noqa: E501
        # verify the required parameter 'map_record' is set
        if self.api_client.client_side_validation and ('map_record' not in params or
                                                       params['map_record'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `map_record` when calling `maps_record_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'map_record' in params:
            body_params = params['map_record']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/maps/record', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMapRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_uploads_get(self, authorization, accept_language, **kwargs):  # noqa: E501
        """GET /maps/uploads  # noqa: E501

        Retrieve the list of map uploads  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_uploads_get(authorization, accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :return: list[GetMapUploads]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_uploads_get_with_http_info(authorization, accept_language, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_uploads_get_with_http_info(authorization, accept_language, **kwargs)  # noqa: E501
            return data

    def maps_uploads_get_with_http_info(self, authorization, accept_language, **kwargs):  # noqa: E501
        """GET /maps/uploads  # noqa: E501

        Retrieve the list of map uploads  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_uploads_get_with_http_info(authorization, accept_language, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :return: list[GetMapUploads]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_uploads_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `maps_uploads_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `maps_uploads_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/maps/uploads', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetMapUploads]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_uploads_guid_delete(self, authorization, accept_language, guid, **kwargs):  # noqa: E501
        """DELETE /maps/uploads/{guid}  # noqa: E501

        Delete map upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_uploads_guid_delete(authorization, accept_language, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str guid: The guid to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_uploads_guid_delete_with_http_info(authorization, accept_language, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_uploads_guid_delete_with_http_info(authorization, accept_language, guid, **kwargs)  # noqa: E501
            return data

    def maps_uploads_guid_delete_with_http_info(self, authorization, accept_language, guid, **kwargs):  # noqa: E501
        """DELETE /maps/uploads/{guid}  # noqa: E501

        Delete map upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_uploads_guid_delete_with_http_info(authorization, accept_language, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str guid: The guid to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_uploads_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `maps_uploads_guid_delete`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `maps_uploads_guid_delete`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in params or
                                                       params['guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `guid` when calling `maps_uploads_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/maps/uploads/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_uploads_guid_get(self, authorization, accept_language, guid, **kwargs):  # noqa: E501
        """GET /maps/uploads/{guid}  # noqa: E501

        Fetch map upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_uploads_guid_get(authorization, accept_language, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str guid: The guid to search for (required)
        :return: GetMapUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_uploads_guid_get_with_http_info(authorization, accept_language, guid, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_uploads_guid_get_with_http_info(authorization, accept_language, guid, **kwargs)  # noqa: E501
            return data

    def maps_uploads_guid_get_with_http_info(self, authorization, accept_language, guid, **kwargs):  # noqa: E501
        """GET /maps/uploads/{guid}  # noqa: E501

        Fetch map upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_uploads_guid_get_with_http_info(authorization, accept_language, guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str guid: The guid to search for (required)
        :return: GetMapUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_uploads_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `maps_uploads_guid_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `maps_uploads_guid_get`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in params or
                                                       params['guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `guid` when calling `maps_uploads_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/maps/uploads/{guid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMapUpload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_uploads_guid_post(self, authorization, accept_language, guid, map_upload, **kwargs):  # noqa: E501
        """POST /maps/uploads/{guid}  # noqa: E501

        Apply map upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_uploads_guid_post(authorization, accept_language, guid, map_upload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str guid: The guid to add the new resource to (required)
        :param PostMapUpload map_upload: The details of the map_upload (required)
        :return: GetMapUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_uploads_guid_post_with_http_info(authorization, accept_language, guid, map_upload, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_uploads_guid_post_with_http_info(authorization, accept_language, guid, map_upload, **kwargs)  # noqa: E501
            return data

    def maps_uploads_guid_post_with_http_info(self, authorization, accept_language, guid, map_upload, **kwargs):  # noqa: E501
        """POST /maps/uploads/{guid}  # noqa: E501

        Apply map upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_uploads_guid_post_with_http_info(authorization, accept_language, guid, map_upload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str guid: The guid to add the new resource to (required)
        :param PostMapUpload map_upload: The details of the map_upload (required)
        :return: GetMapUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'guid', 'map_upload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_uploads_guid_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `maps_uploads_guid_post`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `maps_uploads_guid_post`")  # noqa: E501
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and ('guid' not in params or
                                                       params['guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `guid` when calling `maps_uploads_guid_post`")  # noqa: E501
        # verify the required parameter 'map_upload' is set
        if self.api_client.client_side_validation and ('map_upload' not in params or
                                                       params['map_upload'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `map_upload` when calling `maps_uploads_guid_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'map_upload' in params:
            body_params = params['map_upload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/maps/uploads/{guid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMapUpload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maps_uploads_post(self, authorization, accept_language, map_uploads, **kwargs):  # noqa: E501
        """POST /maps/uploads  # noqa: E501

        Upload a new map  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_uploads_post(authorization, accept_language, map_uploads, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param PostMapUploads map_uploads: The details of the map_uploads (required)
        :return: GetMapUploads
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maps_uploads_post_with_http_info(authorization, accept_language, map_uploads, **kwargs)  # noqa: E501
        else:
            (data) = self.maps_uploads_post_with_http_info(authorization, accept_language, map_uploads, **kwargs)  # noqa: E501
            return data

    def maps_uploads_post_with_http_info(self, authorization, accept_language, map_uploads, **kwargs):  # noqa: E501
        """POST /maps/uploads  # noqa: E501

        Upload a new map  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maps_uploads_post_with_http_info(authorization, accept_language, map_uploads, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param PostMapUploads map_uploads: The details of the map_uploads (required)
        :return: GetMapUploads
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'map_uploads']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maps_uploads_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `maps_uploads_post`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `maps_uploads_post`")  # noqa: E501
        # verify the required parameter 'map_uploads' is set
        if self.api_client.client_side_validation and ('map_uploads' not in params or
                                                       params['map_uploads'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `map_uploads` when calling `maps_uploads_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'map_uploads' in params:
            body_params = params['map_uploads']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/maps/uploads', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMapUploads',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sessions_session_id_maps_get(self, authorization, accept_language, session_id, **kwargs):  # noqa: E501
        """GET /sessions/{session_id}/maps  # noqa: E501

        Retrieve the list of maps that belong to the session with the specified session ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_session_id_maps_get(authorization, accept_language, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str session_id: The session_id to search for (required)
        :return: list[GetSessionMaps]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sessions_session_id_maps_get_with_http_info(authorization, accept_language, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sessions_session_id_maps_get_with_http_info(authorization, accept_language, session_id, **kwargs)  # noqa: E501
            return data

    def sessions_session_id_maps_get_with_http_info(self, authorization, accept_language, session_id, **kwargs):  # noqa: E501
        """GET /sessions/{session_id}/maps  # noqa: E501

        Retrieve the list of maps that belong to the session with the specified session ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sessions_session_id_maps_get_with_http_info(authorization, accept_language, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization header (required)
        :param str accept_language: Language header (required)
        :param str session_id: The session_id to search for (required)
        :return: list[GetSessionMaps]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sessions_session_id_maps_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `sessions_session_id_maps_get`")  # noqa: E501
        # verify the required parameter 'accept_language' is set
        if self.api_client.client_side_validation and ('accept_language' not in params or
                                                       params['accept_language'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `accept_language` when calling `sessions_session_id_maps_get`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if self.api_client.client_side_validation and ('session_id' not in params or
                                                       params['session_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `session_id` when calling `sessions_session_id_maps_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['session_id'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sessions/{session_id}/maps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetSessionMaps]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
