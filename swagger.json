{
  "swagger": "2.0",
  "info": {
    "description": "The REST API for the 3.5.4 interface of MIR250",
    "version": "3.5.4",
    "title": "3.5.4 MIR250 REST API",
    "contact": {
      "email": "support@mir-robots.com"
    }
  },
  "basePath": "/api/v2.0.0",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/system/info": {
      "get": {
        "summary": "GET /system/info",
        "description": "Retrieve the information about the system. It contains different information like serial numbers of hardware components, MAC addresses of network cards, etc...",
        "tags": [
          "System",
          "Info"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetSystem_info"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/log/error_reports": {
      "get": {
        "summary": "GET /log/error_reports",
        "description": "Retrieve the list of error reports",
        "tags": [
          "Log",
          "Error_reports"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetError_reports"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /log/error_reports",
        "description": "Generate a new error report. This will record the 30s previous to this call in a file.",
        "tags": [
          "Log",
          "Error_reports"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Error_reports",
            "in": "body",
            "description": "The details of the error_reports",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostError_reports"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetError_reports"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /log/error_reports",
        "description": "Erase ALL the error reports",
        "tags": [
          "Log",
          "Error_reports"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/log/error_reports/{id}": {
      "get": {
        "summary": "GET /log/error_reports/{id}",
        "description": "Retrieve the details about the error report with the specified ID",
        "tags": [
          "Log",
          "Error_reports"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id to search for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetError_report"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /log/error_reports/{id}",
        "description": "Erase the error report with the specified ID",
        "tags": [
          "Log",
          "Error_reports"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id to delete",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/log/error_reports/{id}/download": {
      "get": {
        "summary": "GET /log/error_reports/{id}/download",
        "description": "Download the file containing the error report with the specified ID",
        "tags": [
          "Log",
          "Error_reports",
          "Download"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id to search for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetError_report_download"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/swagger": {
      "get": {
        "summary": "GET /swagger",
        "description": "Retrieve the swagger definition of the API",
        "tags": [
          "Swagger"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetSwagger_doc"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/software/logs": {
      "get": {
        "summary": "GET /software/logs",
        "description": "Retrieve the list of software upgrade logs",
        "tags": [
          "Software",
          "Logs"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetSoftware_logs"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/software/logs/{guid}": {
      "get": {
        "summary": "GET /software/logs/{guid}",
        "description": "Retrieve the details about the software upgrade log with the specified GUID",
        "tags": [
          "Software",
          "Logs"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetSoftware_log"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/software/backups": {
      "get": {
        "summary": "GET /software/backups",
        "description": "Retrieve the list with all the software backups",
        "tags": [
          "Software",
          "Backups"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetSoftware_backups"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /software/backups",
        "description": "Create a new software backup",
        "tags": [
          "Software",
          "Backups"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetSoftware_backups"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/software/backups/{guid}": {
      "get": {
        "summary": "GET /software/backups/{guid}",
        "description": "Retrieve the details about the software backup with the specified GUID",
        "tags": [
          "Software",
          "Backups"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetSoftware_backup"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /software/backups/{guid}",
        "description": "Erase the software backup with the specified GUID",
        "tags": [
          "Software",
          "Backups"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /software/backups/{guid}",
        "description": "If it exists a software backup with the specified GUID it will restore that backup. Otherwise, it will create a software backup with the specified GUID",
        "tags": [
          "Software",
          "Backups"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to add the new resource to",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetSoftware_backup"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/software/upgrades": {
      "get": {
        "summary": "GET /software/upgrades",
        "description": "Retrieve a list of the software upgrade performed",
        "tags": [
          "Software",
          "Upgrades"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetSoftware_upgrades"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /software/upgrades",
        "description": "Upgrade with the provided upgrade file",
        "tags": [
          "Software",
          "Upgrades"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetSoftware_upgrades"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/software/upgrades/{guid}": {
      "get": {
        "summary": "GET /software/upgrades/{guid}",
        "description": "Retrieve the details of the software upgrade with the specified GUID",
        "tags": [
          "Software",
          "Upgrades"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetSoftware_upgrade"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /software/upgrades/{guid}",
        "description": "Erase the upgrade file with the specified GUID",
        "tags": [
          "Software",
          "Upgrades"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /software/upgrades/{guid}",
        "description": "Upgrade to the version of the upgrade file with the specified GUID",
        "tags": [
          "Software",
          "Upgrades"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to add the new resource to",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetSoftware_upgrade"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/software/system_status": {
      "get": {
        "summary": "GET /software/system_status",
        "description": "Retrieve information related to the upgrading system in the robot.",
        "tags": [
          "Software",
          "System_status"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetSoftware_system_status"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/software/robot_peripherals_status": {
      "get": {
        "summary": "GET /software/robot_peripherals_status",
        "description": "Retrieve information related to the peripherals running upgrade routines in the robot..",
        "tags": [
          "Software",
          "Robot_peripherals_status"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetSoftware_robot_peripherals_status"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/software/hook_interface": {
      "get": {
        "summary": "GET /software/hook_interface",
        "description": "Retrieve the information about the hook software interface",
        "tags": [
          "Software",
          "Hook_interface"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetHook_software_interface"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /software/hook_interface",
        "description": "Proceed with hook upgrade",
        "tags": [
          "Software",
          "Hook_interface"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Hook_software_interface",
            "in": "body",
            "description": "The details of the hook_software_interface",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostHook_software_interface"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetHook_software_interface"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/system/setup/serial_devices": {
      "get": {
        "summary": "GET /system/setup/serial_devices",
        "description": "Retrieve the information about serial devices setup.",
        "tags": [
          "System",
          "Setup",
          "Serial_devices"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetSetup_serial_devices"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/system/setup/serial_devices/{id}": {
      "get": {
        "summary": "GET /system/setup/serial_devices/{id}",
        "description": "Retrieve the information about serial devices setup.",
        "tags": [
          "System",
          "Setup",
          "Serial_devices"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id to search for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetSetup_serial_device"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/system/setup/serial_devices/lasers": {
      "get": {
        "summary": "GET /system/setup/serial_devices/lasers",
        "description": "Retrieve the setup information about FTDI adapters of laser scanners.",
        "tags": [
          "System",
          "Setup",
          "Serial_devices",
          "Lasers"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetSetup_laser_serials"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /system/setup/serial_devices/lasers",
        "description": "Modify laser serials",
        "tags": [
          "System",
          "Setup",
          "Serial_devices",
          "Lasers"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Setup_laser_serials",
            "in": "body",
            "description": "The new values of the setup_laser_serials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutSetup_laser_serials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetSetup_laser_serials"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/system/setup/serial_devices/motor_controllers": {
      "get": {
        "summary": "GET /system/setup/serial_devices/motor_controllers",
        "description": "Retrieve the setup information about FTDI adapters of motor controllers.",
        "tags": [
          "System",
          "Setup",
          "Serial_devices",
          "Motor_controllers"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetSetup_mc_serials"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /system/setup/serial_devices/motor_controllers",
        "description": "Modify motor controller serials",
        "tags": [
          "System",
          "Setup",
          "Serial_devices",
          "Motor_controllers"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Setup_mc_serials",
            "in": "body",
            "description": "The new values of the setup_mc_serials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutSetup_mc_serials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetSetup_mc_serials"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/system/setup/serial_devices/external_interfaces": {
      "get": {
        "summary": "GET /system/setup/serial_devices/external_interfaces",
        "description": "Retrieve the setup information about FTDI adapters of external_interfaces.",
        "tags": [
          "System",
          "Setup",
          "Serial_devices",
          "External_interfaces"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetSetup_external_interface_serials"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /system/setup/serial_devices/external_interfaces",
        "description": "Modify external interface serials",
        "tags": [
          "System",
          "Setup",
          "Serial_devices",
          "External_interfaces"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Setup_external_interface_serials",
            "in": "body",
            "description": "The new values of the setup_external_interface_serials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutSetup_external_interface_serials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetSetup_external_interface_serials"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/system/setup/cameras": {
      "get": {
        "summary": "GET /system/setup/cameras",
        "description": "Retrieve the setup information about Cameras.",
        "tags": [
          "System",
          "Setup",
          "Cameras"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetSetup_cameras"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /system/setup/cameras",
        "description": "Modify camera settings",
        "tags": [
          "System",
          "Setup",
          "Cameras"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Setup_cameras",
            "in": "body",
            "description": "The new values of the setup_cameras",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutSetup_cameras"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetSetup_cameras"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/system/setup/sick_configs": {
      "get": {
        "summary": "GET /system/setup/sick_configs",
        "description": "Get configuration description of sick configuration file.",
        "tags": [
          "System",
          "Setup",
          "Sick_configs"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetSick_configs"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/system/setup/sick_configs/{guid}": {
      "get": {
        "summary": "GET /system/setup/sick_configs/{guid}",
        "description": "Get configuration description of sick configuration file.",
        "tags": [
          "System",
          "Setup",
          "Sick_configs"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetSick_config"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/system/setup/sick_configs/{guid}/download": {
      "get": {
        "summary": "GET /system/setup/sick_configs/{guid}/download",
        "description": "Download sick configuration file.",
        "tags": [
          "System",
          "Setup",
          "Sick_configs",
          "Download"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetSick_config_download"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/system/protective_scan": {
      "get": {
        "summary": "GET /system/protective_scan",
        "description": "Retrieve PNG image visualizing the laser scans near the robot, including visualization of points in protective fields if supported.",
        "tags": [
          "System",
          "Protective_scan"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetProtective_scan"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/wifi": {
      "get": {
        "summary": "GET /wifi",
        "description": "Retrive the list of WIFI API endpoints.",
        "tags": [
          "Wifi"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetWifi_api"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/wifi/networks": {
      "get": {
        "summary": "GET /wifi/networks",
        "description": "Retrieve the list of WiFi networks available for the robot to connect",
        "tags": [
          "Wifi",
          "Networks"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetWifi_networks"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/wifi/networks/{guid}": {
      "get": {
        "summary": "GET /wifi/networks/{guid}",
        "description": "Retrieve the details about the WiFi network with the specified GUID",
        "tags": [
          "Wifi",
          "Networks"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetWifi_network"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/wifi/connections": {
      "get": {
        "summary": "GET /wifi/connections",
        "description": "Retrieve the list of WiFi networks already configured",
        "tags": [
          "Wifi",
          "Connections"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetWifi_connections"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /wifi/connections",
        "description": "Add a new WiFi network configuration",
        "tags": [
          "Wifi",
          "Connections"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Wifi_connections",
            "in": "body",
            "description": "The details of the wifi_connections",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostWifi_connections"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetWifi_connections"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/wifi/connections/{uuid}": {
      "get": {
        "summary": "GET /wifi/connections/{uuid}",
        "description": "Retrieve the details about the WiFi network configuration with the specified UUID",
        "tags": [
          "Wifi",
          "Connections"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetWifi_connection"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /wifi/connections/{uuid}",
        "description": "Erase the WiFi network configuration with the specified UUID",
        "tags": [
          "Wifi",
          "Connections"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /wifi/connections/{uuid}",
        "description": "Connect to the network with the specified UUID",
        "tags": [
          "Wifi",
          "Connections"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "uuid",
            "in": "path",
            "description": "The uuid to add the new resource to",
            "required": true,
            "type": "string"
          },
          {
            "name": "Wifi_connection",
            "in": "body",
            "description": "The details of the wifi_connection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostWifi_connection"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetWifi_connection"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/statistics/distance": {
      "get": {
        "summary": "GET /statistics/distance",
        "description": "Retrieve the list with the distance driven by the robot at different dates and times",
        "tags": [
          "Statistics",
          "Distance"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetDistance_statistics"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/registers": {
      "get": {
        "summary": "GET /registers",
        "description": "Retrieve the list of PLC registers from the robot. Registers 1 to 100 are integers and registers 101-200 are float",
        "tags": [
          "Registers"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetRegisters"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/registers/{id}": {
      "get": {
        "summary": "GET /registers/{id}",
        "description": "Retrieve the value of the PLC register with the specified ID. Registers 1 to 100 are integers and registers 101-200 are float",
        "tags": [
          "Registers"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id to search for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetRegister"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /registers/{id}",
        "description": "Modify the value of the PLC register with the specified ID",
        "tags": [
          "Registers"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id to modify",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetRegister"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /registers/{id}",
        "description": "Modify the value of the PLC register with the specified ID. Registers 1 to 100 are integers and registers 101-200 are float.\nEven though this is not a standard use of the POST call it has been included for compatibility purposes",
        "tags": [
          "Registers"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id to add the new resource to",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Register",
            "in": "body",
            "description": "The details of the register",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostRegister"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetRegister"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/remote_support": {
      "get": {
        "summary": "GET /remote_support",
        "description": "Retrieve the status of the remote support connection",
        "tags": [
          "Remote_support"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetRemote_support"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /remote_support",
        "description": "Modify the remote support connection timeout",
        "tags": [
          "Remote_support"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Remote_support",
            "in": "body",
            "description": "The new values of the remote_support",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutRemote_support"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetRemote_support"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/remote_support/log": {
      "get": {
        "summary": "GET /remote_support/log",
        "description": "Retrieve the list with the actions performed by the remote support controller",
        "tags": [
          "Remote_support",
          "Log"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetRemote_support_log"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hook/status": {
      "get": {
        "summary": "GET /hook/status",
        "description": "Retrieve the extended status of the Hook",
        "tags": [
          "Hook",
          "Status"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetHook"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hook/brake": {
      "get": {
        "summary": "GET /hook/brake",
        "description": "Retrieve the state of the Hook brake",
        "tags": [
          "Hook",
          "Brake"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetHook_brake"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /hook/brake",
        "description": "Activate or release the Hook brake",
        "tags": [
          "Hook",
          "Brake"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Hook_brake",
            "in": "body",
            "description": "The new values of the hook_brake",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutHook_brake"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetHook_brake"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hook/gripper": {
      "get": {
        "summary": "GET /hook/gripper",
        "description": "Retrieve the state of the Hook gripper",
        "tags": [
          "Hook",
          "Gripper"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetHook_gripper"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /hook/gripper",
        "description": "Open or close the Hook gripper",
        "tags": [
          "Hook",
          "Gripper"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Hook_gripper",
            "in": "body",
            "description": "The new values of the hook_gripper",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutHook_gripper"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetHook_gripper"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hook/height": {
      "get": {
        "summary": "GET /hook/height",
        "description": "Retrieve the height of the Hook",
        "tags": [
          "Hook",
          "Height"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetHook_height"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /hook/height",
        "description": "Modify the height of the Hook",
        "tags": [
          "Hook",
          "Height"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Hook_height",
            "in": "body",
            "description": "The new values of the hook_height",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutHook_height"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetHook_height"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ssl/cert": {
      "post": {
        "summary": "POST /ssl/cert",
        "description": "Upload new certificate pair",
        "tags": [
          "Ssl",
          "Cert"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Cert",
            "in": "body",
            "description": "The details of the cert",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostCert"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetCert"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /ssl/cert",
        "description": "Use default self-signed certificate",
        "tags": [
          "Ssl",
          "Cert"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/setting_groups": {
      "get": {
        "summary": "GET /setting_groups",
        "description": "Retrieve a list with the settings groups",
        "tags": [
          "Setting_groups"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetSetting_groups"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/setting_groups/{id}": {
      "get": {
        "summary": "GET /setting_groups/{id}",
        "description": "Retrieve the details about the settings group with the specified ID",
        "tags": [
          "Setting_groups"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetSetting_group"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/settings": {
      "get": {
        "summary": "GET /settings",
        "description": "Retrieve a list with the settings",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetSettings"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/settings/{id}": {
      "get": {
        "summary": "GET /settings/{id}",
        "description": "Retrieve the details of the setting with the specified ID",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetSetting"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /settings/{id}",
        "description": "Modify the values of the setting with the specified ID",
        "tags": [
          "Settings"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Setting",
            "in": "body",
            "description": "The new values of the setting",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutSetting"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetSetting"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/setting_groups/{settings_group_id}/settings": {
      "get": {
        "summary": "GET /setting_groups/{settings_group_id}/settings",
        "description": "Retrieve the list of settings from the settings group with the specified settings group ID",
        "tags": [
          "Setting_groups",
          "Settings"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "settings_group_id",
            "in": "path",
            "description": "The settings_group_id to search for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetSetting_group_settings"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/settings/advanced": {
      "get": {
        "summary": "GET /settings/advanced",
        "description": "Retrieve the list with the advanced settings",
        "tags": [
          "Settings",
          "Advanced"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetSettings_advanced"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/settings/advanced/{id}": {
      "get": {
        "summary": "GET /settings/advanced/{id}",
        "description": "Retrieve the details of the advanced setting with the specified ID",
        "tags": [
          "Settings",
          "Advanced"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetSetting_advanced"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /settings/advanced/{id}",
        "description": "Modify the values of the advanced setting with the specified ID",
        "tags": [
          "Settings",
          "Advanced"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Setting_advanced",
            "in": "body",
            "description": "The new values of the setting_advanced",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutSetting_advanced"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetSetting_advanced"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/setting_groups/{settings_group_id}/settings/advanced": {
      "get": {
        "summary": "GET /setting_groups/{settings_group_id}/settings/advanced",
        "description": "Retrieve the list of advanced settings from the settings group with the specified settings group ID",
        "tags": [
          "Setting_groups",
          "Settings",
          "Advanced"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "settings_group_id",
            "in": "path",
            "description": "The settings_group_id to search for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetSetting_group_advanced_settings"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service_book/{guid}": {
      "get": {
        "summary": "GET /service_book/{guid}",
        "description": "Retrieve note with the GUID",
        "tags": [
          "Service_book"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetService_book"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /service_book/{guid}",
        "description": "Erase the note with the specified GUID",
        "tags": [
          "Service_book"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service_book": {
      "get": {
        "summary": "GET /service_book",
        "description": "Retrieve service book entries accessible by user",
        "tags": [
          "Service_book"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetService_books"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /service_book",
        "description": "Add a service book note",
        "tags": [
          "Service_book"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Service_books",
            "in": "body",
            "description": "The details of the service_books",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostService_books"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetService_books"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboards": {
      "get": {
        "summary": "GET /dashboards",
        "description": "Retrieve the list of dashboards",
        "tags": [
          "Dashboards"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetDashboards"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /dashboards",
        "description": "Add a new dashboard",
        "tags": [
          "Dashboards"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Dashboards",
            "in": "body",
            "description": "The details of the dashboards",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostDashboards"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetDashboards"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboards/{guid}": {
      "get": {
        "summary": "GET /dashboards/{guid}",
        "description": "Retrieve the details of the dashboard with the specified GUID",
        "tags": [
          "Dashboards"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetDashboard"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /dashboards/{guid}",
        "description": "Modify the values of the dashboard with the specified GUID",
        "tags": [
          "Dashboards"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Dashboard",
            "in": "body",
            "description": "The new values of the dashboard",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutDashboard"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetDashboard"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /dashboards/{guid}",
        "description": "Erase the dashboard with the specified GUID",
        "tags": [
          "Dashboards"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboards/{dashboard_id}/widgets": {
      "get": {
        "summary": "GET /dashboards/{dashboard_id}/widgets",
        "description": "Retrieve the list of widgets of the dashboard with the specified dashboard ID",
        "tags": [
          "Dashboards",
          "Widgets"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "dashboard_id",
            "in": "path",
            "description": "The dashboard_id to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetDashboard_widgets"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /dashboards/{dashboard_id}/widgets",
        "description": "Add a new widget to the dashboard with the specified dashboard ID",
        "tags": [
          "Dashboards",
          "Widgets"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "dashboard_id",
            "in": "path",
            "description": "The dashboard_id to add the new resource to",
            "required": true,
            "type": "string"
          },
          {
            "name": "Dashboard_widgets",
            "in": "body",
            "description": "The details of the dashboard_widgets",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostDashboard_widgets"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetDashboard_widgets"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dashboards/{dashboard_id}/widgets/{guid}": {
      "get": {
        "summary": "GET /dashboards/{dashboard_id}/widgets/{guid}",
        "description": "Retrieve the details about the widget with the specified GUID in the dashboard with the specified dashboard ID",
        "tags": [
          "Dashboards",
          "Widgets"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "dashboard_id",
            "in": "path",
            "description": "The dashboard_id to search for",
            "required": true,
            "type": "string"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetDashboard_widget"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /dashboards/{dashboard_id}/widgets/{guid}",
        "description": "Modify the values of the widget with the specified GUID in the dashboard with the specified dashboard ID",
        "tags": [
          "Dashboards",
          "Widgets"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "dashboard_id",
            "in": "path",
            "description": "The dashboard_id to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Dashboard_widget",
            "in": "body",
            "description": "The new values of the dashboard_widget",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutDashboard_widget"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetDashboard_widget"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /dashboards/{dashboard_id}/widgets/{guid}",
        "description": "Erase the widget with the specified GUID from the dashboard with the specified dashboard ID",
        "tags": [
          "Dashboards",
          "Widgets"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "dashboard_id",
            "in": "path",
            "description": "The dashboard_id to delete",
            "required": true,
            "type": "string"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hw/export": {
      "get": {
        "summary": "GET /hw/export",
        "description": "Download a file containing the hardware configuration of the robot",
        "tags": [
          "Hw",
          "Export"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetHw_config_export"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hw/import": {
      "post": {
        "summary": "POST /hw/import",
        "description": "Import the hardware configuration contained in the file into the robot",
        "tags": [
          "Hw",
          "Import"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Hw_config_import",
            "in": "body",
            "description": "The details of the hw_config_import",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostHw_config_import"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetHw_config_import"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/platform/timezone": {
      "get": {
        "summary": "GET /platform/timezone",
        "description": "Gets the user set timezone",
        "tags": [
          "Platform",
          "Timezone"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetTimezone"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /platform/timezone",
        "description": "Sets the user timezone",
        "tags": [
          "Platform",
          "Timezone"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Timezone",
            "in": "body",
            "description": "The details of the timezone",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostTimezone"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetTimezone"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "summary": "GET /status",
        "description": "Retrieve the status",
        "tags": [
          "Status"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetStatus"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /status",
        "description": "Modify the status",
        "tags": [
          "Status"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Status",
            "in": "body",
            "description": "The new values of the status",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetStatus"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/factory_reset": {
      "post": {
        "summary": "POST /factory_reset",
        "description": "Clean and migrate the database. Keep hardware configurations",
        "tags": [
          "Factory_reset"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Factory_reset",
            "in": "body",
            "description": "The details of the factory_reset",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostFactory_reset"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetFactory_reset"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/robots": {
      "post": {
        "summary": "POST /robots",
        "description": "Add information about other robots in the world. This is used by the Fleet manager to avoid robot collisions",
        "tags": [
          "Robots"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Robots",
            "in": "body",
            "description": "The details of the robots",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostRobots"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetRobots"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mission_queue": {
      "get": {
        "summary": "GET /mission_queue",
        "description": "Retrieve the list of missions in the queue. Finished, failed, pending and executing missions will be displayed here",
        "tags": [
          "Mission_queue"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetMission_queues"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /mission_queue",
        "description": "Add a new mission to the mission queue. The mission will always go to the end of the queue",
        "tags": [
          "Mission_queue"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Mission_queues",
            "in": "body",
            "description": "The details of the mission_queues",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostMission_queues"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetMission_queues"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /mission_queue",
        "description": "Abort all the pending and executing missions from the mission queue",
        "tags": [
          "Mission_queue"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mission_queue/{id}": {
      "get": {
        "summary": "GET /mission_queue/{id}",
        "description": "Retrieve the details about the mission with the specified ID in the mission queue",
        "tags": [
          "Mission_queue"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id to search for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetMission_queue"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /mission_queue/{id}",
        "description": "Modify the values of the mission with the specified ID in the mission queue",
        "tags": [
          "Mission_queue"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id to modify",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Mission_queue",
            "in": "body",
            "description": "The new values of the mission_queue",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutMission_queue"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetMission_queue"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /mission_queue/{id}",
        "description": "Abort the mission with the specified ID in the mission queue",
        "tags": [
          "Mission_queue"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id to delete",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mission_queue/{mission_queue_id}/actions": {
      "get": {
        "summary": "GET /mission_queue/{mission_queue_id}/actions",
        "description": "Retrieve the list of actions from the mission with the specified ID in the mission queue",
        "tags": [
          "Mission_queue",
          "Actions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "mission_queue_id",
            "in": "path",
            "description": "The mission_queue_id to search for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetMission_queue_actions"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mission_queue/{mission_queue_id}/actions/{id}": {
      "get": {
        "summary": "GET /mission_queue/{mission_queue_id}/actions/{id}",
        "description": "Retrieve the details about the action with the specified ID from the mission with the specified ID in the mission queue",
        "tags": [
          "Mission_queue",
          "Actions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "mission_queue_id",
            "in": "path",
            "description": "The mission_queue_id to search for",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id to search for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetMission_queue_action"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/modbus": {
      "get": {
        "summary": "GET /modbus",
        "description": "Retrieve the modbus registers linked to actions",
        "tags": [
          "Modbus"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetModbus"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/modbus/{id}": {
      "get": {
        "summary": "GET /modbus/{id}",
        "description": "Retrieve the modbus registers linked to an action",
        "tags": [
          "Modbus"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetModbu"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/modbus/missions": {
      "get": {
        "summary": "GET /modbus/missions",
        "description": "Retrieve the list of coils that can trigger a mission",
        "tags": [
          "Modbus",
          "Missions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetModbus_missions"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /modbus/missions",
        "description": "Create a new link between a coil and a mission",
        "tags": [
          "Modbus",
          "Missions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Modbus_missions",
            "in": "body",
            "description": "The details of the modbus_missions",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostModbus_missions"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetModbus_missions"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/modbus/missions/{guid}": {
      "get": {
        "summary": "GET /modbus/missions/{guid}",
        "description": "Retrieve the details about the mission linked with the coil",
        "tags": [
          "Modbus",
          "Missions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetModbus_mission"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /modbus/missions/{guid}",
        "description": "Modify the values of the modbus mission with the specified ID",
        "tags": [
          "Modbus",
          "Missions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Modbus_mission",
            "in": "body",
            "description": "The new values of the modbus_mission",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutModbus_mission"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetModbus_mission"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /modbus/missions/{guid}",
        "description": "Delete the specified ID on the the modbus mission table",
        "tags": [
          "Modbus",
          "Missions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/world_model": {
      "get": {
        "summary": "GET /world_model",
        "description": "Retrieve the information about the needed resources from the robot",
        "tags": [
          "World_model"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetWorld_model"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /world_model",
        "description": "Upload the world model with the existing robots, resources and positions and their respective locks",
        "tags": [
          "World_model"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "World_model",
            "in": "body",
            "description": "The details of the world_model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostWorld_model"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetWorld_model"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/io_modules": {
      "get": {
        "summary": "GET /io_modules",
        "description": "Retrieve the list of configured IO modules",
        "tags": [
          "Io_modules"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetIo_modules"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /io_modules",
        "description": "Add a new IO module",
        "tags": [
          "Io_modules"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Io_modules",
            "in": "body",
            "description": "The details of the io_modules",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostIo_modules"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetIo_modules"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/io_modules/{guid}": {
      "get": {
        "summary": "GET /io_modules/{guid}",
        "description": "Retrieve the details about a IO device with the specified GUID",
        "tags": [
          "Io_modules"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetIo_module"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /io_modules/{guid}",
        "description": "Modify the values of the IO device with the specified GUID",
        "tags": [
          "Io_modules"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Io_module",
            "in": "body",
            "description": "The new values of the io_module",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutIo_module"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetIo_module"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /io_modules/{guid}",
        "description": "Erase the IO device with the specified GUID",
        "tags": [
          "Io_modules"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/io_modules/{guid}/status": {
      "get": {
        "summary": "GET /io_modules/{guid}/status",
        "description": "Retrieve the status of the connection to the IO module with the specified GUID",
        "tags": [
          "Io_modules",
          "Status"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetIo_module_status"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /io_modules/{guid}/status",
        "description": "Connect to theIO module with the specified GUID",
        "tags": [
          "Io_modules",
          "Status"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to add the new resource to",
            "required": true,
            "type": "string"
          },
          {
            "name": "Io_module_status",
            "in": "body",
            "description": "The details of the io_module_status",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostIo_module_status"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetIo_module_status"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /io_modules/{guid}/status",
        "description": "Modify the outputs of the connected IO module with specified GUID",
        "tags": [
          "Io_modules",
          "Status"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Io_module_status",
            "in": "body",
            "description": "The new values of the io_module_status",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutIo_module_status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetIo_module_status"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /io_modules/{guid}/status",
        "description": "Disconnect from the IO module with the specified GUID",
        "tags": [
          "Io_modules",
          "Status"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/sessions": {
      "get": {
        "summary": "GET /sessions",
        "description": "Retrieve the list of sessions",
        "tags": [
          "Sessions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetSessions"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /sessions",
        "description": "Add a new session",
        "tags": [
          "Sessions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Sessions",
            "in": "body",
            "description": "The details of the sessions",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostSessions"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetSessions"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/sessions/{guid}": {
      "get": {
        "summary": "GET /sessions/{guid}",
        "description": "Retrieve the details about the session with the specified GUID",
        "tags": [
          "Sessions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetSession"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /sessions/{guid}",
        "description": "Modify the values of the session with the specified GUID",
        "tags": [
          "Sessions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Session",
            "in": "body",
            "description": "The new values of the session",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutSession"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetSession"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /sessions/{guid}",
        "description": "Erase the session with the specified GUID",
        "tags": [
          "Sessions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/sessions/{guid}/export": {
      "get": {
        "summary": "GET /sessions/{guid}/export",
        "description": "Download a file containing the session with the specified GUID",
        "tags": [
          "Sessions",
          "Export"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetSession_export"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/sessions/import": {
      "get": {
        "summary": "GET /sessions/import",
        "description": "Get progress of the running import",
        "tags": [
          "Sessions",
          "Import"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetSession_import"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /sessions/import",
        "description": "Import the session contained in the file",
        "tags": [
          "Sessions",
          "Import"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Session_import",
            "in": "body",
            "description": "The details of the session_import",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostSession_import"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetSession_import"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /sessions/import",
        "description": "Cancel currently running import",
        "tags": [
          "Sessions",
          "Import"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/maps": {
      "get": {
        "summary": "GET /maps",
        "description": "Retrieve the list of maps",
        "tags": [
          "Maps"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetMaps"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /maps",
        "description": "Add a new map",
        "tags": [
          "Maps"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Maps",
            "in": "body",
            "description": "The details of the maps",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostMaps"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetMaps"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/maps/{guid}": {
      "get": {
        "summary": "GET /maps/{guid}",
        "description": "Retrieve the details about the map with the specified GUID",
        "tags": [
          "Maps"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetMap"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /maps/{guid}",
        "description": "Modify the values of the map with the specified GUID",
        "tags": [
          "Maps"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Map",
            "in": "body",
            "description": "The new values of the map",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutMap"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetMap"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /maps/{guid}",
        "description": "Erase the map with the specified GUID",
        "tags": [
          "Maps"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/sessions/{session_id}/maps": {
      "get": {
        "summary": "GET /sessions/{session_id}/maps",
        "description": "Retrieve the list of maps that belong to the session with the specified session ID",
        "tags": [
          "Sessions",
          "Maps"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "session_id",
            "in": "path",
            "description": "The session_id to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetSession_maps"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/maps/uploads": {
      "get": {
        "summary": "GET /maps/uploads",
        "description": "Retrieve the list of map uploads",
        "tags": [
          "Maps",
          "Uploads"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetMap_uploads"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /maps/uploads",
        "description": "Upload a new map",
        "tags": [
          "Maps",
          "Uploads"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Map_uploads",
            "in": "body",
            "description": "The details of the map_uploads",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostMap_uploads"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetMap_uploads"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/maps/uploads/{guid}": {
      "get": {
        "summary": "GET /maps/uploads/{guid}",
        "description": "Fetch map upload",
        "tags": [
          "Maps",
          "Uploads"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetMap_upload"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /maps/uploads/{guid}",
        "description": "Delete map upload",
        "tags": [
          "Maps",
          "Uploads"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /maps/uploads/{guid}",
        "description": "Apply map upload",
        "tags": [
          "Maps",
          "Uploads"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to add the new resource to",
            "required": true,
            "type": "string"
          },
          {
            "name": "Map_upload",
            "in": "body",
            "description": "The details of the map_upload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostMap_upload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetMap_upload"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/maps/record": {
      "get": {
        "summary": "GET /maps/record",
        "description": "Retrive the latest recording of a map",
        "tags": [
          "Maps",
          "Record"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetMap_record"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /maps/record",
        "description": "Start and stop the recording of a map",
        "tags": [
          "Maps",
          "Record"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Map_record",
            "in": "body",
            "description": "The new values of the map_record",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutMap_record"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetMap_record"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/zones": {
      "get": {
        "summary": "GET /zones",
        "description": "Retrieve the list of zones",
        "tags": [
          "Zones"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetZones"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /zones",
        "description": "Add a new zone",
        "tags": [
          "Zones"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Zones",
            "in": "body",
            "description": "The details of the zones",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostZones"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetZones"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/zones/{guid}": {
      "get": {
        "summary": "GET /zones/{guid}",
        "description": "Retrieve the details about the zone with the specified GUID",
        "tags": [
          "Zones"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetZone"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /zones/{guid}",
        "description": "Modify the values of the zone with the specified GUID",
        "tags": [
          "Zones"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Zone",
            "in": "body",
            "description": "The new values of the zone",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutZone"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetZone"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /zones/{guid}",
        "description": "Erase the zone with the specified GUID",
        "tags": [
          "Zones"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/maps/{map_id}/zones": {
      "get": {
        "summary": "GET /maps/{map_id}/zones",
        "description": "Retrieve the list of zones that belong to the map with the specified map ID",
        "tags": [
          "Maps",
          "Zones"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "map_id",
            "in": "path",
            "description": "The map_id to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetMap_zone"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/zones/definitions": {
      "get": {
        "summary": "GET /zones/definitions",
        "description": "Retrieve definitions of zones and their actions",
        "tags": [
          "Zones",
          "Definitions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetZones_definitions"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/zones/action_definitions": {
      "get": {
        "summary": "GET /zones/action_definitions",
        "description": "Retrieve definitions of zone actions and their parameters",
        "tags": [
          "Zones",
          "Action_definitions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetZone_action_definitions"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/zones/action_definitions/{action_type}": {
      "get": {
        "summary": "GET /zones/action_definitions/{action_type}",
        "description": "Retrieve the details about the action. It displays the parameters of the action and the limits for the values among others",
        "tags": [
          "Zones",
          "Action_definitions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "action_type",
            "in": "path",
            "description": "The action_type to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetZone_action_definition"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/positions": {
      "get": {
        "summary": "GET /positions",
        "description": "Retrieve the list of positions",
        "tags": [
          "Positions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetPositions"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /positions",
        "description": "Add a new position",
        "tags": [
          "Positions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Positions",
            "in": "body",
            "description": "The details of the positions",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPositions"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetPositions"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/positions/{guid}": {
      "get": {
        "summary": "GET /positions/{guid}",
        "description": "Retrieve the details about the position with the specified GUID",
        "tags": [
          "Positions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetPosition"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /positions/{guid}",
        "description": "Modify the values of the position with the specified GUID",
        "tags": [
          "Positions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Position",
            "in": "body",
            "description": "The new values of the position",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutPosition"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetPosition"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /positions/{guid}",
        "description": "Erase the position with the specified GUID",
        "tags": [
          "Positions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/maps/{map_id}/positions": {
      "get": {
        "summary": "GET /maps/{map_id}/positions",
        "description": "Retrieve the list of positions that belong to the map with the specified map ID",
        "tags": [
          "Maps",
          "Positions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "map_id",
            "in": "path",
            "description": "The map_id to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetMap_positions"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/positions/{parent_guid}/helper_positions": {
      "get": {
        "summary": "GET /positions/{parent_guid}/helper_positions",
        "description": "Retrieve the list of helper positions for the position with the specified parent GUID. Only Charging Stations, V markers, VL markers, Shelf and Trolley positions have helper positions",
        "tags": [
          "Positions",
          "Helper_positions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "parent_guid",
            "in": "path",
            "description": "The parent_guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetHelper_positions"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/position_types": {
      "get": {
        "summary": "GET /position_types",
        "description": "Retrieve a list of possible position types",
        "tags": [
          "Position_types"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetPosition_types"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/position_types/{id}": {
      "get": {
        "summary": "GET /position_types/{id}",
        "description": "Retrieve the details about the position type with the specified ID",
        "tags": [
          "Position_types"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id to search for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetPosition_type"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/position_transition_lists": {
      "get": {
        "summary": "GET /position_transition_lists",
        "description": "Retrieve the list of position transition lists",
        "tags": [
          "Position_transition_lists"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetPosition_transition_lists"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /position_transition_lists",
        "description": "Add a new position transition list",
        "tags": [
          "Position_transition_lists"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Position_transition_lists",
            "in": "body",
            "description": "The details of the position_transition_lists",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPosition_transition_lists"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetPosition_transition_lists"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/position_transition_lists/{guid}": {
      "get": {
        "summary": "GET /position_transition_lists/{guid}",
        "description": "Retrieve the details about the position transition list with the specified GUID",
        "tags": [
          "Position_transition_lists"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetPosition_transition_list"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /position_transition_lists/{guid}",
        "description": "Modify the values of the position transition list with the specified GUID",
        "tags": [
          "Position_transition_lists"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Position_transition_list",
            "in": "body",
            "description": "The new values of the position_transition_list",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutPosition_transition_list"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetPosition_transition_list"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /position_transition_lists/{guid}",
        "description": "Erase the position transition list with the specified GUID",
        "tags": [
          "Position_transition_lists"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/sessions/{session_id}/position_transition_lists": {
      "get": {
        "summary": "GET /sessions/{session_id}/position_transition_lists",
        "description": "Retrieve the list of position transition lists that belong to the session with the specified session ID",
        "tags": [
          "Sessions",
          "Position_transition_lists"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "session_id",
            "in": "path",
            "description": "The session_id to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetPosition_transition_list_from_session"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/docking_offsets": {
      "get": {
        "summary": "GET /docking_offsets",
        "description": "Retrieve the list of docking offsets",
        "tags": [
          "Docking_offsets"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetDocking_offsets"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /docking_offsets",
        "description": "Add a new docking offset. The only positions that can have docking offsets are Charging stations, V markers and VL markers",
        "tags": [
          "Docking_offsets"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Docking_offsets",
            "in": "body",
            "description": "The details of the docking_offsets",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostDocking_offsets"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetDocking_offsets"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/docking_offsets/{guid}": {
      "get": {
        "summary": "GET /docking_offsets/{guid}",
        "description": "Retrieve the details of the docking offset with the specified GUID",
        "tags": [
          "Docking_offsets"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetDocking_offset"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /docking_offsets/{guid}",
        "description": "Modify the values of the docking offset with the specified GUID",
        "tags": [
          "Docking_offsets"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Docking_offset",
            "in": "body",
            "description": "The new values of the docking_offset",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutDocking_offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetDocking_offset"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /docking_offsets/{guid}",
        "description": "Erase the docking offset with the specified GUID",
        "tags": [
          "Docking_offsets"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/positions/{pos_id}/docking_offsets": {
      "get": {
        "summary": "GET /positions/{pos_id}/docking_offsets",
        "description": "Retrieve the details of the docking offset of the position with the specified position ID",
        "tags": [
          "Positions",
          "Docking_offsets"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "pos_id",
            "in": "path",
            "description": "The pos_id to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetPos_docking_offsets"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/docking_offsets/shelfs": {
      "get": {
        "summary": "GET /docking_offsets/shelfs",
        "description": "Retrieve the list of docking offsets",
        "tags": [
          "Docking_offsets",
          "Shelfs"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetDocking_offsets_no_pos"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/docking_offsets/types": {
      "get": {
        "summary": "GET /docking_offsets/types",
        "description": "Retrieve a list of possible position types",
        "tags": [
          "Docking_offsets",
          "Types"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetDocking_offset_types"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/docking_offsets/types/{id}": {
      "get": {
        "summary": "GET /docking_offsets/types/{id}",
        "description": "Retrieve the details about the position type with the specified ID",
        "tags": [
          "Docking_offsets",
          "Types"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id to search for",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetDocking_offset_type"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/paths": {
      "get": {
        "summary": "GET /paths",
        "description": "Retrieve the list of paths",
        "tags": [
          "Paths"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetPaths"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /paths",
        "description": "Add a new path",
        "tags": [
          "Paths"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Paths",
            "in": "body",
            "description": "The details of the paths",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPaths"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetPaths"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/paths/{guid}": {
      "get": {
        "summary": "GET /paths/{guid}",
        "description": "Retrieve the path with the specified GUID",
        "tags": [
          "Paths"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetPath"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /paths/{guid}",
        "description": "Modify the values of the path with the specified GUID",
        "tags": [
          "Paths"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Path",
            "in": "body",
            "description": "The new values of the path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutPath"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetPath"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /paths/{guid}",
        "description": "Erase the path with the specified GUID",
        "tags": [
          "Paths"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/maps/{map_id}/paths": {
      "get": {
        "summary": "GET /maps/{map_id}/paths",
        "description": "Retrieve the list of paths that belong to the map with the specified map ID",
        "tags": [
          "Maps",
          "Paths"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "map_id",
            "in": "path",
            "description": "The map_id to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetMap_paths"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/path_guides": {
      "get": {
        "summary": "GET /path_guides",
        "description": "Retrieve the list of path guides",
        "tags": [
          "Path_guides"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetPath_guides"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /path_guides",
        "description": "Add a new path guide",
        "tags": [
          "Path_guides"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Path_guides",
            "in": "body",
            "description": "The details of the path_guides",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPath_guides"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetPath_guides"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/path_guides/{guid}": {
      "get": {
        "summary": "GET /path_guides/{guid}",
        "description": "Retrieve the path guide with the specified GUID",
        "tags": [
          "Path_guides"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetPath_guide"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /path_guides/{guid}",
        "description": "Modify the values of the path guide with the specified GUID",
        "tags": [
          "Path_guides"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Path_guide",
            "in": "body",
            "description": "The new values of the path_guide",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutPath_guide"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetPath_guide"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /path_guides/{guid}",
        "description": "Erase the path guide with the specified GUID",
        "tags": [
          "Path_guides"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/maps/{map_id}/path_guides": {
      "get": {
        "summary": "GET /maps/{map_id}/path_guides",
        "description": "Retrieve the list of path guides that belong to the map with the specified map ID",
        "tags": [
          "Maps",
          "Path_guides"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "map_id",
            "in": "path",
            "description": "The map_id to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetMap_path_guides"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/path_guides/{path_guide_guid}/options": {
      "get": {
        "summary": "GET /path_guides/{path_guide_guid}/options",
        "description": "Retrieve the list of allowed start/via/goal options for the selected path guide",
        "tags": [
          "Path_guides",
          "Options"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "path_guide_guid",
            "in": "path",
            "description": "The path_guide_guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetPath_guide_options"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/path_guides_precalc": {
      "get": {
        "summary": "GET /path_guides_precalc",
        "description": "Retrieve the status of path guides precalculation",
        "tags": [
          "Path_guides_precalc"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetPath_guides_precalc"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /path_guides_precalc",
        "description": "Start/stop precalculation of the specified path guide",
        "tags": [
          "Path_guides_precalc"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Path_guides_precalc",
            "in": "body",
            "description": "The details of the path_guides_precalc",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPath_guides_precalc"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetPath_guides_precalc"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/path_guides_positions": {
      "get": {
        "summary": "GET /path_guides_positions",
        "description": "Retrieve the list of positions used for path guides",
        "tags": [
          "Path_guides_positions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetPath_guides_positions"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /path_guides_positions",
        "description": "Add a new position in a path guide",
        "tags": [
          "Path_guides_positions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Path_guides_positions",
            "in": "body",
            "description": "The details of the path_guides_positions",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPath_guides_positions"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetPath_guides_positions"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/path_guides_positions/{guid}": {
      "get": {
        "summary": "GET /path_guides_positions/{guid}",
        "description": "Retrieve the position for path guides with the specified GUID",
        "tags": [
          "Path_guides_positions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetPath_guides_position"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /path_guides_positions/{guid}",
        "description": "Modify the values of the position for path guides with the specified GUID",
        "tags": [
          "Path_guides_positions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Path_guides_position",
            "in": "body",
            "description": "The new values of the path_guides_position",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutPath_guides_position"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetPath_guides_position"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /path_guides_positions/{guid}",
        "description": "Erase the path guide position with the specified GUID",
        "tags": [
          "Path_guides_positions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/path_guides/{path_guide_guid}/positions": {
      "get": {
        "summary": "GET /path_guides/{path_guide_guid}/positions",
        "description": "Retrieve the list of positions for the path guide with the specified GUID",
        "tags": [
          "Path_guides",
          "Positions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "path_guide_guid",
            "in": "path",
            "description": "The path_guide_guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetPath_guide_positions"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /path_guides/{path_guide_guid}/positions",
        "description": "Add a new position to the path guide with the specified GUID",
        "tags": [
          "Path_guides",
          "Positions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "path_guide_guid",
            "in": "path",
            "description": "The path_guide_guid to add the new resource to",
            "required": true,
            "type": "string"
          },
          {
            "name": "Path_guide_positions",
            "in": "body",
            "description": "The details of the path_guide_positions",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPath_guide_positions"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetPath_guide_positions"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/path_guides/{path_guide_guid}/positions/{guid}": {
      "get": {
        "summary": "GET /path_guides/{path_guide_guid}/positions/{guid}",
        "description": "Retrieve the position with the specified GUID from the path guide with the specified path guide GUID",
        "tags": [
          "Path_guides",
          "Positions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "path_guide_guid",
            "in": "path",
            "description": "The path_guide_guid to search for",
            "required": true,
            "type": "string"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetPath_guide_position"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /path_guides/{path_guide_guid}/positions/{guid}",
        "description": "Modify the values of the position with the specified GUID from the path guide with the specified path guide GUID",
        "tags": [
          "Path_guides",
          "Positions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "path_guide_guid",
            "in": "path",
            "description": "The path_guide_guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Path_guide_position",
            "in": "body",
            "description": "The new values of the path_guide_position",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutPath_guide_position"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetPath_guide_position"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /path_guides/{path_guide_guid}/positions/{guid}",
        "description": "Erase the position with the specified GUID from the path guide with the specified path guide GUID",
        "tags": [
          "Path_guides",
          "Positions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "path_guide_guid",
            "in": "path",
            "description": "The path_guide_guid to delete",
            "required": true,
            "type": "string"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/missions": {
      "get": {
        "summary": "GET /missions",
        "description": "Retrieve the list of missions",
        "tags": [
          "Missions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetMissions"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /missions",
        "description": "Add a new mission",
        "tags": [
          "Missions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Missions",
            "in": "body",
            "description": "The details of the missions",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostMissions"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetMissions"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/missions/{guid}": {
      "get": {
        "summary": "GET /missions/{guid}",
        "description": "Retrieve the details about the mission with the specified GUID",
        "tags": [
          "Missions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetMission"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /missions/{guid}",
        "description": "Modify the values of the mission with the specified GUID",
        "tags": [
          "Missions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Mission",
            "in": "body",
            "description": "The new values of the mission",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutMission"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetMission"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /missions/{guid}",
        "description": "Erase the mission with the specified GUID",
        "tags": [
          "Missions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/sessions/{session_id}/missions": {
      "get": {
        "summary": "GET /sessions/{session_id}/missions",
        "description": "Retrieve the list of missions that belong to the session with the specified session ID",
        "tags": [
          "Sessions",
          "Missions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "session_id",
            "in": "path",
            "description": "The session_id to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetSession_missions"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mission_groups/{group_id}/missions": {
      "get": {
        "summary": "GET /mission_groups/{group_id}/missions",
        "description": "Retrieve the list of missions that belong to the group with the specified group ID",
        "tags": [
          "Mission_groups",
          "Missions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "group_id",
            "in": "path",
            "description": "The group_id to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetGroup_missions"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/missions/{guid}/definition": {
      "get": {
        "summary": "GET /missions/{guid}/definition",
        "description": "Retrieve the mission with the specified GUID as an action definition that can be inserted in another mission",
        "tags": [
          "Missions",
          "Definition"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetMission_definition"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mission_groups": {
      "get": {
        "summary": "GET /mission_groups",
        "description": "Retrieve the list of mission groups",
        "tags": [
          "Mission_groups"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetMission_groups"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /mission_groups",
        "description": "Add a new mission group",
        "tags": [
          "Mission_groups"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Mission_groups",
            "in": "body",
            "description": "The details of the mission_groups",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostMission_groups"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetMission_groups"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mission_groups/{guid}": {
      "get": {
        "summary": "GET /mission_groups/{guid}",
        "description": "Retrieve the details about the mission group with the specified GUID",
        "tags": [
          "Mission_groups"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetMission_group"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /mission_groups/{guid}",
        "description": "Modify the values of the mission group with the specified GUID",
        "tags": [
          "Mission_groups"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Mission_group",
            "in": "body",
            "description": "The new values of the mission_group",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutMission_group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetMission_group"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /mission_groups/{guid}",
        "description": "Erase the mission group with the specified GUID",
        "tags": [
          "Mission_groups"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/missions/{mission_id}/actions": {
      "get": {
        "summary": "GET /missions/{mission_id}/actions",
        "description": "Retrieve the list of actions that belong to the mission with the specified mission ID",
        "tags": [
          "Missions",
          "Actions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "mission_id",
            "in": "path",
            "description": "The mission_id to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetMission_actions"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /missions/{mission_id}/actions",
        "description": "Add a new action to the mission with the specified mission ID",
        "tags": [
          "Missions",
          "Actions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "mission_id",
            "in": "path",
            "description": "The mission_id to add the new resource to",
            "required": true,
            "type": "string"
          },
          {
            "name": "Mission_actions",
            "in": "body",
            "description": "The details of the mission_actions",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostMission_actions"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetMission_actions"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/missions/{mission_id}/actions/{guid}": {
      "get": {
        "summary": "GET /missions/{mission_id}/actions/{guid}",
        "description": "Retrieve the details about the action with the specified GUID that belongs to the mission with the specified mission ID",
        "tags": [
          "Missions",
          "Actions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "mission_id",
            "in": "path",
            "description": "The mission_id to search for",
            "required": true,
            "type": "string"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetMission_action"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /missions/{mission_id}/actions/{guid}",
        "description": "Modify the values of the action with the specified GUID that belongs to the mission with the specified mission ID",
        "tags": [
          "Missions",
          "Actions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "mission_id",
            "in": "path",
            "description": "The mission_id to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Mission_action",
            "in": "body",
            "description": "The new values of the mission_action",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutMission_action"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetMission_action"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /missions/{mission_id}/actions/{guid}",
        "description": "Erase the action with the specified GUID from the mission with the specified mission ID",
        "tags": [
          "Missions",
          "Actions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "mission_id",
            "in": "path",
            "description": "The mission_id to delete",
            "required": true,
            "type": "string"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/actions": {
      "get": {
        "summary": "GET /actions",
        "description": "Retrieve the list of action definitions",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetAction_definitions"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/actions/{action_type}": {
      "get": {
        "summary": "GET /actions/{action_type}",
        "description": "Retrieve the details about the action. It displays the parameters of the action and the limits for the values among others",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "action_type",
            "in": "path",
            "description": "The action_type to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetAction_definition"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /actions/{action_type}",
        "description": "Add a new action definition with the specified action_type",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "action_type",
            "in": "path",
            "description": "The action_type to add the new resource to",
            "required": true,
            "type": "string"
          },
          {
            "name": "Action_definition",
            "in": "body",
            "description": "The details of the action_definition",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostAction_definition"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetAction_definition"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mission_groups/{mission_group_id}/actions": {
      "get": {
        "summary": "GET /mission_groups/{mission_group_id}/actions",
        "description": "Retrieve the list of action definitions from the mission group with the specified mission group ID",
        "tags": [
          "Mission_groups",
          "Actions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "mission_group_id",
            "in": "path",
            "description": "The mission_group_id to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetGroup_action_definition"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/carts": {
      "get": {
        "summary": "GET /carts",
        "description": "Retrieve the list of carts",
        "tags": [
          "Carts"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetCarts"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /carts",
        "description": "Add a new cart",
        "tags": [
          "Carts"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Carts",
            "in": "body",
            "description": "The details of the carts",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostCarts"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetCarts"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/carts/{guid}": {
      "get": {
        "summary": "GET /carts/{guid}",
        "description": "Retrieve the details about the cart with the specified GUID",
        "tags": [
          "Carts"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetCart"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /carts/{guid}",
        "description": "Modify the values of the cart with the specified GUID",
        "tags": [
          "Carts"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Cart",
            "in": "body",
            "description": "The new values of the cart",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutCart"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetCart"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /carts/{guid}",
        "description": "Erase the cart with the specified GUID",
        "tags": [
          "Carts"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cart_calibrations": {
      "get": {
        "summary": "GET /cart_calibrations",
        "description": "Retrieve the list of cart calibrations",
        "tags": [
          "Cart_calibrations"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetCart_calibrations"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /cart_calibrations",
        "description": "Add a new cart calibration",
        "tags": [
          "Cart_calibrations"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Cart_calibrations",
            "in": "body",
            "description": "The details of the cart_calibrations",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostCart_calibrations"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetCart_calibrations"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cart_calibrations/{guid}": {
      "get": {
        "summary": "GET /cart_calibrations/{guid}",
        "description": "Retrieve the details about the cart calibration with the specified GUID",
        "tags": [
          "Cart_calibrations"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetCart_calibration"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /cart_calibrations/{guid}",
        "description": "Modify the values of the cart calibration with the specified GUID",
        "tags": [
          "Cart_calibrations"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Cart_calibration",
            "in": "body",
            "description": "The new values of the cart_calibration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutCart_calibration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetCart_calibration"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /cart_calibrations/{guid}",
        "description": "Erase the cart calibration with the specified GUID",
        "tags": [
          "Cart_calibrations"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cart_types": {
      "get": {
        "summary": "GET /cart_types",
        "description": "Retrieve the list of cart types",
        "tags": [
          "Cart_types"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetCart_types"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /cart_types",
        "description": "Add a new cart type",
        "tags": [
          "Cart_types"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Cart_types",
            "in": "body",
            "description": "The details of the cart_types",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostCart_types"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetCart_types"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cart_types/{guid}": {
      "get": {
        "summary": "GET /cart_types/{guid}",
        "description": "Retrieve the details about the cart type with the specified GUID",
        "tags": [
          "Cart_types"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetCart_type"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /cart_types/{guid}",
        "description": "Modify the values of the cart type with the specified GUID",
        "tags": [
          "Cart_types"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Cart_type",
            "in": "body",
            "description": "The new values of the cart_type",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutCart_type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetCart_type"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /cart_types/{guid}",
        "description": "Erase the cart type with the specified GUID",
        "tags": [
          "Cart_types"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/sounds": {
      "get": {
        "summary": "GET /sounds",
        "description": "Retrieve the list of sounds",
        "tags": [
          "Sounds"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetSounds"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /sounds",
        "description": "Add a new sound",
        "tags": [
          "Sounds"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Sounds",
            "in": "body",
            "description": "The details of the sounds",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostSounds"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetSounds"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/sounds/{guid}": {
      "get": {
        "summary": "GET /sounds/{guid}",
        "description": "Retrieve the details about the sound with the specified GUID",
        "tags": [
          "Sounds"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetSound"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /sounds/{guid}",
        "description": "Modify the values of the sound with the specified GUID",
        "tags": [
          "Sounds"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Sound",
            "in": "body",
            "description": "The new values of the sound",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutSound"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetSound"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /sounds/{guid}",
        "description": "Erase the sound with the specified GUID",
        "tags": [
          "Sounds"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/sounds/{guid}/stream": {
      "get": {
        "summary": "GET /sounds/{guid}/stream",
        "description": "Download the sound file of the sound with the specified GUID",
        "tags": [
          "Sounds",
          "Stream"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetSound_stream"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/footprints": {
      "get": {
        "summary": "GET /footprints",
        "description": "Retrieve a list of footprints currently stored",
        "tags": [
          "Footprints"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetFootprints"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /footprints",
        "description": "Add new footprint to the database",
        "tags": [
          "Footprints"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Footprints",
            "in": "body",
            "description": "The details of the footprints",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostFootprints"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetFootprints"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/footprints/{guid}": {
      "get": {
        "summary": "GET /footprints/{guid}",
        "description": "Retrieve information about a footprint with specified GUID",
        "tags": [
          "Footprints"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetFootprint"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /footprints/{guid}",
        "description": "Modify a footprint with a specified GUID",
        "tags": [
          "Footprints"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Footprint",
            "in": "body",
            "description": "The new values of the footprint",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutFootprint"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetFootprint"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /footprints/{guid}",
        "description": "Delete with a specified GUID",
        "tags": [
          "Footprints"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/elevators": {
      "get": {
        "summary": "GET /elevators",
        "description": "Retrieve a list of elevators in the fleet",
        "tags": [
          "Elevators"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetElevators"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /elevators",
        "description": "Add a new elevator to the fleet",
        "tags": [
          "Elevators"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Elevators",
            "in": "body",
            "description": "The details of the elevators",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostElevators"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetElevators"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/elevators/{guid}": {
      "get": {
        "summary": "GET /elevators/{guid}",
        "description": "Retrieve the details about the elevator with the specified guid",
        "tags": [
          "Elevators"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetElevator"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /elevators/{guid}",
        "description": "Modify the values of the elevator with the specified guid",
        "tags": [
          "Elevators"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Elevator",
            "in": "body",
            "description": "The new values of the elevator",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutElevator"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetElevator"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /elevators/{guid}",
        "description": "Delete the elevator with the specified guid",
        "tags": [
          "Elevators"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/sessions/{session_id}/elevators": {
      "get": {
        "summary": "GET /sessions/{session_id}/elevators",
        "description": "Retrieve the list of elevators that belong to the session with the specified session ID",
        "tags": [
          "Sessions",
          "Elevators"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "session_id",
            "in": "path",
            "description": "The session_id to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetSession_elevators"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/elevator_floors": {
      "get": {
        "summary": "GET /elevator_floors",
        "description": "Retrieve the list of elevator floors in the fleet",
        "tags": [
          "Elevator_floors"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetElevator_floors"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /elevator_floors",
        "description": "Add a new elevator floor to the fleet",
        "tags": [
          "Elevator_floors"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Elevator_floors",
            "in": "body",
            "description": "The details of the elevator_floors",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostElevator_floors"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetElevator_floors"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/elevator_floors/{guid}": {
      "get": {
        "summary": "GET /elevator_floors/{guid}",
        "description": "Retrieve the details about the specified elevator floor",
        "tags": [
          "Elevator_floors"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetElevator_floor"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /elevator_floors/{guid}",
        "description": "Modify the values of the specified elevator floor",
        "tags": [
          "Elevator_floors"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "Elevator_floor",
            "in": "body",
            "description": "The new values of the elevator_floor",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutElevator_floor"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetElevator_floor"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /elevator_floors/{guid}",
        "description": "Delete the specified elevator floor",
        "tags": [
          "Elevator_floors"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/sessions/{session_id}/elevator_floors": {
      "get": {
        "summary": "GET /sessions/{session_id}/elevator_floors",
        "description": "Retrieve the list of elevator floors that belong to the session with the specified session ID",
        "tags": [
          "Sessions",
          "Elevator_floors"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "session_id",
            "in": "path",
            "description": "The session_id to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetSession_elevator_floors"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "summary": "GET /metrics",
        "description": "Retrieve the latests MiR metrics related to the given MiR product in the Prometheus or OpenMetrics text format. Default: OpenMetrics.",
        "tags": [
          "Metrics"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "The response content types accepted by the client",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "text/plain",
                "application/openmetrics-text"
              ],
              "default": "application/openmetrics-text"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetMetrics"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "produces": [
          "text/plain",
          "application/openmetrics-text"
        ]
      }
    },
    "/users": {
      "get": {
        "summary": "GET /users",
        "description": "Retrieve the list of users",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetUsers"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /users",
        "description": "Add a new user",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Users",
            "in": "body",
            "description": "The details of the users",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostUsers"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetUsers"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{guid}": {
      "get": {
        "summary": "GET /users/{guid}",
        "description": "Retrieve the details about the user with the specified GUID",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetUser"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /users/{guid}",
        "description": "Modify the values of the user with the specified GUID",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "User",
            "in": "body",
            "description": "The new values of the user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetUser"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /users/{guid}",
        "description": "Erase the user with the specified GUID",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "summary": "GET /users/me",
        "description": "Retrieve the details about the user currently authorized in the API",
        "tags": [
          "Users",
          "Me"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetMe"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /users/me",
        "description": "Modify the values of the user currently authorized in the API",
        "tags": [
          "Users",
          "Me"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Me",
            "in": "body",
            "description": "The new values of the me",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutMe"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetMe"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/me/permissions": {
      "get": {
        "summary": "GET /users/me/permissions",
        "description": "Retrieve the permission of the user currently authorized in the API",
        "tags": [
          "Users",
          "Me",
          "Permissions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetUser_me_permissions"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/me/group": {
      "get": {
        "summary": "GET /users/me/group",
        "description": "Retrieve the group of the user currently authorized in the API",
        "tags": [
          "Users",
          "Me",
          "Group"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetUser_me_group"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user_groups": {
      "get": {
        "summary": "GET /user_groups",
        "description": "Retrieve the list of user groups",
        "tags": [
          "User_groups"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetUser_groups"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /user_groups",
        "description": "Add a new user group",
        "tags": [
          "User_groups"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "User_groups",
            "in": "body",
            "description": "The details of the user_groups",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostUser_groups"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetUser_groups"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user_groups/{guid}": {
      "get": {
        "summary": "GET /user_groups/{guid}",
        "description": "Retrieve the details about the user group with the specified GUID",
        "tags": [
          "User_groups"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetUser_group"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "PUT /user_groups/{guid}",
        "description": "Modify the values of the user group with the specified GUID",
        "tags": [
          "User_groups"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "User_group",
            "in": "body",
            "description": "The new values of the user_group",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutUser_group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The element has been modified successfully",
            "schema": {
              "$ref": "#/definitions/GetUser_group"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /user_groups/{guid}",
        "description": "Erase the user group with the specified GUID",
        "tags": [
          "User_groups"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/permissions": {
      "get": {
        "summary": "GET /permissions",
        "description": "TODO",
        "tags": [
          "Permissions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetPermissions"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /permissions",
        "description": "TODO",
        "tags": [
          "Permissions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "Permissions",
            "in": "body",
            "description": "The details of the permissions",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPermissions"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetPermissions"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/permissions/{guid}": {
      "get": {
        "summary": "GET /permissions/{guid}",
        "description": "Retrieve the details about the permission with the specified GUID",
        "tags": [
          "Permissions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetPermission"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /permissions/{guid}",
        "description": "Erase the permission with the specified GUID",
        "tags": [
          "Permissions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "guid",
            "in": "path",
            "description": "The guid to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user_groups/{user_group_guid}/permissions": {
      "get": {
        "summary": "GET /user_groups/{user_group_guid}/permissions",
        "description": "Retrieve the list of permissions of the user group with the specified group GUID",
        "tags": [
          "User_groups",
          "Permissions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "user_group_guid",
            "in": "path",
            "description": "The user_group_guid to search for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of elements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetUser_group_permission"
              }
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "POST /user_groups/{user_group_guid}/permissions",
        "description": "Add a new permission to the group with the specified group GUID",
        "tags": [
          "User_groups",
          "Permissions"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          },
          {
            "name": "user_group_guid",
            "in": "path",
            "description": "The user_group_guid to add the new resource to",
            "required": true,
            "type": "string"
          },
          {
            "name": "User_group_permission",
            "in": "body",
            "description": "The details of the user_group_permission",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostUser_group_permission"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetUser_group_permission"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/auth": {
      "post": {
        "summary": "POST /users/auth",
        "description": "Login with user credentials",
        "tags": [
          "Users",
          "Auth"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetUsers_auth"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "DELETE /users/auth",
        "description": "Logout user",
        "tags": [
          "Users",
          "Auth"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "204": {
            "description": "The element has been deleted successfully"
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header or No fields or Invalid filters",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experimental/diagnostics": {
      "get": {
        "summary": "GET /experimental/diagnostics",
        "description": "Retrieve diagnostics status",
        "tags": [
          "Experimental",
          "Diagnostics"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieve the specified element",
            "schema": {
              "$ref": "#/definitions/GetDiagnostics"
            }
          },
          "400": {
            "description": "Wrong output fields or Invalid filters or Invalid ordering or Invalid limits",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "Gone",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/clear_site_data": {
      "post": {
        "summary": "POST /clear_site_data",
        "description": "Clear site data",
        "tags": [
          "Clear_site_data"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/authorization"
          },
          {
            "$ref": "#/parameters/language"
          }
        ],
        "responses": {
          "201": {
            "description": "The element has been created successfully",
            "schema": {
              "$ref": "#/definitions/GetClear_site_data"
            }
          },
          "400": {
            "description": "Bad request or Argument error or Invalid JSON or Missing content type application/json on the header",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Duplicate entry",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Basic": {
      "type": "basic",
      "description": "To authenticate in the API a basic autentication has to be included in the header.\n        It consists in a string that is base64 encoded and it is formed by the username followed by a colon and the password sha-256 encoded.\n        Ex: BASE64( <username>:SHA-256( <password> ) )\n        \nAn example header would look like this:\n\n        Content-Type:application/json\n\n        authorization:Basic ZGlzdHJpYnV0b3I6NjJmMmYwZjFlZmYxMGQzMTUyYzk1ZjZmMDU5NjU3NmU0ODJiYjhlNDQ4MDY0MzNmNGNmOTI5NzkyODM0YjAxNA==\n\n        \nSHA-256 encoder http://www.xorbin.com/tools/sha256-hash-calculator\n        \nBase64 encoded https://www.base64encode.org/\n    "
    }
  },
  "parameters": {
    "authorization": {
      "in": "header",
      "name": "Authorization",
      "type": "string",
      "required": true,
      "description": "Authorization header",
      "enum": [
        ""
      ]
    },
    "language": {
      "in": "header",
      "name": "Accept-Language",
      "type": "string",
      "required": true,
      "description": "Language header",
      "enum": [
        "en_US",
        "de_DE",
        "es_ES",
        "da_DK",
        "zh_CN"
      ],
      "default": "en-US"
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "error_code": {
          "type": "string",
          "description": "The error in machine format"
        },
        "error_human": {
          "type": "string",
          "description": "The error in human friendly format"
        }
      }
    },
    "GetSystem_info": {
      "type": "object",
      "properties": {}
    },
    "GetError_reports": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the autobag"
        },
        "ready": {
          "type": "boolean",
          "description": "Status of the rosbag"
        },
        "module": {
          "type": "string",
          "description": "The module that created the autolog"
        },
        "description": {
          "type": "string",
          "description": ""
        },
        "time": {
          "type": "string",
          "description": "The time where the autolog was created",
          "format": "date-time"
        },
        "download_url": {
          "type": "string",
          "description": "The url from where the bag can be downloaded"
        },
        "generating": {
          "type": "boolean",
          "description": "Indicates whether the error log creation is running or not"
        }
      }
    },
    "PostError_reports": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Min length: 1, Max length: 255"
        }
      },
      "required": [
        "description"
      ]
    },
    "GetError_report": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the autobag"
        },
        "ready": {
          "type": "boolean",
          "description": "Status of the rosbag"
        },
        "module": {
          "type": "string",
          "description": "The module that created the autolog"
        },
        "description": {
          "type": "string",
          "description": ""
        },
        "time": {
          "type": "string",
          "description": "The time where the autolog was created",
          "format": "date-time"
        },
        "download_url": {
          "type": "string",
          "description": "The url from where the bag can be downloaded"
        },
        "generating": {
          "type": "boolean",
          "description": "Indicates whether the error log creation is running or not"
        }
      }
    },
    "GetError_report_download": {
      "type": "object",
      "properties": {}
    },
    "GetSwagger_doc": {
      "type": "object",
      "properties": {}
    },
    "GetSoftware_logs": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The guid of upgrade entry"
        },
        "action": {
          "type": "string",
          "description": "The action performed (upgrade/restore)"
        },
        "state": {
          "type": "string",
          "description": "The state of the upgrade (succeeded/failed/started"
        },
        "from": {
          "type": "string",
          "description": "The software version upgrading from"
        },
        "to": {
          "type": "string",
          "description": "The software version upgrading to"
        },
        "start_time": {
          "type": "string",
          "description": "The start time of the upgrade",
          "format": "date-time"
        },
        "end_time": {
          "type": "string",
          "description": "The end time of the upgrade",
          "format": "date-time"
        }
      }
    },
    "GetSoftware_log": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The guid of upgrade entry"
        },
        "action": {
          "type": "string",
          "description": "The action performed (upgrade/restore)"
        },
        "state": {
          "type": "string",
          "description": "The state of the upgrade (succeeded/failed/started"
        },
        "from": {
          "type": "string",
          "description": "The software version upgrading from"
        },
        "to": {
          "type": "string",
          "description": "The software version upgrading to"
        },
        "message": {
          "type": "string",
          "description": "The status message from upgrade"
        },
        "start_time": {
          "type": "string",
          "description": "The start time of the upgrade",
          "format": "date-time"
        },
        "end_time": {
          "type": "string",
          "description": "The end time of the upgrade",
          "format": "date-time"
        }
      }
    },
    "GetSoftware_backups": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The guid of the software backup"
        },
        "state": {
          "type": "string",
          "description": "The state of the software backup"
        },
        "version": {
          "type": "string",
          "description": "The version of the software backup"
        },
        "date": {
          "type": "string",
          "description": "The date where the backup was created",
          "format": "date-time"
        }
      }
    },
    "GetSoftware_backup": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The guid of the software backup"
        },
        "state": {
          "type": "string",
          "description": "The state of the software backup"
        },
        "version": {
          "type": "string",
          "description": "The version of the software backup"
        },
        "date": {
          "type": "string",
          "description": "The date where the backup was created",
          "format": "date-time"
        }
      }
    },
    "GetSoftware_upgrades": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The guid of the software upgrade"
        },
        "version": {
          "type": "string",
          "description": "The version of the software upgrade"
        },
        "upload_date": {
          "type": "string",
          "description": "The upload date of the software upgrade",
          "format": "date-time"
        },
        "type": {
          "type": "string",
          "description": "The type of the software upgrade"
        }
      }
    },
    "GetSoftware_upgrade": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The guid of the software upgrade"
        },
        "version": {
          "type": "string",
          "description": "The version of the software upgrade"
        },
        "type": {
          "type": "string",
          "description": "The type of the software upgrade"
        },
        "upload_date": {
          "type": "string",
          "description": "The upload date of the software upgrade",
          "format": "date-time"
        }
      }
    },
    "GetSoftware_system_status": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "platform_version": {
          "type": "string",
          "description": "Mir_platform sw version"
        },
        "application_version": {
          "type": "string",
          "description": "Mir_application sw version"
        },
        "last_sw_update_type": {
          "type": "string",
          "description": "Status of the last upgrade in the system"
        },
        "last_sw_update_status": {
          "type": "string",
          "description": "Status of the last upgrade in the system"
        },
        "last_sw_update_date": {
          "type": "string",
          "description": "The date of the last upgrade in the system",
          "format": "date-time"
        },
        "free_disk_space": {
          "type": "string",
          "description": "Free disk space in the sw images partition"
        },
        "used_disk_space": {
          "type": "string",
          "description": "Used disk space in the sw images partition"
        }
      }
    },
    "GetSoftware_robot_peripherals_status": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "peripheral_name": {
          "type": "string",
          "description": "Peripheral name"
        },
        "current_version": {
          "type": "string",
          "description": "Current peripheral fw/sw version"
        },
        "current_upgrade_status": {
          "type": "string",
          "description": "Current peripheral upgrade status"
        },
        "current_upgrade_status_msg": {
          "type": "string",
          "description": "Current peripheral upgrade status message"
        },
        "upgrade_succeeded": {
          "type": "string",
          "description": "True if upgrade is successful, false if failed, if in progress, it should be a string with progress"
        }
      }
    },
    "GetHook_software_interface": {
      "type": "object",
      "properties": {
        "hook_interface_state": {
          "type": "string",
          "description": "Hook interface state"
        },
        "hook_interface_state_code": {
          "type": "integer",
          "description": "Hook interface state"
        },
        "hook_is_upgradeable": {
          "type": "boolean",
          "description": "Wheater the hook is ready to be upgraded"
        },
        "hook_is_upgrading": {
          "type": "boolean",
          "description": "Wheater the hook is upgrading now"
        },
        "uploading_software_to_hook": {
          "type": "boolean",
          "description": "Wheater we are currently uploading software to hook"
        },
        "hook_software_matches_robot": {
          "type": "boolean",
          "description": "Wheter the hook software version matches the robot version"
        },
        "hook_software_version": {
          "type": "string",
          "description": "Hook software version"
        },
        "hook_software_newer_than_robot": {
          "type": "boolean",
          "description": "Whether hook software version is newer than robot version"
        },
        "software_file_missing": {
          "type": "boolean",
          "description": "Original software file not found."
        }
      }
    },
    "PostHook_software_interface": {
      "type": "object",
      "properties": {
        "upgrade": {
          "type": "boolean"
        }
      },
      "required": [
        "upgrade"
      ]
    },
    "GetSetup_serial_devices": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "id": {
          "type": "integer",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": ""
        },
        "value": {
          "type": "string",
          "description": ""
        }
      }
    },
    "GetSetup_serial_device": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": ""
        },
        "ros_name": {
          "type": "string",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": ""
        },
        "value": {
          "type": "string",
          "description": ""
        },
        "default_value": {
          "type": "string",
          "description": ""
        },
        "request_succeeded": {
          "type": "boolean",
          "description": ""
        },
        "url": {
          "type": "string",
          "description": "Specific serial device information"
        }
      }
    },
    "GetSetup_laser_serials": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "id": {
          "type": "integer",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": ""
        },
        "value": {
          "type": "string",
          "description": ""
        }
      }
    },
    "PutSetup_laser_serials": {
      "type": "object",
      "properties": {
        "operation": {
          "type": "string",
          "description": "Max length: 20"
        },
        "front_laser_serial": {
          "type": "string",
          "description": "Max length: 20"
        },
        "back_laser_serial": {
          "type": "string",
          "description": "Max length: 20"
        }
      }
    },
    "GetSetup_mc_serials": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "id": {
          "type": "integer",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": ""
        },
        "value": {
          "type": "string",
          "description": ""
        }
      }
    },
    "PutSetup_mc_serials": {
      "type": "object",
      "properties": {
        "operation": {
          "type": "string",
          "description": "Max length: 20"
        },
        "value": {
          "type": "string",
          "description": "Max length: 20"
        }
      }
    },
    "GetSetup_external_interface_serials": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "id": {
          "type": "integer",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": ""
        },
        "value": {
          "type": "string",
          "description": ""
        }
      }
    },
    "PutSetup_external_interface_serials": {
      "type": "object",
      "properties": {
        "operation": {
          "type": "string",
          "description": "Max length: 20"
        },
        "value": {
          "type": "string",
          "description": "Max length: 20"
        }
      }
    },
    "GetSetup_cameras": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "camera_model": {
          "type": "string",
          "description": ""
        },
        "camera_position": {
          "type": "string",
          "description": ""
        },
        "value": {
          "type": "string",
          "description": ""
        }
      }
    },
    "PutSetup_cameras": {
      "type": "object",
      "properties": {
        "operation": {
          "type": "string",
          "description": "Max length: 20"
        },
        "camera_model": {
          "type": "string",
          "description": "Max length: 20"
        },
        "camera_position": {
          "type": "string",
          "description": "Max length: 20"
        }
      }
    },
    "GetSick_configs": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": ""
        },
        "filename": {
          "type": "string",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": ""
        }
      }
    },
    "GetSick_config": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": ""
        },
        "filename": {
          "type": "string",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": ""
        },
        "supported_software_version": {
          "type": "object",
          "description": "",
          "properties": {
            "from": {
              "type": "string",
              "description": ""
            },
            "to": {
              "type": "string",
              "description": ""
            }
          }
        },
        "crc": {
          "type": "string",
          "description": ""
        },
        "url": {
          "type": "string",
          "description": "Specific sick configuration file."
        }
      }
    },
    "GetSick_config_download": {
      "type": "object",
      "properties": {}
    },
    "GetProtective_scan": {
      "type": "object",
      "properties": {}
    },
    "GetWifi_api": {
      "type": "object",
      "properties": {}
    },
    "GetWifi_networks": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The guid of the wifi"
        },
        "ssid": {
          "type": "string",
          "description": "Ssid of the wlan"
        },
        "connected": {
          "type": "boolean",
          "description": "Connected to this network"
        }
      }
    },
    "GetWifi_network": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The guid of the wifi"
        },
        "ssid": {
          "type": "string",
          "description": "Ssid of the wlan"
        },
        "security": {
          "type": "string",
          "description": "Security"
        },
        "device": {
          "type": "string",
          "description": "Device"
        },
        "strength": {
          "type": "integer",
          "description": "Signal strength"
        },
        "connected": {
          "type": "boolean",
          "description": "Connected to this network"
        },
        "channel": {
          "type": "integer",
          "description": "Network channel "
        },
        "frequency": {
          "type": "string",
          "description": "Network frequency"
        },
        "url": {
          "type": "string",
          "description": "Specific wifi network"
        }
      }
    },
    "GetWifi_connections": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "uuid": {
          "type": "string",
          "description": "Uuid of the connection"
        },
        "name": {
          "type": "string",
          "description": "Name or id of the connection"
        },
        "connected": {
          "type": "boolean",
          "description": "Connected to the network of this connection"
        },
        "mac": {
          "type": "string",
          "description": "Network adapter mac address"
        },
        "bssid": {
          "type": "string",
          "description": "Access point mac address"
        }
      }
    },
    "PostWifi_connections": {
      "type": "object",
      "properties": {
        "ssid": {
          "type": "string",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": ""
        },
        "device": {
          "type": "string",
          "description": ""
        },
        "security": {
          "type": "string",
          "description": ""
        },
        "address": {
          "type": "string"
        },
        "netmask": {
          "type": "string"
        },
        "gateway": {
          "type": "string"
        },
        "dns": {
          "type": "string"
        },
        "scan_freqs": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "bgscan_short_interval": {
          "type": "integer",
          "format": "float"
        },
        "bgscan_long_interval": {
          "type": "integer",
          "format": "float"
        },
        "bgscan_threshold": {
          "type": "integer",
          "format": "float"
        }
      },
      "required": [
        "ssid"
      ]
    },
    "GetWifi_connection": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "Uuid of the connection"
        },
        "name": {
          "type": "string",
          "description": "Name or id of the connection"
        },
        "description": {
          "type": "string",
          "description": "Description of the connection"
        },
        "type": {
          "type": "string",
          "description": "Connection type e.g. 802-11-wireless"
        },
        "device": {
          "type": "string",
          "description": "Device to use for this connection"
        },
        "security": {
          "type": "string",
          "description": "The security method used by the connection"
        },
        "connected": {
          "type": "boolean",
          "description": "Connected to the network of this connection"
        },
        "last_connected": {
          "type": "string",
          "description": "Date and time for when the connection was last successfully connected"
        },
        "ip_address": {
          "type": "string",
          "description": "Ip address for the connection"
        },
        "netmask": {
          "type": "string",
          "description": "Netmask for the connection"
        },
        "broadcast": {
          "type": "string",
          "description": "Broadcast for the connection"
        },
        "dns": {
          "type": "string",
          "description": "Dnss for the connection"
        },
        "mac": {
          "type": "string",
          "description": "Network adapter mac address"
        },
        "bssid": {
          "type": "string",
          "description": "Access point mac address"
        },
        "scan_freqs": {
          "type": "array",
          "description": "A list of scan frequecies",
          "items": {
            "type": "integer",
            "description": ""
          }
        },
        "bgscan_short_interval": {
          "type": "integer",
          "description": "Bgscan short interval parameter"
        },
        "bgscan_long_interval": {
          "type": "integer",
          "description": "Bgscan lang interval parameter"
        },
        "bgscan_threshold": {
          "type": "integer",
          "description": "Bgscan threshold parameter"
        },
        "url": {
          "type": "string",
          "description": "Specific connection"
        }
      }
    },
    "PostWifi_connection": {
      "type": "object",
      "properties": {
        "ssid": {
          "type": "string",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": ""
        },
        "device": {
          "type": "string",
          "description": ""
        },
        "security": {
          "type": "string",
          "description": ""
        },
        "address": {
          "type": "string"
        },
        "netmask": {
          "type": "string"
        },
        "gateway": {
          "type": "string"
        },
        "dns": {
          "type": "string"
        },
        "scan_freqs": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "bgscan_short_interval": {
          "type": "integer",
          "format": "float"
        },
        "bgscan_long_interval": {
          "type": "integer",
          "format": "float"
        },
        "bgscan_threshold": {
          "type": "integer",
          "format": "float"
        }
      },
      "required": [
        "ssid"
      ]
    },
    "GetDistance_statistics": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "description": "",
          "format": "date-time"
        },
        "distance": {
          "type": "number",
          "description": "",
          "format": "float"
        }
      }
    },
    "GetRegisters": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "id": {
          "type": "integer",
          "description": "The index of the register"
        },
        "value": {
          "type": "number",
          "description": "The value of the register",
          "format": "float"
        },
        "label": {
          "type": "string",
          "description": "A label for the register"
        }
      }
    },
    "GetRegister": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The index of the register"
        },
        "label": {
          "type": "string",
          "description": "A label for the register"
        },
        "value": {
          "type": "number",
          "description": "The value of the register",
          "format": "float"
        }
      }
    },
    "PostRegister": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number",
          "format": "float"
        },
        "label": {
          "type": "string",
          "description": "Max length: 50"
        }
      },
      "required": []
    },
    "GetRemote_support": {
      "type": "object",
      "properties": {}
    },
    "PutRemote_support": {
      "type": "object",
      "properties": {
        "connection_countdown": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "GetRemote_support_log": {
      "type": "object",
      "properties": {}
    },
    "GetHook": {
      "type": "object",
      "properties": {
        "available": {
          "type": "boolean",
          "description": "Whether the hook data is available or not"
        },
        "brake": {
          "type": "object",
          "description": "",
          "properties": {
            "state_string": {
              "type": "string",
              "description": "The state of the hook brake in human format"
            },
            "state": {
              "type": "integer",
              "description": "The state of the hook brake in machine format"
            },
            "braked": {
              "type": "boolean",
              "description": "Whether the hook brake is activated or not"
            }
          }
        },
        "angle": {
          "type": "number",
          "description": "The angle of the hook arm",
          "format": "float"
        },
        "gripper": {
          "type": "object",
          "description": "",
          "properties": {
            "state_string": {
              "type": "string",
              "description": "The state of the hook gripper in human format"
            },
            "state": {
              "type": "integer",
              "description": "The state of the hook gripper in machine format"
            },
            "closed": {
              "type": "boolean",
              "description": "Whether the hook gripper is closed or not"
            }
          }
        },
        "height": {
          "type": "object",
          "description": "",
          "properties": {
            "state_string": {
              "type": "string",
              "description": "The state of the hook height control in human format"
            },
            "state": {
              "type": "integer",
              "description": "The state of the hook height control in machine format"
            },
            "height": {
              "type": "number",
              "description": "The height of the hook in mm",
              "format": "float"
            }
          }
        }
      }
    },
    "GetHook_brake": {
      "type": "object",
      "properties": {
        "state": {
          "type": "integer",
          "description": "The state of the hook brake in machine format"
        },
        "state_string": {
          "type": "string",
          "description": "The state of the hook brake in human format"
        },
        "braked": {
          "type": "boolean",
          "description": "Whether the brake of the hook is active or not"
        }
      }
    },
    "PutHook_brake": {
      "type": "object",
      "properties": {
        "state": {
          "type": "integer",
          "format": "float",
          "description": "Choices are: {0, 1}"
        }
      }
    },
    "GetHook_gripper": {
      "type": "object",
      "properties": {
        "state": {
          "type": "integer",
          "description": "The sate of the hook gripper in machine format"
        },
        "state_string": {
          "type": "string",
          "description": "The state of the hook gripper in human format"
        },
        "closed": {
          "type": "boolean",
          "description": "Whether the gripper of the hook is closed or not"
        }
      }
    },
    "PutHook_gripper": {
      "type": "object",
      "properties": {
        "state": {
          "type": "integer",
          "format": "float",
          "description": "Choices are: {0, 1}"
        }
      }
    },
    "GetHook_height": {
      "type": "object",
      "properties": {
        "state": {
          "type": "integer",
          "description": "The state of the hook actuator in machine format"
        },
        "state_string": {
          "type": "string",
          "description": "The state of the hook actuator in human format"
        },
        "height": {
          "type": "integer",
          "description": "The height of the hook in mm"
        }
      }
    },
    "PutHook_height": {
      "type": "object",
      "properties": {
        "height": {
          "type": "integer",
          "format": "float"
        },
        "home": {
          "type": "boolean"
        }
      }
    },
    "PostCert": {
      "type": "object",
      "properties": {
        "cert_pem_file": {
          "type": "string",
          "format": "byte"
        },
        "cert_key_file": {
          "type": "string",
          "format": "byte"
        }
      },
      "required": [
        "cert_pem_file",
        "cert_key_file"
      ]
    },
    "GetCert": {
      "type": "object",
      "properties": {}
    },
    "GetSetting_groups": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "id": {
          "type": "integer",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": ""
        }
      }
    },
    "GetSetting_group": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": ""
        },
        "priority": {
          "type": "integer",
          "description": ""
        },
        "settings_count": {
          "type": "integer",
          "description": ""
        },
        "advanced_settings_count": {
          "type": "integer",
          "description": ""
        }
      }
    },
    "GetSettings": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "id": {
          "type": "integer",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": ""
        },
        "value": {
          "type": "string",
          "description": ""
        },
        "default": {
          "type": "string",
          "description": ""
        },
        "parent_name": {
          "type": "string",
          "description": ""
        }
      }
    },
    "GetSetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": ""
        },
        "full_name": {
          "type": "string",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": ""
        },
        "value": {
          "type": "string",
          "description": ""
        },
        "default": {
          "type": "string",
          "description": ""
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "parent_name": {
          "type": "string",
          "description": ""
        },
        "parent_id": {
          "type": "string"
        },
        "parent_value": {
          "type": "string"
        },
        "settings_group_id": {
          "type": "integer",
          "description": ""
        },
        "settings_group": {
          "type": "string",
          "description": ""
        },
        "fieldtype": {
          "type": "string",
          "description": ""
        },
        "constraints": {
          "type": "object",
          "description": ""
        },
        "editable": {
          "type": "string"
        },
        "children_ids": {
          "type": "string"
        }
      }
    },
    "PutSetting": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Max length: 700"
        }
      }
    },
    "GetSetting_group_settings": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "id": {
          "type": "integer",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": ""
        },
        "value": {
          "type": "string",
          "description": ""
        },
        "default": {
          "type": "string",
          "description": ""
        },
        "parent_name": {
          "type": "string",
          "description": ""
        }
      }
    },
    "GetSettings_advanced": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "id": {
          "type": "integer",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": ""
        },
        "value": {
          "type": "string",
          "description": ""
        },
        "default": {
          "type": "string",
          "description": ""
        },
        "parent_name": {
          "type": "string",
          "description": ""
        }
      }
    },
    "GetSetting_advanced": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": ""
        },
        "full_name": {
          "type": "string",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": ""
        },
        "value": {
          "type": "string",
          "description": ""
        },
        "default": {
          "type": "string",
          "description": ""
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "parent_name": {
          "type": "string",
          "description": ""
        },
        "parent_id": {
          "type": "string"
        },
        "parent_value": {
          "type": "string"
        },
        "settings_group_id": {
          "type": "integer",
          "description": ""
        },
        "settings_group": {
          "type": "string",
          "description": ""
        },
        "fieldtype": {
          "type": "string",
          "description": ""
        },
        "constraints": {
          "type": "object",
          "description": ""
        },
        "editable": {
          "type": "string"
        },
        "children_ids": {
          "type": "string"
        }
      }
    },
    "PutSetting_advanced": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Max length: 700"
        }
      }
    },
    "GetSetting_group_advanced_settings": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "id": {
          "type": "integer",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": ""
        },
        "value": {
          "type": "string",
          "description": ""
        },
        "default": {
          "type": "string",
          "description": ""
        },
        "parent_name": {
          "type": "string",
          "description": ""
        }
      }
    },
    "GetService_book": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global unique id across robots that identifies this service note"
        },
        "created_at": {
          "type": "string",
          "description": "Creation time of the service note"
        },
        "created_by_id": {
          "type": "string",
          "description": "The user which created the log"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the user"
        },
        "created_by_name": {
          "type": "string",
          "description": "The user name which created the log"
        },
        "owner_group_guid": {
          "type": "string",
          "description": "The usergroup which owns the service book "
        },
        "owner_group": {
          "type": "string",
          "description": "The url to the owner group"
        },
        "owner_group_name": {
          "type": "string",
          "description": "The group name which owns the log"
        },
        "description": {
          "type": "string",
          "description": "The sevice note"
        }
      }
    },
    "GetService_books": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global unique id across robots that identifies this service note"
        },
        "created_at": {
          "type": "string",
          "description": "Creation time of the service note"
        },
        "created_by_id": {
          "type": "string",
          "description": "The user which created the log"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the user"
        },
        "created_by_name": {
          "type": "string",
          "description": "The user name which created the log"
        },
        "owner_group_guid": {
          "type": "string",
          "description": "The usergroup which owns the service book "
        },
        "owner_group": {
          "type": "string",
          "description": "The url to the owner group"
        },
        "owner_group_name": {
          "type": "string",
          "description": "The group name which owns the log"
        },
        "description": {
          "type": "string",
          "description": "The sevice note"
        }
      }
    },
    "PostService_books": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Min length: 1, Max length: 2056"
        }
      },
      "required": [
        "description"
      ]
    },
    "GetDashboards": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this dashboard"
        },
        "name": {
          "type": "string",
          "description": "The name of this dashboard"
        },
        "widgets": {
          "type": "string",
          "description": "The url to the possible widgets. if the dashboard does not have any widgets then this field is empty"
        }
      }
    },
    "PostDashboards": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 128"
        },
        "fleet_dashboard": {
          "type": "boolean"
        },
        "created_by_id": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "GetDashboard": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this dashboard"
        },
        "name": {
          "type": "string",
          "description": "The name of this dashboard"
        },
        "fleet_dashboard": {
          "type": "boolean",
          "description": ""
        },
        "widgets": {
          "type": "string",
          "description": "The url to the possible widgets. if the dashboard does not have any widgets then this field is empty"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the user that created the dashboard"
        }
      }
    },
    "PutDashboard": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 128"
        }
      }
    },
    "GetDashboard_widgets": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this widget"
        },
        "dashboard_id": {
          "type": "string",
          "description": "The guid of the dashboard this widget belongs to"
        }
      }
    },
    "PostDashboard_widgets": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "settings": {
          "type": "string",
          "description": ""
        },
        "dashboard_id": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "dashboard_id"
      ]
    },
    "GetDashboard_widget": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this widget"
        },
        "dashboard_id": {
          "type": "string",
          "description": "The guid of the dashboard this widget belongs to"
        },
        "dashboard": {
          "type": "string",
          "description": "The url to the dashboard where this widget belongs. "
        },
        "settings": {
          "type": "string",
          "description": "Widgets configuration encoded base 64 in json"
        },
        "created_by_id": {
          "type": "string",
          "description": "User guid of the user of the dashboard which the widget belongs to"
        }
      }
    },
    "PutDashboard_widget": {
      "type": "object",
      "properties": {
        "settings": {
          "type": "string",
          "description": ""
        }
      }
    },
    "GetHw_config_export": {
      "type": "object",
      "properties": {}
    },
    "PostHw_config_import": {
      "type": "object",
      "properties": {
        "file": {
          "type": "string"
        }
      },
      "required": [
        "file"
      ]
    },
    "GetHw_config_import": {
      "type": "object",
      "properties": {}
    },
    "GetTimezone": {
      "type": "object",
      "properties": {}
    },
    "PostTimezone": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "value"
      ]
    },
    "GetStatus": {
      "type": "object",
      "properties": {
        "position": {
          "type": "object",
          "description": "",
          "properties": {
            "x": {
              "type": "number",
              "description": "The x-coordinate of the current position of the robot",
              "format": "float"
            },
            "y": {
              "type": "number",
              "description": "The y-coordinate of the current position of the robot",
              "format": "float"
            },
            "orientation": {
              "type": "number",
              "description": "The orientation of the current position of the robot",
              "format": "float"
            }
          }
        },
        "velocity": {
          "type": "object",
          "description": "",
          "properties": {
            "linear": {
              "type": "number",
              "description": "The linear speed of the robot in m/s",
              "format": "float"
            },
            "angular": {
              "type": "number",
              "description": "The angular speed of the robot in degrees/s",
              "format": "float"
            }
          }
        },
        "battery_time_remaining": {
          "type": "integer",
          "description": "The approximate time remaining on the battery during normal operation of the robot"
        },
        "battery_percentage": {
          "type": "number",
          "description": "The current charge percentage of the battery",
          "format": "float"
        },
        "moved": {
          "type": "number",
          "description": "",
          "format": "float"
        },
        "mission_queue_id": {
          "type": "integer",
          "description": "The id of the current job the robot executes"
        },
        "mission_queue_url": {
          "type": "string",
          "description": "The url to the active mission in queue"
        },
        "mission_text": {
          "type": "string",
          "description": "Status message from mission controller"
        },
        "distance_to_next_target": {
          "type": "number",
          "description": "The distance to the next target of the robot",
          "format": "float"
        },
        "robot_name": {
          "type": "string",
          "description": "The name of the robot"
        },
        "robot_model": {
          "type": "string",
          "description": "The model of the robot"
        },
        "serial_number": {
          "type": "string",
          "description": "The model of the robot"
        },
        "session_id": {
          "type": "string",
          "description": "The id of the session the robot recides in"
        },
        "state_id": {
          "type": "integer",
          "description": "The id of the current state of the robot"
        },
        "state_text": {
          "type": "string",
          "description": "A textual description of the current state of the robot"
        },
        "mode_id": {
          "type": "integer",
          "description": "The id of the current mode of the robot"
        },
        "mode_text": {
          "type": "string",
          "description": "A textual description of the current state of the robot"
        },
        "joystick_web_session_id": {
          "type": "string",
          "description": "The id of the web user that has control over the joystick"
        },
        "map_id": {
          "type": "string",
          "description": "The id of the current map the robot recides in"
        },
        "unloaded_map_changes": {
          "type": "boolean",
          "description": ""
        },
        "safety_system_muted": {
          "type": "boolean",
          "description": ""
        },
        "joystick_low_speed_mode_enabled": {
          "type": "boolean",
          "description": ""
        },
        "mode_key_state": {
          "type": "string",
          "description": "A textual description of the position of the mode key"
        },
        "uptime": {
          "type": "integer",
          "description": "The uptime of the robot"
        },
        "errors": {
          "type": "array",
          "description": "The list of actions executed as part of the mission",
          "items": {
            "type": "object",
            "description": "",
            "properties": {
              "code": {
                "type": "integer",
                "description": "The error code"
              },
              "description": {
                "type": "string",
                "description": "Description of the error"
              },
              "module": {
                "type": "string",
                "description": "The module reporting the error"
              },
              "non_resettable": {
                "type": "boolean",
                "description": "The error cannot be reset from ui"
              }
            }
          }
        },
        "footprint": {
          "type": "string",
          "description": "The current footprint of the robot"
        },
        "hook_status": {
          "type": "object",
          "description": "",
          "properties": {
            "available": {
              "type": "boolean",
              "description": "Boolean indicating if the hook available on this robot"
            },
            "cart_attached": {
              "type": "boolean",
              "description": "Boolean indicating if a trolley is currently attached"
            },
            "cart": {
              "type": "object",
              "description": "",
              "properties": {
                "id": {
                  "type": "number",
                  "description": "The id of the attached trolley",
                  "format": "float"
                },
                "length": {
                  "type": "number",
                  "description": "The length of the attached trolley",
                  "format": "float"
                },
                "width": {
                  "type": "number",
                  "description": "The width of the attached trolley",
                  "format": "float"
                },
                "height": {
                  "type": "number",
                  "description": "The height of the attached trolley",
                  "format": "float"
                },
                "offset_locked_wheels": {
                  "type": "number",
                  "description": "The distance from front of the attached trolley to the locked wheels",
                  "format": "float"
                }
              }
            }
          }
        },
        "hook_data": {
          "type": "object",
          "description": "",
          "properties": {
            "height": {
              "type": "number",
              "description": "Height of the hook measured from the ground in mm.",
              "format": "float"
            },
            "angle": {
              "type": "object",
              "description": "",
              "properties": {
                "angle": {
                  "type": "number",
                  "description": "Angle of the hook in degrees.",
                  "format": "float"
                }
              }
            },
            "length": {
              "type": "number",
              "description": "Length of the hook in meters.",
              "format": "float"
            }
          }
        },
        "user_prompt": {
          "type": "object",
          "description": "",
          "properties": {
            "guid": {
              "type": "string",
              "description": ""
            },
            "user_group": {
              "type": "string",
              "description": ""
            },
            "question": {
              "type": "string",
              "description": ""
            },
            "timeout": {
              "type": "number",
              "description": "",
              "format": "float"
            },
            "options": {
              "type": "array",
              "description": "",
              "items": {
                "type": "string",
                "description": ""
              }
            }
          }
        }
      }
    },
    "PutStatus": {
      "type": "object",
      "properties": {
        "map_id": {
          "type": "string"
        },
        "mode_id": {
          "type": "integer",
          "format": "float",
          "description": "Choices are: {3, 7}"
        },
        "state_id": {
          "type": "integer",
          "format": "float",
          "description": "Choices are: {3, 4, 11}, State: {Ready, Pause, Manualcontrol}"
        },
        "web_session_id": {
          "type": "string",
          "description": ""
        },
        "position": {
          "type": "object"
        },
        "serial_number": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 20"
        },
        "answer": {
          "type": "string",
          "description": "Min length: 1, Max length: 255"
        },
        "guid": {
          "type": "string"
        },
        "clear_error": {
          "type": "boolean",
          "description": "Choices are: {True}"
        },
        "datetime": {
          "type": "string",
          "description": ""
        }
      }
    },
    "PostFactory_reset": {
      "type": "object",
      "properties": {
        "file": {
          "type": "string"
        }
      },
      "required": []
    },
    "GetFactory_reset": {
      "type": "object",
      "properties": {}
    },
    "PostRobots": {
      "type": "object",
      "properties": {
        "robots": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "robots"
      ]
    },
    "GetRobots": {
      "type": "object",
      "properties": {}
    },
    "GetMission_queues": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "id": {
          "type": "integer",
          "description": "The id of the mission queue entry"
        },
        "state": {
          "type": "string",
          "description": "The end state after the mission was executed"
        }
      }
    },
    "PostMission_queues": {
      "type": "object",
      "properties": {
        "mission_id": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "description": "Max length: 200"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "priority": {
          "type": "integer",
          "format": "float"
        },
        "fleet_schedule_guid": {
          "type": "string",
          "description": "Max length: 36"
        },
        "description": {
          "type": "string",
          "description": "Max length: 200"
        }
      },
      "required": [
        "mission_id"
      ]
    },
    "GetMission_queue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The id of the mission queue entry"
        },
        "mission_id": {
          "type": "string",
          "description": "The global id of the mission that was executed"
        },
        "mission": {
          "type": "string",
          "description": "The url to the mission that mission that was executed"
        },
        "state": {
          "type": "string",
          "description": "The end state after the mission was executed"
        },
        "message": {
          "type": "string",
          "description": "The last message produced by the actions in the mission list"
        },
        "ordered": {
          "type": "string",
          "description": "The date end time when the mission was queued",
          "format": "date-time"
        },
        "started": {
          "type": "string",
          "description": "The date and time when the missin was started",
          "format": "date-time"
        },
        "finished": {
          "type": "string",
          "description": "The date and time when the mission was finished",
          "format": "date-time"
        },
        "priority": {
          "type": "integer",
          "description": "The id of the action"
        },
        "actions": {
          "type": "string",
          "description": "The list of parameters this mission queue entry accepts"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description of the type of this element"
        },
        "control_state": {
          "type": "integer",
          "description": "Mission control state. a value above zero indicates that the robot needs an external input in order to continue"
        },
        "control_posid": {
          "type": "string",
          "description": "Global id of position used during control states"
        },
        "parameters": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Inerited from mission description, when item was queued"
        },
        "fleet_schedule_guid": {
          "type": "string",
          "description": "The guid of the mission scheduler element this mission queue element corresponds to on the fleet"
        }
      }
    },
    "PutMission_queue": {
      "type": "object",
      "properties": {
        "cmd": {
          "type": "integer",
          "format": "float"
        },
        "mission_id": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "float"
        }
      }
    },
    "GetMission_queue_actions": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The id of the action"
        },
        "mission_queue_id": {
          "type": "integer",
          "description": "The id of the action"
        },
        "action_id": {
          "type": "string",
          "description": "The id of the action"
        },
        "state": {
          "type": "string",
          "description": "The end state after executing the action"
        },
        "message": {
          "type": "string",
          "description": "The possible message produced by the action"
        },
        "action_type": {
          "type": "string",
          "description": "The name of the action"
        },
        "started": {
          "type": "string",
          "description": "The date and time when the action was started",
          "format": "date-time"
        },
        "finished": {
          "type": "string",
          "description": "The date and time when the action finished",
          "format": "date-time"
        },
        "parameters": {
          "type": "array",
          "description": "The list of parameters to the action",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "GetMission_queue_action": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The id of the action"
        },
        "mission_queue_id": {
          "type": "integer",
          "description": "The id of the action"
        },
        "action_id": {
          "type": "string",
          "description": "The id of the action"
        },
        "state": {
          "type": "string",
          "description": "The end state after executing the action"
        },
        "message": {
          "type": "string",
          "description": "The possible message produced by the action"
        },
        "action_type": {
          "type": "string",
          "description": "The name of the action"
        },
        "started": {
          "type": "string",
          "description": "The date and time when the action was started",
          "format": "date-time"
        },
        "finished": {
          "type": "string",
          "description": "The date and time when the action finished",
          "format": "date-time"
        },
        "parameters": {
          "type": "array",
          "description": "The list of parameters to the action",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "GetModbus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The id of the modbus entry"
        },
        "permissions": {
          "type": "string",
          "description": "If it is allowed to read or write this element"
        },
        "type": {
          "type": "string",
          "description": "The endpoint to which the element refers"
        },
        "title": {
          "type": "string",
          "description": "A textual description of the desired element"
        },
        "description": {
          "type": "string",
          "description": "A more detailed explanation of the attribute"
        },
        "data_type": {
          "type": "string",
          "description": "The data type needed"
        },
        "registers": {
          "type": "array",
          "description": "The registers on the plc where the data will be stored",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "GetModbu": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The id of the modbus entry"
        },
        "permissions": {
          "type": "string",
          "description": "If it is allowed to read or write this element"
        },
        "type": {
          "type": "string",
          "description": "The endpoint to which the element refers"
        },
        "title": {
          "type": "string",
          "description": "A textual description of the desired element"
        },
        "description": {
          "type": "string",
          "description": "A more detailed explanation of the attribute"
        },
        "data_type": {
          "type": "string",
          "description": "The data type needed"
        },
        "registers": {
          "type": "array",
          "description": "The registers on the plc where the data will be stored",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "GetModbus_missions": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this modbus mission"
        },
        "coil_id": {
          "type": "integer",
          "description": "The id of the coil to trigger the mission"
        }
      }
    },
    "PostModbus_missions": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "coil_id": {
          "type": "integer",
          "format": "float"
        },
        "mission_id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 200"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "created_by_id": {
          "type": "string"
        }
      },
      "required": [
        "coil_id",
        "mission_id",
        "name"
      ]
    },
    "GetModbus_mission": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The id of the modbus mission entry"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this modbus mission"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description of the type of this modbus mission"
        },
        "coil_id": {
          "type": "integer",
          "description": "The id of the coil to trigger the mission"
        },
        "mission_id": {
          "type": "string",
          "description": "The global id of the mission that was executed"
        },
        "mission": {
          "type": "string",
          "description": "The url to the mission details"
        },
        "name": {
          "type": "string",
          "description": "A more detailed explanation of the attribute"
        },
        "parameters": {
          "type": "string"
        }
      }
    },
    "PutModbus_mission": {
      "type": "object",
      "properties": {
        "coil_id": {
          "type": "integer",
          "format": "float"
        },
        "mission_id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 200"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "GetWorld_model": {
      "type": "object",
      "properties": {}
    },
    "PostWorld_model": {
      "type": "object",
      "properties": {
        "world_model": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "robot_ip": {
          "type": "string"
        },
        "enable_resource_tracking": {
          "type": "boolean"
        },
        "fleet_id": {
          "type": "string"
        }
      },
      "required": [
        "world_model",
        "robot_ip",
        "enable_resource_tracking"
      ]
    },
    "GetIo_modules": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global unique id across robots that identifies this io module"
        },
        "name": {
          "type": "string",
          "description": "The name of the io module"
        },
        "type": {
          "type": "string",
          "description": "The type of the io module. currently supported devices [wise]."
        }
      }
    },
    "PostIo_modules": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 255"
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "address": {
          "type": "string",
          "description": ""
        },
        "created_by_id": {
          "type": "string"
        },
        "num_inputs": {
          "type": "integer",
          "format": "float"
        },
        "num_outputs": {
          "type": "integer",
          "format": "float"
        }
      },
      "required": [
        "name",
        "address"
      ]
    },
    "GetIo_module": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global unique id across robots that identifies this io module"
        },
        "name": {
          "type": "string",
          "description": "The name of the io module"
        },
        "type": {
          "type": "string",
          "description": "The type of the io module. currently supported devices [wise]."
        },
        "address": {
          "type": "string",
          "description": "The address for connecting to the device. it can be a mac address or an ip depending on the type of io module"
        },
        "num_inputs": {
          "type": "integer",
          "description": "The number of inputs that the io module has"
        },
        "num_outputs": {
          "type": "integer",
          "description": "The number or outputs that the io module has"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description of the type of this io module"
        }
      }
    },
    "PutIo_module": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 255"
        },
        "type": {
          "type": "string",
          "description": "Choices are: {\"wise\"}"
        },
        "address": {
          "type": "string",
          "description": ""
        },
        "num_inputs": {
          "type": "integer",
          "format": "float"
        },
        "num_outputs": {
          "type": "integer",
          "format": "float"
        }
      }
    },
    "GetIo_module_status": {
      "type": "object",
      "properties": {}
    },
    "PostIo_module_status": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "PutIo_module_status": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "float"
        },
        "on": {
          "type": "boolean"
        },
        "timeout": {
          "type": "integer",
          "format": "float"
        }
      }
    },
    "GetSessions": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this area"
        },
        "name": {
          "type": "string",
          "description": "The name of the area"
        }
      }
    },
    "PostSessions": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 40"
        },
        "description": {
          "type": "string",
          "description": "Max length: 255"
        },
        "created_by_id": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "GetSession": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this area"
        },
        "name": {
          "type": "string",
          "description": "The name of the area"
        },
        "description": {
          "type": "string",
          "description": "A possible description of the area"
        },
        "maps": {
          "type": "string",
          "description": "The url to the list of maps that is in this area"
        },
        "export": {
          "type": "string",
          "description": ""
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description of the type of this position"
        },
        "active": {
          "type": "boolean",
          "description": "Boolean indicating whether the session is the active session in the fleet"
        }
      }
    },
    "PutSession": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 40"
        },
        "description": {
          "type": "string",
          "description": "Max length: 255"
        },
        "active": {
          "type": "boolean"
        }
      }
    },
    "GetSession_export": {
      "type": "object",
      "properties": {}
    },
    "GetSession_import": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "description": "A nice name associated with this area action"
        },
        "sessions_total": {
          "type": "integer",
          "description": "A name associated with this area action"
        },
        "sessions_imported": {
          "type": "integer",
          "description": "The type of area action"
        },
        "error_message": {
          "type": "string",
          "description": "A description of this action"
        }
      }
    },
    "PostSession_import": {
      "type": "object",
      "properties": {
        "file": {
          "type": "string"
        }
      },
      "required": [
        "file"
      ]
    },
    "GetMaps": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this map"
        },
        "name": {
          "type": "string",
          "description": "The name of the map"
        }
      }
    },
    "PostMaps": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "session_id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 40"
        },
        "base_map": {
          "type": "string",
          "format": "byte"
        },
        "resolution": {
          "type": "number",
          "format": "float"
        },
        "origin_x": {
          "type": "number",
          "format": "float"
        },
        "origin_y": {
          "type": "number",
          "format": "float"
        },
        "origin_theta": {
          "type": "number",
          "format": "float"
        },
        "created_by_id": {
          "type": "string"
        }
      },
      "required": [
        "session_id",
        "name",
        "origin_x",
        "origin_y",
        "origin_theta"
      ]
    },
    "GetMap": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this map"
        },
        "session_id": {
          "type": "string",
          "description": "The global id unique across robots of the area containing this map"
        },
        "name": {
          "type": "string",
          "description": "The name of the map"
        },
        "base_map": {
          "type": "string",
          "description": "Base layer",
          "format": "byte"
        },
        "resolution": {
          "type": "number",
          "description": "Deprecated - static resolution is 0.05",
          "format": "float"
        },
        "origin_x": {
          "type": "number",
          "description": "The x-coordinate in the map of the center of the map relative to the robots position",
          "format": "float"
        },
        "origin_y": {
          "type": "number",
          "description": "The y-coordinate in the map of the center of the map relative to the robots position",
          "format": "float"
        },
        "origin_theta": {
          "type": "number",
          "description": "The angle in the map of the center of the map relative to the robots position",
          "format": "float"
        },
        "positions": {
          "type": "string",
          "description": "The url to the list of positions in this map"
        },
        "paths": {
          "type": "string",
          "description": "The url to the list of paths in this map"
        },
        "path_guides": {
          "type": "string",
          "description": "The url to the list of path guides in this map"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description of the type of this position"
        }
      }
    },
    "PutMap": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 40"
        },
        "base_map": {
          "type": "string",
          "format": "byte"
        },
        "resolution": {
          "type": "number",
          "format": "float",
          "description": "Deprecated"
        },
        "origin_x": {
          "type": "number",
          "format": "float"
        },
        "origin_y": {
          "type": "number",
          "format": "float"
        },
        "origin_theta": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "GetSession_maps": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this map"
        },
        "name": {
          "type": "string",
          "description": "The name of the map"
        }
      }
    },
    "GetMap_uploads": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global guid of this map upload"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "type": {
          "type": "string",
          "description": ""
        }
      }
    },
    "PostMap_uploads": {
      "type": "object",
      "properties": {
        "image_data": {
          "type": "string",
          "format": "byte"
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "start_map_guid": {
          "type": "string"
        },
        "start_map_x": {
          "type": "number",
          "format": "float"
        },
        "start_map_y": {
          "type": "number",
          "format": "float"
        },
        "start_map_theta": {
          "type": "number",
          "format": "float"
        },
        "guid": {
          "type": "string"
        },
        "created_by_id": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ]
    },
    "GetMap_upload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": ""
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "image_data": {
          "type": "string",
          "description": "",
          "format": "byte"
        },
        "start_map_guid": {
          "type": "string",
          "description": ""
        },
        "start_map_x": {
          "type": "number",
          "description": "",
          "format": "float"
        },
        "start_map_y": {
          "type": "number",
          "description": "",
          "format": "float"
        },
        "start_map_theta": {
          "type": "number",
          "description": "",
          "format": "float"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description of the type of this position"
        },
        "guid": {
          "type": "string",
          "description": "The global guid of this map upload"
        }
      }
    },
    "PostMap_upload": {
      "type": "object",
      "properties": {
        "image_data": {
          "type": "string",
          "format": "byte"
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "start_map_guid": {
          "type": "string"
        },
        "start_map_x": {
          "type": "number",
          "format": "float"
        },
        "start_map_y": {
          "type": "number",
          "format": "float"
        },
        "start_map_theta": {
          "type": "number",
          "format": "float"
        },
        "guid": {
          "type": "string"
        },
        "created_by_id": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ]
    },
    "GetMap_record": {
      "type": "object",
      "properties": {}
    },
    "PutMap_record": {
      "type": "object",
      "properties": {
        "command": {
          "type": "string",
          "description": "Choices are: {\"start\", \"stop\", \"finalize\"}"
        }
      }
    },
    "GetZones": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this area"
        },
        "type_id": {
          "type": "integer",
          "description": "The type of area"
        },
        "map": {
          "type": "string",
          "description": "The url to the map this area belongs to"
        },
        "name": {
          "type": "string",
          "description": "A name associated with this area"
        }
      }
    },
    "PostZones": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Max length: 255"
        },
        "type_id": {
          "type": "integer",
          "format": "float"
        },
        "shape_type": {
          "type": "string",
          "description": ""
        },
        "stroke_width": {
          "type": "number",
          "format": "float"
        },
        "direction": {
          "type": "number",
          "format": "float"
        },
        "polygon": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "map_id": {
          "type": "string"
        },
        "created_by_id": {
          "type": "string"
        }
      },
      "required": [
        "type_id",
        "polygon",
        "map_id"
      ]
    },
    "GetZone": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this area"
        },
        "name": {
          "type": "string",
          "description": "A name associated with this area"
        },
        "type_id": {
          "type": "integer",
          "description": "The type of area"
        },
        "shape_type": {
          "type": "string",
          "description": "The type of the area shape"
        },
        "stroke_width": {
          "type": "number",
          "description": "Width of stroke if shape type is stroke",
          "format": "float"
        },
        "direction": {
          "type": "number",
          "description": "Direction of one way area",
          "format": "float"
        },
        "polygon": {
          "type": "array",
          "description": "The list of coordinates in the area polygon"
        },
        "actions": {
          "type": "object",
          "description": ""
        },
        "map_id": {
          "type": "string",
          "description": "The id of the map this area belongs to"
        },
        "map": {
          "type": "string",
          "description": "The url to the map this area belongs to"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description of the type of this position"
        }
      }
    },
    "PutZone": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Max length: 255"
        },
        "polygon": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "stroke_width": {
          "type": "number",
          "format": "float"
        },
        "direction": {
          "type": "number",
          "format": "float"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "GetMap_zone": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this area"
        },
        "type_id": {
          "type": "integer",
          "description": "The type of area"
        },
        "map": {
          "type": "string",
          "description": "The url to the map this area belongs to"
        },
        "name": {
          "type": "string",
          "description": "A name associated with this area"
        }
      }
    },
    "GetZones_definitions": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A nice name associated with this area action"
        },
        "id": {
          "type": "integer",
          "description": "The type of area"
        },
        "actions": {
          "type": "string"
        },
        "color": {
          "type": "string",
          "description": "The color associated with this area"
        },
        "image": {
          "type": "string",
          "description": ""
        },
        "shape_types": {
          "type": "string"
        },
        "stroke_width": {
          "type": "string"
        },
        "direction": {
          "type": "string"
        }
      }
    },
    "GetZone_action_definitions": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A nice name associated with this area action"
        },
        "action_type": {
          "type": "string",
          "description": "A name associated with this area action"
        },
        "action_type_id": {
          "type": "integer",
          "description": "The type of area action"
        },
        "help": {
          "type": "string",
          "description": "A description of this action"
        },
        "limit": {
          "type": "integer",
          "description": "The amount of actions of this type we can add."
        },
        "parameters": {
          "type": "string"
        }
      }
    },
    "GetZone_action_definition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A nice name associated with this area action"
        },
        "action_type": {
          "type": "string",
          "description": "A name associated with this area action"
        },
        "action_type_id": {
          "type": "integer",
          "description": "The type of area action"
        },
        "help": {
          "type": "string",
          "description": "A description of this action"
        },
        "limit": {
          "type": "integer",
          "description": "The amount of actions of this type we can add."
        },
        "parameters": {
          "type": "string"
        }
      }
    },
    "GetPositions": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this position"
        },
        "name": {
          "type": "string",
          "description": "The name of the position"
        },
        "map": {
          "type": "string",
          "description": "The url to the map this position belongs to"
        },
        "type_id": {
          "type": "integer",
          "description": "The type of position. see the general description above"
        }
      }
    },
    "PostPositions": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 40"
        },
        "pos_x": {
          "type": "number",
          "format": "float"
        },
        "pos_y": {
          "type": "number",
          "format": "float"
        },
        "orientation": {
          "type": "number",
          "format": "float"
        },
        "type_id": {
          "type": "integer",
          "format": "float"
        },
        "map_id": {
          "type": "string"
        },
        "parent_id": {
          "type": "string"
        },
        "created_by_id": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "pos_x",
        "pos_y",
        "orientation",
        "type_id",
        "map_id"
      ]
    },
    "GetPosition": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this position"
        },
        "name": {
          "type": "string",
          "description": "The name of the position"
        },
        "pos_x": {
          "type": "number",
          "description": "The x-coordinate of the position relative to origo of the underlying map",
          "format": "float"
        },
        "pos_y": {
          "type": "number",
          "description": "The y-coordinate of the position relative to origo of the underlying map",
          "format": "float"
        },
        "orientation": {
          "type": "number",
          "description": "The orientation of the position in degrees relative to origo of the underlying map",
          "format": "float"
        },
        "type_id": {
          "type": "integer",
          "description": "The type of position. see the general description above"
        },
        "type": {
          "type": "string",
          "description": "The url to the description of the type of this position"
        },
        "map_id": {
          "type": "string",
          "description": "The global id of the map this positions belongs to"
        },
        "parent_id": {
          "type": "string",
          "description": "The global id of the possible parent position of the current position. a parent position is a position related to the current position, for instance the parent position of a trolley left entry position is the actual trolley position. if the position does not have a parent position then this field is empty"
        },
        "parent": {
          "type": "string",
          "description": "The url to the possible parent position. if the position does not have a parent position then this field is empty"
        },
        "docking_offsets": {
          "type": "string",
          "description": "The url to the possible docking offset. if the position does not have a docking offset then this field is empty"
        },
        "map": {
          "type": "string",
          "description": "The url to the map this position belongs to"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description of the type of this position"
        },
        "help_positions": {
          "type": "string",
          "description": ""
        }
      }
    },
    "PutPosition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 40"
        },
        "pos_x": {
          "type": "number",
          "format": "float"
        },
        "pos_y": {
          "type": "number",
          "format": "float"
        },
        "orientation": {
          "type": "number",
          "format": "float"
        },
        "type_id": {
          "type": "integer",
          "format": "float"
        },
        "map_id": {
          "type": "string"
        },
        "parent_id": {
          "type": "string"
        }
      }
    },
    "GetMap_positions": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this position"
        },
        "name": {
          "type": "string",
          "description": "The name of the position"
        },
        "map": {
          "type": "string",
          "description": "The url to the map this position belongs to"
        },
        "type_id": {
          "type": "integer",
          "description": "The type of position. see the general description above"
        }
      }
    },
    "GetHelper_positions": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this position"
        },
        "name": {
          "type": "string",
          "description": "The name of the position"
        },
        "map": {
          "type": "string",
          "description": "The url to the map this position belongs to"
        },
        "type_id": {
          "type": "integer",
          "description": "The type of position. see the general description above"
        }
      }
    },
    "GetPosition_types": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "id": {
          "type": "integer",
          "description": "Unique id for the position type"
        },
        "name": {
          "type": "string",
          "description": "Name of the position type"
        }
      }
    },
    "GetPosition_type": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique id for the position type"
        },
        "name": {
          "type": "string",
          "description": "Name of the position type"
        },
        "hidden": {
          "type": "boolean",
          "description": "False if the position is not created by the user"
        },
        "reachable_for_robot": {
          "type": "boolean",
          "description": "True if the robot can actually go to that position"
        }
      }
    },
    "GetPosition_transition_lists": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this path"
        },
        "start_pos_id": {
          "type": "string",
          "description": "The id of the start position for the transition list"
        },
        "goal_pos_id": {
          "type": "string",
          "description": "The id of the end position for the transition list"
        },
        "mission_id": {
          "type": "string",
          "description": "The guid of the mission in the transition list"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description of the type of this position"
        }
      }
    },
    "PostPosition_transition_lists": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "start_pos_id": {
          "type": "string"
        },
        "goal_pos_id": {
          "type": "string"
        },
        "mission_id": {
          "type": "string"
        },
        "created_by_id": {
          "type": "string"
        }
      },
      "required": [
        "start_pos_id",
        "goal_pos_id",
        "mission_id"
      ]
    },
    "GetPosition_transition_list": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this path"
        },
        "start_pos_id": {
          "type": "string",
          "description": "The id of the start position for the transition list"
        },
        "goal_pos_id": {
          "type": "string",
          "description": "The id of the end position for the transition list"
        },
        "mission_id": {
          "type": "string",
          "description": "The guid of the mission in the transition list"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description of the type of this position"
        }
      }
    },
    "PutPosition_transition_list": {
      "type": "object",
      "properties": {
        "start_pos_id": {
          "type": "string"
        },
        "goal_pos_id": {
          "type": "string"
        },
        "mission_id": {
          "type": "string"
        }
      }
    },
    "GetPosition_transition_list_from_session": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this path"
        },
        "start_pos_id": {
          "type": "string",
          "description": "The id of the start position for the transition list"
        },
        "goal_pos_id": {
          "type": "string",
          "description": "The id of the end position for the transition list"
        },
        "mission_id": {
          "type": "string",
          "description": "The guid of the mission in the transition list"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description of the type of this position"
        }
      }
    },
    "GetDocking_offsets": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this docking offset"
        },
        "position": {
          "type": "string",
          "description": "The url to the position"
        },
        "name": {
          "type": "string",
          "description": "The name of the docking offset. used for docking offset independent from positions."
        }
      }
    },
    "PostDocking_offsets": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "pos_id": {
          "type": "string"
        },
        "docking_type": {
          "type": "integer",
          "format": "float"
        },
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 255"
        },
        "x_offset": {
          "type": "number",
          "format": "float"
        },
        "y_offset": {
          "type": "number",
          "format": "float"
        },
        "orientation_offset": {
          "type": "number",
          "format": "float"
        },
        "created_by_id": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "x_offset",
        "y_offset",
        "orientation_offset"
      ]
    },
    "GetDocking_offset": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this docking offset"
        },
        "pos_id": {
          "type": "string",
          "description": "The global id refering to the position that this offset belongs to"
        },
        "docking_type": {
          "type": "integer",
          "description": "The docking type of the marker."
        },
        "name": {
          "type": "string",
          "description": "The name of the docking offset. used for docking offset independent from positions."
        },
        "position": {
          "type": "string",
          "description": "The url to the position"
        },
        "x_offset": {
          "type": "number",
          "description": "The x-offset with respect to the docking marker",
          "format": "float"
        },
        "y_offset": {
          "type": "number",
          "description": "The y-offset with respect to the docking marker",
          "format": "float"
        },
        "orientation_offset": {
          "type": "number",
          "description": "The orientation offset with respect to the docking marker",
          "format": "float"
        },
        "bar_length": {
          "type": "number",
          "description": "The length of the bars for bar_markers",
          "format": "float"
        },
        "bar_distance": {
          "type": "number",
          "description": "The width of the bars for bar_markers",
          "format": "float"
        },
        "shelf_leg_asymmetry_x": {
          "type": "number",
          "description": "The asymmetry of the shelf legs in the x direction with respect to the shelf legs marker",
          "format": "float"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description of the type of this position"
        }
      }
    },
    "PutDocking_offset": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 255"
        },
        "x_offset": {
          "type": "number",
          "format": "float"
        },
        "y_offset": {
          "type": "number",
          "format": "float"
        },
        "orientation_offset": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "GetPos_docking_offsets": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this docking offset"
        },
        "position": {
          "type": "string",
          "description": "The url to the position"
        },
        "name": {
          "type": "string",
          "description": "The name of the docking offset. used for docking offset independent from positions."
        }
      }
    },
    "GetDocking_offsets_no_pos": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this docking offset"
        },
        "position": {
          "type": "string",
          "description": "The url to the position"
        },
        "name": {
          "type": "string",
          "description": "The name of the docking offset. used for docking offset independent from positions."
        }
      }
    },
    "GetDocking_offset_types": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "id": {
          "type": "integer",
          "description": "The global id unique across robots that identifies this docking offset"
        },
        "name": {
          "type": "string",
          "description": "The name of the docking offset. used for docking offset independent from positions."
        }
      }
    },
    "GetDocking_offset_type": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The global id unique across robots that identifies this docking offset"
        },
        "name": {
          "type": "string",
          "description": "The name of the docking offset. used for docking offset independent from positions."
        }
      }
    },
    "GetPaths": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this path"
        },
        "start_pos": {
          "type": "string",
          "description": "The url to the start position of the path"
        },
        "goal_pos": {
          "type": "string",
          "description": "The url to the end position of the path"
        }
      }
    },
    "PostPaths": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "start_pos_id": {
          "type": "string"
        },
        "goal_pos_id": {
          "type": "string"
        },
        "length": {
          "type": "number",
          "format": "float"
        },
        "time": {
          "type": "number",
          "format": "float"
        },
        "path": {
          "type": "string",
          "format": "byte"
        },
        "footprint": {
          "type": "string",
          "description": "Max length: 255"
        },
        "map_crc": {
          "type": "string",
          "description": "Min length: 32, Max length: 32"
        },
        "last_used": {
          "type": "string",
          "format": "date-time"
        },
        "autogenerated": {
          "type": "boolean"
        },
        "valid": {
          "type": "boolean"
        }
      },
      "required": [
        "start_pos_id",
        "goal_pos_id",
        "length",
        "time",
        "path",
        "footprint",
        "map_crc",
        "last_used",
        "autogenerated",
        "valid"
      ]
    },
    "GetPath": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this path"
        },
        "start_pos_id": {
          "type": "string",
          "description": "The id of the start position of the path"
        },
        "goal_pos_id": {
          "type": "string",
          "description": "The id of the end position of the path"
        },
        "length": {
          "type": "number",
          "description": "The length of the path in meters",
          "format": "float"
        },
        "time": {
          "type": "number",
          "description": "The time it took to drive the path the first time",
          "format": "float"
        },
        "path": {
          "type": "string",
          "description": "A binary representation of the path",
          "format": "byte"
        },
        "footprint": {
          "type": "string",
          "description": "The footprint of the robot for which this path was generated"
        },
        "map_crc": {
          "type": "string",
          "description": "The crc for the path"
        },
        "last_used": {
          "type": "string",
          "description": "The date and time of the last time this path was used",
          "format": "date-time"
        },
        "autogenerated": {
          "type": "boolean",
          "description": "If the path was autogenerated or not"
        },
        "valid": {
          "type": "boolean",
          "description": "If the path is valid or not"
        },
        "start_pos": {
          "type": "string",
          "description": "The url to the start position of the path"
        },
        "goal_pos": {
          "type": "string",
          "description": "The url to the end position of the path"
        }
      }
    },
    "PutPath": {
      "type": "object",
      "properties": {
        "start_pos_id": {
          "type": "string"
        },
        "goal_pos_id": {
          "type": "string"
        },
        "length": {
          "type": "number",
          "format": "float"
        },
        "time": {
          "type": "number",
          "format": "float"
        },
        "path": {
          "type": "string",
          "format": "byte"
        },
        "footprint": {
          "type": "string",
          "description": "Max length: 255"
        },
        "map_crc": {
          "type": "string",
          "description": "Min length: 32, Max length: 32"
        },
        "last_used": {
          "type": "string",
          "format": "date-time"
        },
        "autogenerated": {
          "type": "boolean"
        },
        "valid": {
          "type": "boolean"
        }
      }
    },
    "GetMap_paths": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this path"
        },
        "start_pos": {
          "type": "string",
          "description": "The url to the start position of the path"
        },
        "goal_pos": {
          "type": "string",
          "description": "The url to the end position of the path"
        }
      }
    },
    "GetPath_guides": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global unique id across robots that identifies this path guide"
        },
        "name": {
          "type": "string",
          "description": "The name of the path guide"
        }
      }
    },
    "PostPath_guides": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 128"
        },
        "map_id": {
          "type": "string"
        },
        "created_by_id": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "map_id"
      ]
    },
    "GetPath_guide": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global unique id across robots that identifies this path guide"
        },
        "name": {
          "type": "string",
          "description": "The name of the path guide"
        },
        "map_id": {
          "type": "string",
          "description": "The global id of the map this path guide belongs to"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global unique id of the user that created this path guide"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description of the type of this element"
        },
        "positions": {
          "type": "string",
          "description": "The url to the list of positions used in this path guide"
        },
        "options": {
          "type": "string",
          "description": "The url to the list of position options for this path path"
        },
        "starts_count": {
          "type": "integer",
          "description": "The number of start positions in the path guide"
        },
        "vias_count": {
          "type": "integer",
          "description": "The number of via positions in the path guide"
        },
        "goals_count": {
          "type": "integer",
          "description": "The number of goal positions in the path guide"
        }
      }
    },
    "PutPath_guide": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 128"
        },
        "map_id": {
          "type": "string"
        }
      }
    },
    "GetMap_path_guides": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global unique id across robots that identifies this path guide"
        },
        "name": {
          "type": "string",
          "description": "The name of the path guide"
        }
      }
    },
    "GetPath_guide_options": {
      "type": "object",
      "properties": {
        "starts": {
          "type": "array",
          "description": "The list of options for start positions",
          "items": {
            "type": "object",
            "description": "",
            "properties": {
              "pos_guid": {
                "type": "string",
                "description": "The global unique id across robots that identifies this position"
              },
              "name": {
                "type": "string",
                "description": "The name of the position"
              }
            }
          }
        },
        "vias": {
          "type": "array",
          "description": "The list of options for via positions",
          "items": {
            "type": "object",
            "description": "",
            "properties": {
              "pos_guid": {
                "type": "string",
                "description": "The global unique id across robots that identifies this position"
              },
              "name": {
                "type": "string",
                "description": "The name of the position"
              }
            }
          }
        },
        "goals": {
          "type": "array",
          "description": "The list of options for goal positions",
          "items": {
            "type": "object",
            "description": "",
            "properties": {
              "pos_guid": {
                "type": "string",
                "description": "The global unique id across robots that identifies this position"
              },
              "name": {
                "type": "string",
                "description": "The name of the position"
              }
            }
          }
        }
      }
    },
    "GetPath_guides_precalc": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Status message from the precalculation module"
        },
        "active": {
          "type": "boolean",
          "description": "Boolean indicating if a path guide precalculation is in progress"
        },
        "path_guide_guid": {
          "type": "string",
          "description": "The global unique id across robots that identifies the path guide being precalculated"
        },
        "total_count": {
          "type": "integer",
          "description": "The number of total paths to calculate"
        },
        "success_count": {
          "type": "integer",
          "description": "The number of paths that has been successfully calculated"
        },
        "fail_count": {
          "type": "integer",
          "description": "The number of paths that was not possible to precalculate"
        }
      }
    },
    "PostPath_guides_precalc": {
      "type": "object",
      "properties": {
        "command": {
          "type": "string",
          "description": ""
        },
        "guid": {
          "type": "string"
        }
      },
      "required": [
        "command",
        "guid"
      ]
    },
    "GetPath_guides_positions": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global unique id across robots of the position in the list of path constraints positions"
        },
        "path_guide_guid": {
          "type": "string",
          "description": "The global unique id across robots of the path guide this position is related to"
        },
        "pos_type": {
          "type": "string",
          "description": "The type of position of the guide (start/via/goal)"
        }
      }
    },
    "PostPath_guides_positions": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "path_guide_guid": {
          "type": "string"
        },
        "pos_guid": {
          "type": "string"
        },
        "pos_type": {
          "type": "string",
          "description": ""
        },
        "priority": {
          "type": "integer",
          "format": "float"
        }
      },
      "required": [
        "path_guide_guid",
        "pos_guid",
        "pos_type"
      ]
    },
    "GetPath_guides_position": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global unique id across robots of the position in the list of path constraints positions"
        },
        "path_guide_guid": {
          "type": "string",
          "description": "The global unique id across robots of the path guide this position is related to"
        },
        "pos_guid": {
          "type": "string",
          "description": "The global unique id across robots that identifies this position"
        },
        "pos_type": {
          "type": "string",
          "description": "The type of position of the guide (start/via/goal)"
        },
        "priority": {
          "type": "integer",
          "description": "The order in which to follow the via positions in the path guide"
        }
      }
    },
    "PutPath_guides_position": {
      "type": "object",
      "properties": {
        "pos_guid": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "float"
        }
      }
    },
    "GetPath_guide_positions": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global unique id across robots of the position in the list of path constraints positions"
        },
        "path_guide_guid": {
          "type": "string",
          "description": "The global unique id across robots of the path guide this position is related to"
        },
        "pos_type": {
          "type": "string",
          "description": "The type of position of the guide (start/via/goal)"
        }
      }
    },
    "PostPath_guide_positions": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "path_guide_guid": {
          "type": "string"
        },
        "pos_guid": {
          "type": "string"
        },
        "pos_type": {
          "type": "string",
          "description": ""
        },
        "priority": {
          "type": "integer",
          "format": "float"
        }
      },
      "required": [
        "path_guide_guid",
        "pos_guid",
        "pos_type"
      ]
    },
    "GetPath_guide_position": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global unique id across robots of the position in the list of path constraints positions"
        },
        "path_guide_guid": {
          "type": "string",
          "description": "The global unique id across robots of the path guide this position is related to"
        },
        "pos_guid": {
          "type": "string",
          "description": "The global unique id across robots that identifies this position"
        },
        "pos_type": {
          "type": "string",
          "description": "The type of position of the guide (start/via/goal)"
        },
        "priority": {
          "type": "integer",
          "description": "The order in which to follow the via positions in the path guide"
        }
      }
    },
    "PutPath_guide_position": {
      "type": "object",
      "properties": {
        "pos_guid": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "float"
        }
      }
    },
    "GetMissions": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this mission"
        },
        "name": {
          "type": "string",
          "description": "The name of the mission"
        }
      }
    },
    "PostMissions": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 255"
        },
        "description": {
          "type": "string",
          "description": "Max length: 255"
        },
        "hidden": {
          "type": "boolean"
        },
        "group_id": {
          "type": "string"
        },
        "session_id": {
          "type": "string"
        },
        "created_by_id": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "group_id"
      ]
    },
    "GetMission": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this mission"
        },
        "name": {
          "type": "string",
          "description": "The name of the mission"
        },
        "description": {
          "type": "string",
          "description": "The description of the mission"
        },
        "session_id": {
          "type": "string",
          "description": "The id of the area this mission belongs to, or null if the mission belongs to all areas"
        },
        "group_id": {
          "type": "string",
          "description": "The id of the area this mission belongs to, or null if the mission belongs to all areas"
        },
        "hidden": {
          "type": "boolean",
          "description": "If this mission is hidden in the mission list"
        },
        "is_template": {
          "type": "boolean",
          "description": "True if the missions is a template mission"
        },
        "actions": {
          "type": "string",
          "description": "The url to the list of actions contained in this mission"
        },
        "definition": {
          "type": "string",
          "description": "The url to the list of input parameters this mission accepts"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description of the type of this position"
        },
        "valid": {
          "type": "boolean",
          "description": "Indicates if the mission contains only existing submissions"
        },
        "has_user_parameters": {
          "type": "boolean",
          "description": "Indicates if the mission has dynamic parameters"
        }
      }
    },
    "PutMission": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 255"
        },
        "description": {
          "type": "string",
          "description": "Max length: 255"
        },
        "hidden": {
          "type": "boolean"
        },
        "session_id": {
          "type": "string"
        },
        "group_id": {
          "type": "string"
        }
      }
    },
    "GetSession_missions": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this mission"
        },
        "name": {
          "type": "string",
          "description": "The name of the mission"
        }
      }
    },
    "GetGroup_missions": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this mission"
        },
        "name": {
          "type": "string",
          "description": "The name of the mission"
        }
      }
    },
    "GetMission_definition": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "action_type": {
          "type": "string",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": ""
        }
      }
    },
    "GetMission_groups": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this position"
        },
        "name": {
          "type": "string",
          "description": "The name of the position"
        }
      }
    },
    "PostMission_groups": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 63"
        },
        "priority": {
          "type": "integer",
          "format": "float"
        },
        "feature": {
          "type": "string",
          "description": "Min length: 1, Max length: 63"
        },
        "icon": {
          "type": "string",
          "format": "byte"
        },
        "created_by_id": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "priority",
        "feature",
        "icon"
      ]
    },
    "GetMission_group": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this position"
        },
        "name": {
          "type": "string",
          "description": "The name of the position"
        },
        "priority": {
          "type": "integer",
          "description": "The name of the position"
        },
        "feature": {
          "type": "string",
          "description": "The name of the position"
        },
        "icon": {
          "type": "string",
          "description": "The name of the position",
          "format": "byte"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description of the type of this position"
        }
      }
    },
    "PutMission_group": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 63"
        },
        "priority": {
          "type": "integer",
          "format": "float"
        },
        "feature": {
          "type": "string",
          "description": "Min length: 1, Max length: 63"
        },
        "icon": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "GetMission_actions": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this mission"
        },
        "action_type": {
          "type": "string",
          "description": "The id of the type of action"
        },
        "priority": {
          "type": "integer",
          "description": "The priority of the action"
        },
        "mission_id": {
          "type": "string",
          "description": "The id of the mission the action belongs to"
        },
        "parameters": {
          "type": "string"
        }
      }
    },
    "PostMission_actions": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "action_type": {
          "type": "string",
          "description": "Min length: 1, Max length: 255"
        },
        "mission_id": {
          "type": "string"
        },
        "scope_reference": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "float"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "action_type",
        "mission_id",
        "priority",
        "parameters"
      ]
    },
    "GetMission_action": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this mission"
        },
        "action_type": {
          "type": "string",
          "description": "The id of the type of action"
        },
        "mission_id": {
          "type": "string",
          "description": "The id of the mission the action belongs to"
        },
        "priority": {
          "type": "integer",
          "description": "The priority of the action"
        },
        "scope_reference": {
          "type": "string",
          "description": "Reference to the scope in which the action belongs"
        },
        "created_by_id": {
          "type": "string",
          "description": "User guid of the user of the mission which the action belongs to"
        },
        "parameters": {
          "type": "string"
        }
      }
    },
    "PutMission_action": {
      "type": "object",
      "properties": {
        "scope_reference": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "float"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "GetAction_definitions": {
      "type": "object",
      "properties": {
        "action_type": {
          "type": "string",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": ""
        },
        "help": {
          "type": "string",
          "description": ""
        },
        "mission_group_id": {
          "type": "string",
          "description": ""
        },
        "descriptions": {
          "type": "array",
          "description": ""
        },
        "parameters": {
          "type": "array",
          "description": ""
        }
      }
    },
    "GetAction_definition": {
      "type": "object",
      "properties": {
        "action_type": {
          "type": "string",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": ""
        },
        "help": {
          "type": "string",
          "description": ""
        },
        "mission_group_id": {
          "type": "string",
          "description": ""
        },
        "descriptions": {
          "type": "array",
          "description": ""
        },
        "parameters": {
          "type": "array",
          "description": ""
        }
      }
    },
    "PostAction_definition": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "parameters"
      ]
    },
    "GetGroup_action_definition": {
      "type": "object",
      "properties": {
        "action_type": {
          "type": "string",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": ""
        },
        "help": {
          "type": "string",
          "description": ""
        },
        "mission_group_id": {
          "type": "string",
          "description": ""
        },
        "descriptions": {
          "type": "array",
          "description": ""
        },
        "parameters": {
          "type": "array",
          "description": ""
        }
      }
    },
    "GetCarts": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this cart"
        },
        "name": {
          "type": "string",
          "description": "The name of the cart"
        },
        "cart_type": {
          "type": "string",
          "description": "The url to the type of this cart"
        },
        "cart_calibration": {
          "type": "string",
          "description": "The url to the calibration of this cart"
        }
      }
    },
    "PostCarts": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 40"
        },
        "cart_calibration_id": {
          "type": "string"
        },
        "cart_type_id": {
          "type": "string"
        },
        "created_by_id": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "cart_calibration_id",
        "cart_type_id"
      ]
    },
    "GetCart": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this cart"
        },
        "name": {
          "type": "string",
          "description": "The name of the cart"
        },
        "cart_calibration_id": {
          "type": "string",
          "description": "The id of the calibration for this cart has"
        },
        "cart_type_id": {
          "type": "string",
          "description": "The id of the type of this cart"
        },
        "cart_type": {
          "type": "string",
          "description": "The url to the type of this cart"
        },
        "cart_calibration": {
          "type": "string",
          "description": "The url to the calibration of this cart"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description of the type of this position"
        }
      }
    },
    "PutCart": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 40"
        },
        "cart_calibration_id": {
          "type": "string"
        },
        "cart_type_id": {
          "type": "string"
        }
      }
    },
    "GetCart_calibrations": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this cart calibration"
        },
        "name": {
          "type": "string",
          "description": "The name of the cart calibration"
        }
      }
    },
    "PostCart_calibrations": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 40"
        },
        "x": {
          "type": "number",
          "format": "float"
        },
        "y": {
          "type": "number",
          "format": "float"
        },
        "z": {
          "type": "number",
          "format": "float"
        },
        "qx": {
          "type": "number",
          "format": "float"
        },
        "qy": {
          "type": "number",
          "format": "float"
        },
        "qz": {
          "type": "number",
          "format": "float"
        },
        "qw": {
          "type": "number",
          "format": "float"
        },
        "entry_height": {
          "type": "integer",
          "format": "float"
        },
        "lock_height": {
          "type": "integer",
          "format": "float"
        },
        "drive_height": {
          "type": "integer",
          "format": "float"
        },
        "standard": {
          "type": "boolean"
        },
        "created_by_id": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "x",
        "y",
        "z",
        "qx",
        "qy",
        "qz",
        "qw",
        "entry_height",
        "lock_height",
        "drive_height",
        "standard"
      ]
    },
    "GetCart_calibration": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this cart calibration"
        },
        "name": {
          "type": "string",
          "description": "The name of the cart calibration"
        },
        "x": {
          "type": "number",
          "description": "The offset in the x-coordinate of the cart calibration",
          "format": "float"
        },
        "y": {
          "type": "number",
          "description": "The offset in the y-coordinate of the cart calibration",
          "format": "float"
        },
        "z": {
          "type": "number",
          "description": "The offset in the z-coordinate of the cart calibration",
          "format": "float"
        },
        "qx": {
          "type": "number",
          "description": "The qx quaternion of the cart calibration",
          "format": "float"
        },
        "qy": {
          "type": "number",
          "description": "The qy quaternion of the cart calibration",
          "format": "float"
        },
        "qz": {
          "type": "number",
          "description": "The qz quaternion of the cart calibration",
          "format": "float"
        },
        "qw": {
          "type": "number",
          "description": "The qw quaternion of the cart calibration",
          "format": "float"
        },
        "entry_height": {
          "type": "integer",
          "description": "The entry height of the hook for the cart calibration"
        },
        "lock_height": {
          "type": "integer",
          "description": "The lock height of the hook for the cart calibration"
        },
        "drive_height": {
          "type": "integer",
          "description": "The height of the hook when driving with carts of this cart calibration"
        },
        "standard": {
          "type": "boolean",
          "description": "If the cart calibration is standard or not"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description of the type of this position"
        }
      }
    },
    "PutCart_calibration": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 40"
        },
        "x": {
          "type": "number",
          "format": "float"
        },
        "y": {
          "type": "number",
          "format": "float"
        },
        "z": {
          "type": "number",
          "format": "float"
        },
        "qx": {
          "type": "number",
          "format": "float"
        },
        "qy": {
          "type": "number",
          "format": "float"
        },
        "qz": {
          "type": "number",
          "format": "float"
        },
        "qw": {
          "type": "number",
          "format": "float"
        },
        "entry_height": {
          "type": "integer",
          "format": "float"
        },
        "lock_height": {
          "type": "integer",
          "format": "float"
        },
        "drive_height": {
          "type": "integer",
          "format": "float"
        },
        "standard": {
          "type": "boolean"
        }
      }
    },
    "GetCart_types": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this cart type"
        },
        "name": {
          "type": "string",
          "description": "The name of the cart type"
        }
      }
    },
    "PostCart_types": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 40"
        },
        "length": {
          "type": "number",
          "format": "float"
        },
        "width": {
          "type": "number",
          "format": "float"
        },
        "height": {
          "type": "number",
          "format": "float"
        },
        "offset_locked_wheels": {
          "type": "number",
          "format": "float"
        },
        "created_by_id": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "length",
        "width",
        "height",
        "offset_locked_wheels"
      ]
    },
    "GetCart_type": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this cart type"
        },
        "name": {
          "type": "string",
          "description": "The name of the cart type"
        },
        "length": {
          "type": "number",
          "description": "The length of carts of this type",
          "format": "float"
        },
        "width": {
          "type": "number",
          "description": "The width of carts of this type",
          "format": "float"
        },
        "height": {
          "type": "number",
          "description": "The height of carts of this type",
          "format": "float"
        },
        "offset_locked_wheels": {
          "type": "number",
          "description": "The offset from the center of the robot to the locked wheels of carts of this type",
          "format": "float"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description of the type of this position"
        }
      }
    },
    "PutCart_type": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 40"
        },
        "length": {
          "type": "number",
          "format": "float"
        },
        "width": {
          "type": "number",
          "format": "float"
        },
        "height": {
          "type": "number",
          "format": "float"
        },
        "offset_locked_wheels": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "GetSounds": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this sound"
        },
        "name": {
          "type": "string",
          "description": "The name of the sound"
        },
        "length": {
          "type": "string",
          "description": "The length of the sound in the format hh:mm:ss"
        },
        "volume": {
          "type": "integer",
          "description": "The volumne of the sound when played"
        }
      }
    },
    "PostSounds": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 40"
        },
        "sound": {
          "type": "string",
          "format": "binary"
        },
        "note": {
          "type": "string",
          "description": "Max length: 255"
        },
        "volume": {
          "type": "integer",
          "format": "float"
        },
        "created_by_id": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "sound"
      ]
    },
    "GetSound": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this sound"
        },
        "name": {
          "type": "string",
          "description": "The name of the sound"
        },
        "sound": {
          "type": "string",
          "description": "A binary representation of the sound",
          "format": "byte"
        },
        "length": {
          "type": "string",
          "description": "The length of the sound in the format hh:mm:ss"
        },
        "note": {
          "type": "string",
          "description": "A possible description of the sound"
        },
        "volume": {
          "type": "integer",
          "description": "The volumne of the sound when played"
        },
        "stream": {
          "type": "string",
          "description": "The url to stream the raw audio"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description of the type of this position"
        }
      }
    },
    "PutSound": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 40"
        },
        "sound": {
          "type": "string",
          "format": "binary"
        },
        "note": {
          "type": "string",
          "description": "Max length: 255"
        },
        "volume": {
          "type": "integer",
          "format": "float"
        }
      }
    },
    "GetSound_stream": {
      "type": "object",
      "properties": {}
    },
    "GetFootprints": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this cart type"
        },
        "name": {
          "type": "string",
          "description": "The name of the footprint type"
        },
        "config_id": {
          "type": "string",
          "description": "The model name of the product for which the footprint is created"
        }
      }
    },
    "PostFootprints": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "created_by_id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 255"
        },
        "height": {
          "type": "number",
          "format": "float"
        },
        "footprint_points": {
          "type": "string",
          "description": ""
        },
        "config_id": {
          "type": "string",
          "description": ""
        },
        "hook": {
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "height",
        "footprint_points",
        "config_id",
        "hook"
      ]
    },
    "GetFootprint": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this cart type"
        },
        "name": {
          "type": "string",
          "description": "The name of the footprint type"
        },
        "height": {
          "type": "number",
          "description": "The height of this footprint",
          "format": "float"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "footprint_points": {
          "type": "string",
          "description": "The string defining the points in xy of the footprint"
        },
        "config_id": {
          "type": "string",
          "description": "The model name of the product for which the footprint is created"
        },
        "hook": {
          "type": "boolean",
          "description": "If the footprint is for a hook or not"
        },
        "custom": {
          "type": "boolean",
          "description": "Custom or rectangular footprint"
        }
      }
    },
    "PutFootprint": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Min length: 1, Max length: 255"
        },
        "height": {
          "type": "number",
          "format": "float"
        },
        "footprint_points": {
          "type": "string",
          "description": ""
        },
        "config_id": {
          "type": "string",
          "description": "Choices are: {\"MIR500-1000\", \"MIR600-1350\", \"MIR100-200\", \"MIR250\", \"MIR125\", \"UNKNOWN\"}"
        },
        "hook": {
          "type": "boolean"
        }
      }
    },
    "GetElevators": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this elevator"
        },
        "name": {
          "type": "string",
          "description": "The name of the elevator"
        }
      }
    },
    "PostElevators": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "session_guid": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": ""
        },
        "ip": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "turn_in_place": {
          "type": "boolean"
        },
        "one_way": {
          "type": "integer",
          "format": "float"
        },
        "driver": {
          "type": "string",
          "description": ""
        },
        "port": {
          "type": "integer",
          "format": "float"
        },
        "username": {
          "type": "string",
          "description": ""
        },
        "password": {
          "type": "string",
          "description": ""
        },
        "elevator_namespace": {
          "type": "string",
          "description": ""
        },
        "authentication": {
          "type": "string",
          "description": ""
        },
        "security_policy": {
          "type": "string",
          "description": ""
        },
        "created_by_id": {
          "type": "string"
        }
      },
      "required": [
        "session_guid",
        "name",
        "ip",
        "driver"
      ]
    },
    "GetElevator": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this elevator"
        },
        "session_guid": {
          "type": "string",
          "description": "The global id unique across robots containing this elevator"
        },
        "name": {
          "type": "string",
          "description": "The name of the elevator"
        },
        "ip": {
          "type": "string",
          "description": "The ip of the elevator"
        },
        "active": {
          "type": "boolean",
          "description": "Boolean indicating the state of the elevator"
        },
        "turn_in_place": {
          "type": "boolean",
          "description": "Boolean indicating if the robot can turn in the elevator"
        },
        "one_way": {
          "type": "integer",
          "description": "Integer indicating, if the elevator is one_way only, and in which direction"
        },
        "driver": {
          "type": "string",
          "description": "Driver used to connect to the elevator server"
        },
        "port": {
          "type": "integer",
          "description": "Port on which the serer ir running"
        },
        "elevator_namespace": {
          "type": "string",
          "description": "Namespace under which the elevator is available on the opcua server"
        },
        "username": {
          "type": "string",
          "description": "Username for the opcua server"
        },
        "password": {
          "type": "string",
          "description": "Password for the opcua server"
        },
        "authentication": {
          "type": "string",
          "description": "Authentication type for the opcua server"
        },
        "security_policy": {
          "type": "string",
          "description": "Security policy type for the opcua server"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description of this elevator"
        }
      }
    },
    "PutElevator": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": ""
        },
        "ip": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "turn_in_place": {
          "type": "boolean"
        },
        "one_way": {
          "type": "integer",
          "format": "float"
        },
        "port": {
          "type": "integer",
          "format": "float"
        },
        "username": {
          "type": "string",
          "description": ""
        },
        "password": {
          "type": "string",
          "description": ""
        },
        "driver": {
          "type": "string",
          "description": "Choices are: {\"Hitachi\", \"OPC_UA\"}"
        },
        "elevator_namespace": {
          "type": "string",
          "description": ""
        },
        "authentication": {
          "type": "string",
          "description": "Choices are: {\"Anonymous\", \"Username\", \"Certificate\"}"
        },
        "session_guid": {
          "type": "string"
        }
      }
    },
    "GetSession_elevators": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this elevator"
        },
        "name": {
          "type": "string",
          "description": "The name of the elevator"
        }
      }
    },
    "GetElevator_floors": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this elevator floor"
        },
        "map_guid": {
          "type": "string",
          "description": "The map id associated with the floor"
        },
        "map": {
          "type": "string",
          "description": ""
        }
      }
    },
    "PostElevator_floors": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "elevator_guid": {
          "type": "string"
        },
        "map_guid": {
          "type": "string"
        },
        "elevator_entry_pos_guid": {
          "type": "string"
        },
        "elevator_pos_guid": {
          "type": "string"
        },
        "entry_mission_guid": {
          "type": "string"
        },
        "exit_mission_guid": {
          "type": "string"
        },
        "door": {
          "type": "integer",
          "format": "float"
        },
        "floor": {
          "type": "integer",
          "format": "float"
        },
        "created_by_id": {
          "type": "string"
        }
      },
      "required": [
        "elevator_guid",
        "map_guid",
        "elevator_entry_pos_guid",
        "elevator_pos_guid",
        "door",
        "floor"
      ]
    },
    "GetElevator_floor": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this elevator floor"
        },
        "session_guid": {
          "type": "string",
          "description": "The global id unique across robots containing this elevator"
        },
        "elevator_guid": {
          "type": "string",
          "description": "The global unique id of the elevator associated with this floor"
        },
        "floor": {
          "type": "integer",
          "description": "The integer identifying the floor"
        },
        "map": {
          "type": "string",
          "description": ""
        },
        "map_guid": {
          "type": "string",
          "description": "The map id associated with the floor"
        },
        "elevator_entry_pos_guid": {
          "type": "string",
          "description": "The id of the position located in front of the elevator"
        },
        "elevator_entry_pos": {
          "type": "string",
          "description": ""
        },
        "elevator_pos_guid": {
          "type": "string",
          "description": "The id of the position located in the elevator"
        },
        "elevator_pos": {
          "type": "string",
          "description": ""
        },
        "entry_mission_guid": {
          "type": "string",
          "description": "The id of the entry mission"
        },
        "entry_mission": {
          "type": "string",
          "description": ""
        },
        "exit_mission_guid": {
          "type": "string",
          "description": "The id of the exit mission"
        },
        "exit_mission": {
          "type": "string",
          "description": ""
        },
        "door": {
          "type": "integer",
          "description": "The integer identifying the door used by the elevator on this floor"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description this elevator floor"
        }
      }
    },
    "PutElevator_floor": {
      "type": "object",
      "properties": {
        "map_guid": {
          "type": "string"
        },
        "elevator_guid": {
          "type": "string"
        },
        "elevator_entry_pos_guid": {
          "type": "string"
        },
        "elevator_pos_guid": {
          "type": "string"
        },
        "entry_mission_guid": {
          "type": "string"
        },
        "exit_mission_guid": {
          "type": "string"
        },
        "door": {
          "type": "integer",
          "format": "float"
        },
        "floor": {
          "type": "integer",
          "format": "float"
        }
      }
    },
    "GetSession_elevator_floors": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global id unique across robots that identifies this elevator floor"
        },
        "map_guid": {
          "type": "string",
          "description": "The map id associated with the floor"
        },
        "map": {
          "type": "string",
          "description": ""
        }
      }
    },
    "GetMetrics": {
      "type": "object",
      "properties": {}
    },
    "GetUsers": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global unique id across robots that identifies this user"
        },
        "name": {
          "type": "string",
          "description": "The name of the user"
        },
        "user_group_id": {
          "type": "string",
          "description": "Global id of the user group this user is in"
        },
        "user_group": {
          "type": "string",
          "description": "Url for the user group this user is in"
        }
      }
    },
    "PostUsers": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "username": {
          "type": "string",
          "description": "Min length: 2, Max length: 63"
        },
        "password": {
          "type": "string"
        },
        "pincode": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Min length: 2, Max length: 255"
        },
        "email": {
          "type": "string"
        },
        "single_dashboard": {
          "type": "boolean"
        },
        "dashboard_id": {
          "type": "string"
        },
        "user_group_id": {
          "type": "string"
        },
        "created_by_id": {
          "type": "string"
        }
      },
      "required": [
        "username",
        "password",
        "name",
        "user_group_id"
      ]
    },
    "GetUser": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The username of the user"
        },
        "name": {
          "type": "string",
          "description": "The name of the user"
        },
        "email": {
          "type": "string",
          "description": "The email of the user"
        },
        "single_dashboard": {
          "type": "boolean",
          "description": ""
        },
        "dashboard_id": {
          "type": "string",
          "description": ""
        },
        "create_time": {
          "type": "string",
          "description": "Creation time of the user"
        },
        "update_time": {
          "type": "string",
          "description": "Last time the user was updated"
        },
        "guid": {
          "type": "string",
          "description": "The global unique id across robots that identifies this user"
        },
        "url": {
          "type": "string",
          "description": "Url to this user"
        },
        "user_group_id": {
          "type": "string",
          "description": "Global id of the user group this user is in"
        },
        "user_group": {
          "type": "string",
          "description": "Url for the user group this user is in"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description of the type of this position"
        },
        "pincode": {
          "type": "string",
          "description": "Pincode for the user"
        }
      }
    },
    "PutUser": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "Min length: 2, Max length: 63"
        },
        "password": {
          "type": "string"
        },
        "pincode": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Min length: 2, Max length: 255"
        },
        "email": {
          "type": "string"
        },
        "single_dashboard": {
          "type": "boolean"
        },
        "dashboard_id": {
          "type": "string"
        },
        "user_group_id": {
          "type": "string"
        }
      }
    },
    "GetMe": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global unique id across robots that identifies this user"
        },
        "name": {
          "type": "string",
          "description": "The name of the user"
        },
        "user_group_id": {
          "type": "string",
          "description": "Global id of the user group this user is in"
        },
        "user_group": {
          "type": "string",
          "description": "Url for the user group this user is in"
        }
      }
    },
    "PutMe": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "Min length: 2, Max length: 63"
        },
        "password": {
          "type": "string"
        },
        "pincode": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Min length: 2, Max length: 255"
        },
        "email": {
          "type": "string"
        },
        "single_dashboard": {
          "type": "boolean"
        },
        "dashboard_id": {
          "type": "string"
        },
        "user_group_id": {
          "type": "string"
        }
      }
    },
    "GetUser_me_permissions": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global unique id across robots that identifies this permission"
        },
        "endpoint": {
          "type": "string",
          "description": ""
        },
        "permission_type": {
          "type": "string",
          "description": "The permission type"
        }
      }
    },
    "GetUser_me_group": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global unique id across robots that identifies this usergroup"
        },
        "name": {
          "type": "string",
          "description": "Name of the usergroup"
        }
      }
    },
    "GetUser_groups": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global unique id across robots that identifies this usergroup"
        },
        "name": {
          "type": "string",
          "description": "Name of the usergroup"
        }
      }
    },
    "PostUser_groups": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Min length: 2, Max length: 255"
        },
        "created_by_id": {
          "type": "string"
        },
        "session_expiration_enabled": {
          "type": "boolean"
        },
        "session_timeout": {
          "type": "integer",
          "format": "float"
        }
      },
      "required": [
        "name"
      ]
    },
    "GetUser_group": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the usergroup"
        },
        "create_time": {
          "type": "string",
          "description": "Creation time of the usergroup"
        },
        "update_time": {
          "type": "string",
          "description": "Last time the usergroup was updated"
        },
        "guid": {
          "type": "string",
          "description": "The global unique id across robots that identifies this usergroup"
        },
        "created_by_id": {
          "type": "string",
          "description": "The global id of the user who created this entry"
        },
        "created_by": {
          "type": "string",
          "description": "The url to the description of the type of this position"
        },
        "session_expiration_enabled": {
          "type": "boolean",
          "description": "Session expiration enabled"
        },
        "session_timeout": {
          "type": "integer",
          "description": "Session expiration timeout"
        }
      }
    },
    "PutUser_group": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Min length: 2, Max length: 255"
        },
        "session_expiration_enabled": {
          "type": "boolean"
        },
        "session_timeout": {
          "type": "integer",
          "format": "float"
        }
      }
    },
    "GetPermissions": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global unique id across robots that identifies this permission"
        },
        "endpoint": {
          "type": "string",
          "description": ""
        },
        "permission_type": {
          "type": "string",
          "description": "The permission type"
        }
      }
    },
    "PostPermissions": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "endpoint": {
          "type": "string",
          "description": "Min length: 1, Max length: 255"
        },
        "permission_type": {
          "type": "string",
          "description": ""
        },
        "user_group_guid": {
          "type": "string"
        }
      },
      "required": [
        "endpoint",
        "permission_type",
        "user_group_guid"
      ]
    },
    "GetPermission": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "description": "The global unique id across robots that identifies this permission"
        },
        "endpoint": {
          "type": "string",
          "description": ""
        },
        "permission_type": {
          "type": "string",
          "description": "The permission type"
        },
        "user_group_guid": {
          "type": "string",
          "description": "The global id of the usergroup"
        }
      }
    },
    "GetUser_group_permission": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the resource"
        },
        "guid": {
          "type": "string",
          "description": "The global unique id across robots that identifies this permission"
        },
        "endpoint": {
          "type": "string",
          "description": ""
        },
        "permission_type": {
          "type": "string",
          "description": "The permission type"
        }
      }
    },
    "PostUser_group_permission": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        },
        "endpoint": {
          "type": "string",
          "description": "Min length: 1, Max length: 255"
        },
        "permission_type": {
          "type": "string",
          "description": ""
        },
        "user_group_guid": {
          "type": "string"
        }
      },
      "required": [
        "endpoint",
        "permission_type",
        "user_group_guid"
      ]
    },
    "GetUsers_auth": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "login_time": {
          "type": "string",
          "format": "date-time"
        },
        "expiration_time": {
          "type": "string",
          "format": "date-time"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "GetDiagnostics": {
      "type": "object",
      "properties": {}
    },
    "GetClear_site_data": {
      "type": "object",
      "properties": {}
    }
  }
}